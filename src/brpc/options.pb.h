// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/options.proto

#ifndef PROTOBUF_brpc_2foptions_2eproto__INCLUDED
#define PROTOBUF_brpc_2foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

namespace brpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_brpc_2foptions_2eproto();
void protobuf_AssignDesc_brpc_2foptions_2eproto();
void protobuf_ShutdownFile_brpc_2foptions_2eproto();

class ChunkInfo;

enum TalkType {
  TALK_TYPE_NORMAL = 0,
  TALK_TYPE_ONEWAY = 1
};
bool TalkType_IsValid(int value);
const TalkType TalkType_MIN = TALK_TYPE_NORMAL;
const TalkType TalkType_MAX = TALK_TYPE_ONEWAY;
const int TalkType_ARRAYSIZE = TalkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TalkType_descriptor();
inline const ::std::string& TalkType_Name(TalkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TalkType_descriptor(), value);
}
inline bool TalkType_Parse(
    const ::std::string& name, TalkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TalkType>(
    TalkType_descriptor(), name, value);
}
enum ConnectionType {
  CONNECTION_TYPE_UNKNOWN = 0,
  CONNECTION_TYPE_SINGLE = 1,
  CONNECTION_TYPE_POOLED = 2,
  CONNECTION_TYPE_SHORT = 4
};
bool ConnectionType_IsValid(int value);
const ConnectionType ConnectionType_MIN = CONNECTION_TYPE_UNKNOWN;
const ConnectionType ConnectionType_MAX = CONNECTION_TYPE_SHORT;
const int ConnectionType_ARRAYSIZE = ConnectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConnectionType_descriptor();
inline const ::std::string& ConnectionType_Name(ConnectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConnectionType_descriptor(), value);
}
inline bool ConnectionType_Parse(
    const ::std::string& name, ConnectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectionType>(
    ConnectionType_descriptor(), name, value);
}
enum ProtocolType {
  PROTOCOL_UNKNOWN = 0,
  PROTOCOL_BAIDU_STD = 1,
  PROTOCOL_STREAMING_RPC = 2,
  PROTOCOL_HULU_PBRPC = 3,
  PROTOCOL_SOFA_PBRPC = 4,
  PROTOCOL_RTMP = 5,
  PROTOCOL_THRIFT = 6,
  PROTOCOL_HTTP = 7,
  PROTOCOL_PUBLIC_PBRPC = 8,
  PROTOCOL_NOVA_PBRPC = 9,
  PROTOCOL_REDIS = 10,
  PROTOCOL_NSHEAD_CLIENT = 11,
  PROTOCOL_NSHEAD = 12,
  PROTOCOL_HADOOP_RPC = 13,
  PROTOCOL_HADOOP_SERVER_RPC = 14,
  PROTOCOL_MONGO = 15,
  PROTOCOL_UBRPC_COMPACK = 16,
  PROTOCOL_DIDX_CLIENT = 17,
  PROTOCOL_MEMCACHE = 18,
  PROTOCOL_ITP = 19,
  PROTOCOL_NSHEAD_MCPACK = 20,
  PROTOCOL_DISP_IDL = 21,
  PROTOCOL_ERSDA_CLIENT = 22,
  PROTOCOL_UBRPC_MCPACK2 = 23,
  PROTOCOL_CDS_AGENT = 24,
  PROTOCOL_ESP = 25,
  PROTOCOL_H2 = 26
};
bool ProtocolType_IsValid(int value);
const ProtocolType ProtocolType_MIN = PROTOCOL_UNKNOWN;
const ProtocolType ProtocolType_MAX = PROTOCOL_H2;
const int ProtocolType_ARRAYSIZE = ProtocolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor();
inline const ::std::string& ProtocolType_Name(ProtocolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtocolType_descriptor(), value);
}
inline bool ProtocolType_Parse(
    const ::std::string& name, ProtocolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtocolType>(
    ProtocolType_descriptor(), name, value);
}
enum CompressType {
  COMPRESS_TYPE_NONE = 0,
  COMPRESS_TYPE_SNAPPY = 1,
  COMPRESS_TYPE_GZIP = 2,
  COMPRESS_TYPE_ZLIB = 3,
  COMPRESS_TYPE_LZ4 = 4
};
bool CompressType_IsValid(int value);
const CompressType CompressType_MIN = COMPRESS_TYPE_NONE;
const CompressType CompressType_MAX = COMPRESS_TYPE_LZ4;
const int CompressType_ARRAYSIZE = CompressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompressType_descriptor();
inline const ::std::string& CompressType_Name(CompressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompressType_descriptor(), value);
}
inline bool CompressType_Parse(
    const ::std::string& name, CompressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressType>(
    CompressType_descriptor(), name, value);
}
// ===================================================================

class ChunkInfo : public ::google::protobuf::Message {
 public:
  ChunkInfo();
  virtual ~ChunkInfo();
  
  ChunkInfo(const ChunkInfo& from);
  
  inline ChunkInfo& operator=(const ChunkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkInfo& default_instance();
  
  void Swap(ChunkInfo* other);
  
  // implements Message ----------------------------------------------
  
  ChunkInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChunkInfo& from);
  void MergeFrom(const ChunkInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 stream_id = 1;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::int64 stream_id() const;
  inline void set_stream_id(::google::protobuf::int64 value);
  
  // required int64 chunk_id = 2;
  inline bool has_chunk_id() const;
  inline void clear_chunk_id();
  static const int kChunkIdFieldNumber = 2;
  inline ::google::protobuf::int64 chunk_id() const;
  inline void set_chunk_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:brpc.ChunkInfo)
 private:
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_chunk_id();
  inline void clear_has_chunk_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 stream_id_;
  ::google::protobuf::int64 chunk_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_brpc_2foptions_2eproto();
  friend void protobuf_AssignDesc_brpc_2foptions_2eproto();
  friend void protobuf_ShutdownFile_brpc_2foptions_2eproto();
  
  void InitAsDefaultInstance();
  static ChunkInfo* default_instance_;
};
// ===================================================================

static const int kServiceTimeoutFieldNumber = 90000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  service_timeout;
static const int kRequestTalkTypeFieldNumber = 90001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< brpc::TalkType, brpc::TalkType_IsValid>, 14, false >
  request_talk_type;
static const int kResponseTalkTypeFieldNumber = 90002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< brpc::TalkType, brpc::TalkType_IsValid>, 14, false >
  response_talk_type;
static const int kMethodTimeoutFieldNumber = 90003;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  method_timeout;
static const int kRequestCompressionFieldNumber = 90004;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< brpc::CompressType, brpc::CompressType_IsValid>, 14, false >
  request_compression;
static const int kResponseCompressionFieldNumber = 90005;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< brpc::CompressType, brpc::CompressType_IsValid>, 14, false >
  response_compression;

// ===================================================================

// ChunkInfo

// required int64 stream_id = 1;
inline bool ChunkInfo::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkInfo::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkInfo::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkInfo::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  clear_has_stream_id();
}
inline ::google::protobuf::int64 ChunkInfo::stream_id() const {
  return stream_id_;
}
inline void ChunkInfo::set_stream_id(::google::protobuf::int64 value) {
  set_has_stream_id();
  stream_id_ = value;
}

// required int64 chunk_id = 2;
inline bool ChunkInfo::has_chunk_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkInfo::set_has_chunk_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChunkInfo::clear_has_chunk_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChunkInfo::clear_chunk_id() {
  chunk_id_ = GOOGLE_LONGLONG(0);
  clear_has_chunk_id();
}
inline ::google::protobuf::int64 ChunkInfo::chunk_id() const {
  return chunk_id_;
}
inline void ChunkInfo::set_chunk_id(::google::protobuf::int64 value) {
  set_has_chunk_id();
  chunk_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< brpc::TalkType>() {
  return brpc::TalkType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< brpc::ConnectionType>() {
  return brpc::ConnectionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< brpc::ProtocolType>() {
  return brpc::ProtocolType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< brpc::CompressType>() {
  return brpc::CompressType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_brpc_2foptions_2eproto__INCLUDED
