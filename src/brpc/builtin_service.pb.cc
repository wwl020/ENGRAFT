// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/builtin_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {

namespace {

const ::google::protobuf::Descriptor* IndexRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlagsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlagsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlagsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlagsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VersionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VersionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HealthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HealthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtobufsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtobufsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtobufsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtobufsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VarsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VarsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BthreadsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BthreadsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BthreadsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BthreadsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocketsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocketsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocketsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocketsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThreadsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThreadsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThreadsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThreadsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VLogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VLogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VLogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VLogResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BadMethodRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BadMethodRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BadMethodResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BadMethodResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotspotsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotspotsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotspotsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotspotsResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* index_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* version_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* health_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* status_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* protobufs_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* connections_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* list_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* threads_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* vlog_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* bthreads_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* ids_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* sockets_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* brpc_metrics_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* badmethod_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* pprof_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* hotspots_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* flags_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* vars_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* dir_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2fbuiltin_5fservice_2eproto() {
  protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/builtin_service.proto");
  GOOGLE_CHECK(file != NULL);
  IndexRequest_descriptor_ = file->message_type(0);
  static const int IndexRequest_offsets_[1] = {
  };
  IndexRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexRequest_descriptor_,
      IndexRequest::default_instance_,
      IndexRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexRequest));
  IndexResponse_descriptor_ = file->message_type(1);
  static const int IndexResponse_offsets_[1] = {
  };
  IndexResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexResponse_descriptor_,
      IndexResponse::default_instance_,
      IndexResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexResponse));
  FlagsRequest_descriptor_ = file->message_type(2);
  static const int FlagsRequest_offsets_[1] = {
  };
  FlagsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlagsRequest_descriptor_,
      FlagsRequest::default_instance_,
      FlagsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlagsRequest));
  FlagsResponse_descriptor_ = file->message_type(3);
  static const int FlagsResponse_offsets_[1] = {
  };
  FlagsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlagsResponse_descriptor_,
      FlagsResponse::default_instance_,
      FlagsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlagsResponse));
  VersionRequest_descriptor_ = file->message_type(4);
  static const int VersionRequest_offsets_[1] = {
  };
  VersionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VersionRequest_descriptor_,
      VersionRequest::default_instance_,
      VersionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VersionRequest));
  VersionResponse_descriptor_ = file->message_type(5);
  static const int VersionResponse_offsets_[1] = {
  };
  VersionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VersionResponse_descriptor_,
      VersionResponse::default_instance_,
      VersionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VersionResponse));
  HealthRequest_descriptor_ = file->message_type(6);
  static const int HealthRequest_offsets_[1] = {
  };
  HealthRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthRequest_descriptor_,
      HealthRequest::default_instance_,
      HealthRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthRequest));
  HealthResponse_descriptor_ = file->message_type(7);
  static const int HealthResponse_offsets_[1] = {
  };
  HealthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthResponse_descriptor_,
      HealthResponse::default_instance_,
      HealthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthResponse));
  StatusRequest_descriptor_ = file->message_type(8);
  static const int StatusRequest_offsets_[1] = {
  };
  StatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusRequest_descriptor_,
      StatusRequest::default_instance_,
      StatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusRequest));
  StatusResponse_descriptor_ = file->message_type(9);
  static const int StatusResponse_offsets_[1] = {
  };
  StatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusResponse_descriptor_,
      StatusResponse::default_instance_,
      StatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusResponse));
  ProtobufsRequest_descriptor_ = file->message_type(10);
  static const int ProtobufsRequest_offsets_[1] = {
  };
  ProtobufsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtobufsRequest_descriptor_,
      ProtobufsRequest::default_instance_,
      ProtobufsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtobufsRequest));
  ProtobufsResponse_descriptor_ = file->message_type(11);
  static const int ProtobufsResponse_offsets_[1] = {
  };
  ProtobufsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtobufsResponse_descriptor_,
      ProtobufsResponse::default_instance_,
      ProtobufsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtobufsResponse));
  ConnectionsRequest_descriptor_ = file->message_type(12);
  static const int ConnectionsRequest_offsets_[1] = {
  };
  ConnectionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionsRequest_descriptor_,
      ConnectionsRequest::default_instance_,
      ConnectionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionsRequest));
  ConnectionsResponse_descriptor_ = file->message_type(13);
  static const int ConnectionsResponse_offsets_[1] = {
  };
  ConnectionsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionsResponse_descriptor_,
      ConnectionsResponse::default_instance_,
      ConnectionsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionsResponse));
  ListRequest_descriptor_ = file->message_type(14);
  static const int ListRequest_offsets_[1] = {
  };
  ListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListRequest_descriptor_,
      ListRequest::default_instance_,
      ListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListRequest));
  ListResponse_descriptor_ = file->message_type(15);
  static const int ListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, service_),
  };
  ListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListResponse_descriptor_,
      ListResponse::default_instance_,
      ListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListResponse));
  VarsRequest_descriptor_ = file->message_type(16);
  static const int VarsRequest_offsets_[1] = {
  };
  VarsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarsRequest_descriptor_,
      VarsRequest::default_instance_,
      VarsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarsRequest));
  VarsResponse_descriptor_ = file->message_type(17);
  static const int VarsResponse_offsets_[1] = {
  };
  VarsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarsResponse_descriptor_,
      VarsResponse::default_instance_,
      VarsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarsResponse));
  BthreadsRequest_descriptor_ = file->message_type(18);
  static const int BthreadsRequest_offsets_[1] = {
  };
  BthreadsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BthreadsRequest_descriptor_,
      BthreadsRequest::default_instance_,
      BthreadsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BthreadsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BthreadsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BthreadsRequest));
  BthreadsResponse_descriptor_ = file->message_type(19);
  static const int BthreadsResponse_offsets_[1] = {
  };
  BthreadsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BthreadsResponse_descriptor_,
      BthreadsResponse::default_instance_,
      BthreadsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BthreadsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BthreadsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BthreadsResponse));
  IdsRequest_descriptor_ = file->message_type(20);
  static const int IdsRequest_offsets_[1] = {
  };
  IdsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IdsRequest_descriptor_,
      IdsRequest::default_instance_,
      IdsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IdsRequest));
  IdsResponse_descriptor_ = file->message_type(21);
  static const int IdsResponse_offsets_[1] = {
  };
  IdsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IdsResponse_descriptor_,
      IdsResponse::default_instance_,
      IdsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IdsResponse));
  SocketsRequest_descriptor_ = file->message_type(22);
  static const int SocketsRequest_offsets_[1] = {
  };
  SocketsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocketsRequest_descriptor_,
      SocketsRequest::default_instance_,
      SocketsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocketsRequest));
  SocketsResponse_descriptor_ = file->message_type(23);
  static const int SocketsResponse_offsets_[1] = {
  };
  SocketsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocketsResponse_descriptor_,
      SocketsResponse::default_instance_,
      SocketsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocketsResponse));
  ThreadsRequest_descriptor_ = file->message_type(24);
  static const int ThreadsRequest_offsets_[1] = {
  };
  ThreadsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThreadsRequest_descriptor_,
      ThreadsRequest::default_instance_,
      ThreadsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThreadsRequest));
  ThreadsResponse_descriptor_ = file->message_type(25);
  static const int ThreadsResponse_offsets_[1] = {
  };
  ThreadsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThreadsResponse_descriptor_,
      ThreadsResponse::default_instance_,
      ThreadsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThreadsResponse));
  DirRequest_descriptor_ = file->message_type(26);
  static const int DirRequest_offsets_[1] = {
  };
  DirRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirRequest_descriptor_,
      DirRequest::default_instance_,
      DirRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirRequest));
  DirResponse_descriptor_ = file->message_type(27);
  static const int DirResponse_offsets_[1] = {
  };
  DirResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirResponse_descriptor_,
      DirResponse::default_instance_,
      DirResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirResponse));
  VLogRequest_descriptor_ = file->message_type(28);
  static const int VLogRequest_offsets_[1] = {
  };
  VLogRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VLogRequest_descriptor_,
      VLogRequest::default_instance_,
      VLogRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLogRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLogRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VLogRequest));
  VLogResponse_descriptor_ = file->message_type(29);
  static const int VLogResponse_offsets_[1] = {
  };
  VLogResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VLogResponse_descriptor_,
      VLogResponse::default_instance_,
      VLogResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLogResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLogResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VLogResponse));
  MetricsRequest_descriptor_ = file->message_type(30);
  static const int MetricsRequest_offsets_[1] = {
  };
  MetricsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetricsRequest_descriptor_,
      MetricsRequest::default_instance_,
      MetricsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetricsRequest));
  MetricsResponse_descriptor_ = file->message_type(31);
  static const int MetricsResponse_offsets_[1] = {
  };
  MetricsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetricsResponse_descriptor_,
      MetricsResponse::default_instance_,
      MetricsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetricsResponse));
  BadMethodRequest_descriptor_ = file->message_type(32);
  static const int BadMethodRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BadMethodRequest, service_name_),
  };
  BadMethodRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BadMethodRequest_descriptor_,
      BadMethodRequest::default_instance_,
      BadMethodRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BadMethodRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BadMethodRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BadMethodRequest));
  BadMethodResponse_descriptor_ = file->message_type(33);
  static const int BadMethodResponse_offsets_[1] = {
  };
  BadMethodResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BadMethodResponse_descriptor_,
      BadMethodResponse::default_instance_,
      BadMethodResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BadMethodResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BadMethodResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BadMethodResponse));
  ProfileRequest_descriptor_ = file->message_type(34);
  static const int ProfileRequest_offsets_[1] = {
  };
  ProfileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfileRequest_descriptor_,
      ProfileRequest::default_instance_,
      ProfileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfileRequest));
  ProfileResponse_descriptor_ = file->message_type(35);
  static const int ProfileResponse_offsets_[1] = {
  };
  ProfileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfileResponse_descriptor_,
      ProfileResponse::default_instance_,
      ProfileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfileResponse));
  HotspotsRequest_descriptor_ = file->message_type(36);
  static const int HotspotsRequest_offsets_[1] = {
  };
  HotspotsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotspotsRequest_descriptor_,
      HotspotsRequest::default_instance_,
      HotspotsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotspotsRequest));
  HotspotsResponse_descriptor_ = file->message_type(37);
  static const int HotspotsResponse_offsets_[1] = {
  };
  HotspotsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotspotsResponse_descriptor_,
      HotspotsResponse::default_instance_,
      HotspotsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotspotsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotspotsResponse));
  index_descriptor_ = file->service(0);
  version_descriptor_ = file->service(1);
  health_descriptor_ = file->service(2);
  status_descriptor_ = file->service(3);
  protobufs_descriptor_ = file->service(4);
  connections_descriptor_ = file->service(5);
  list_descriptor_ = file->service(6);
  threads_descriptor_ = file->service(7);
  vlog_descriptor_ = file->service(8);
  bthreads_descriptor_ = file->service(9);
  ids_descriptor_ = file->service(10);
  sockets_descriptor_ = file->service(11);
  brpc_metrics_descriptor_ = file->service(12);
  badmethod_descriptor_ = file->service(13);
  pprof_descriptor_ = file->service(14);
  hotspots_descriptor_ = file->service(15);
  flags_descriptor_ = file->service(16);
  vars_descriptor_ = file->service(17);
  dir_descriptor_ = file->service(18);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2fbuiltin_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexRequest_descriptor_, &IndexRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexResponse_descriptor_, &IndexResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlagsRequest_descriptor_, &FlagsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlagsResponse_descriptor_, &FlagsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VersionRequest_descriptor_, &VersionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VersionResponse_descriptor_, &VersionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthRequest_descriptor_, &HealthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthResponse_descriptor_, &HealthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusRequest_descriptor_, &StatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusResponse_descriptor_, &StatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtobufsRequest_descriptor_, &ProtobufsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtobufsResponse_descriptor_, &ProtobufsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionsRequest_descriptor_, &ConnectionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionsResponse_descriptor_, &ConnectionsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListRequest_descriptor_, &ListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListResponse_descriptor_, &ListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarsRequest_descriptor_, &VarsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarsResponse_descriptor_, &VarsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BthreadsRequest_descriptor_, &BthreadsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BthreadsResponse_descriptor_, &BthreadsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IdsRequest_descriptor_, &IdsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IdsResponse_descriptor_, &IdsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocketsRequest_descriptor_, &SocketsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocketsResponse_descriptor_, &SocketsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThreadsRequest_descriptor_, &ThreadsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThreadsResponse_descriptor_, &ThreadsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirRequest_descriptor_, &DirRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirResponse_descriptor_, &DirResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VLogRequest_descriptor_, &VLogRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VLogResponse_descriptor_, &VLogResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetricsRequest_descriptor_, &MetricsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetricsResponse_descriptor_, &MetricsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BadMethodRequest_descriptor_, &BadMethodRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BadMethodResponse_descriptor_, &BadMethodResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfileRequest_descriptor_, &ProfileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfileResponse_descriptor_, &ProfileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotspotsRequest_descriptor_, &HotspotsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotspotsResponse_descriptor_, &HotspotsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2fbuiltin_5fservice_2eproto() {
  delete IndexRequest::default_instance_;
  delete IndexRequest_reflection_;
  delete IndexResponse::default_instance_;
  delete IndexResponse_reflection_;
  delete FlagsRequest::default_instance_;
  delete FlagsRequest_reflection_;
  delete FlagsResponse::default_instance_;
  delete FlagsResponse_reflection_;
  delete VersionRequest::default_instance_;
  delete VersionRequest_reflection_;
  delete VersionResponse::default_instance_;
  delete VersionResponse_reflection_;
  delete HealthRequest::default_instance_;
  delete HealthRequest_reflection_;
  delete HealthResponse::default_instance_;
  delete HealthResponse_reflection_;
  delete StatusRequest::default_instance_;
  delete StatusRequest_reflection_;
  delete StatusResponse::default_instance_;
  delete StatusResponse_reflection_;
  delete ProtobufsRequest::default_instance_;
  delete ProtobufsRequest_reflection_;
  delete ProtobufsResponse::default_instance_;
  delete ProtobufsResponse_reflection_;
  delete ConnectionsRequest::default_instance_;
  delete ConnectionsRequest_reflection_;
  delete ConnectionsResponse::default_instance_;
  delete ConnectionsResponse_reflection_;
  delete ListRequest::default_instance_;
  delete ListRequest_reflection_;
  delete ListResponse::default_instance_;
  delete ListResponse_reflection_;
  delete VarsRequest::default_instance_;
  delete VarsRequest_reflection_;
  delete VarsResponse::default_instance_;
  delete VarsResponse_reflection_;
  delete BthreadsRequest::default_instance_;
  delete BthreadsRequest_reflection_;
  delete BthreadsResponse::default_instance_;
  delete BthreadsResponse_reflection_;
  delete IdsRequest::default_instance_;
  delete IdsRequest_reflection_;
  delete IdsResponse::default_instance_;
  delete IdsResponse_reflection_;
  delete SocketsRequest::default_instance_;
  delete SocketsRequest_reflection_;
  delete SocketsResponse::default_instance_;
  delete SocketsResponse_reflection_;
  delete ThreadsRequest::default_instance_;
  delete ThreadsRequest_reflection_;
  delete ThreadsResponse::default_instance_;
  delete ThreadsResponse_reflection_;
  delete DirRequest::default_instance_;
  delete DirRequest_reflection_;
  delete DirResponse::default_instance_;
  delete DirResponse_reflection_;
  delete VLogRequest::default_instance_;
  delete VLogRequest_reflection_;
  delete VLogResponse::default_instance_;
  delete VLogResponse_reflection_;
  delete MetricsRequest::default_instance_;
  delete MetricsRequest_reflection_;
  delete MetricsResponse::default_instance_;
  delete MetricsResponse_reflection_;
  delete BadMethodRequest::default_instance_;
  delete BadMethodRequest_reflection_;
  delete BadMethodResponse::default_instance_;
  delete BadMethodResponse_reflection_;
  delete ProfileRequest::default_instance_;
  delete ProfileRequest_reflection_;
  delete ProfileResponse::default_instance_;
  delete ProfileResponse_reflection_;
  delete HotspotsRequest::default_instance_;
  delete HotspotsRequest_reflection_;
  delete HotspotsResponse::default_instance_;
  delete HotspotsResponse_reflection_;
}

void protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032brpc/builtin_service.proto\022\004brpc\032 goog"
    "le/protobuf/descriptor.proto\"\016\n\014IndexReq"
    "uest\"\017\n\rIndexResponse\"\016\n\014FlagsRequest\"\017\n"
    "\rFlagsResponse\"\020\n\016VersionRequest\"\021\n\017Vers"
    "ionResponse\"\017\n\rHealthRequest\"\020\n\016HealthRe"
    "sponse\"\017\n\rStatusRequest\"\020\n\016StatusRespons"
    "e\"\022\n\020ProtobufsRequest\"\023\n\021ProtobufsRespon"
    "se\"\024\n\022ConnectionsRequest\"\025\n\023ConnectionsR"
    "esponse\"\r\n\013ListRequest\"H\n\014ListResponse\0228"
    "\n\007service\030\001 \003(\0132\'.google.protobuf.Servic"
    "eDescriptorProto\"\r\n\013VarsRequest\"\016\n\014VarsR"
    "esponse\"\021\n\017BthreadsRequest\"\022\n\020BthreadsRe"
    "sponse\"\014\n\nIdsRequest\"\r\n\013IdsResponse\"\020\n\016S"
    "ocketsRequest\"\021\n\017SocketsResponse\"\020\n\016Thre"
    "adsRequest\"\021\n\017ThreadsResponse\"\014\n\nDirRequ"
    "est\"\r\n\013DirResponse\"\r\n\013VLogRequest\"\016\n\014VLo"
    "gResponse\"\020\n\016MetricsRequest\"\021\n\017MetricsRe"
    "sponse\"(\n\020BadMethodRequest\022\024\n\014service_na"
    "me\030\001 \002(\t\"\023\n\021BadMethodResponse\"\020\n\016Profile"
    "Request\"\021\n\017ProfileResponse\"\021\n\017HotspotsRe"
    "quest\"\022\n\020HotspotsResponse2B\n\005index\0229\n\016de"
    "fault_method\022\022.brpc.IndexRequest\032\023.brpc."
    "IndexResponse2H\n\007version\022=\n\016default_meth"
    "od\022\024.brpc.VersionRequest\032\025.brpc.VersionR"
    "esponse2E\n\006health\022;\n\016default_method\022\023.br"
    "pc.HealthRequest\032\024.brpc.HealthResponse2E"
    "\n\006status\022;\n\016default_method\022\023.brpc.Status"
    "Request\032\024.brpc.StatusResponse2N\n\tprotobu"
    "fs\022A\n\016default_method\022\026.brpc.ProtobufsReq"
    "uest\032\027.brpc.ProtobufsResponse2T\n\013connect"
    "ions\022E\n\016default_method\022\030.brpc.Connection"
    "sRequest\032\031.brpc.ConnectionsResponse2\?\n\004l"
    "ist\0227\n\016default_method\022\021.brpc.ListRequest"
    "\032\022.brpc.ListResponse2H\n\007threads\022=\n\016defau"
    "lt_method\022\024.brpc.ThreadsRequest\032\025.brpc.T"
    "hreadsResponse2\?\n\004vlog\0227\n\016default_method"
    "\022\021.brpc.VLogRequest\032\022.brpc.VLogResponse2"
    "K\n\010bthreads\022\?\n\016default_method\022\025.brpc.Bth"
    "readsRequest\032\026.brpc.BthreadsResponse2<\n\003"
    "ids\0225\n\016default_method\022\020.brpc.IdsRequest\032"
    "\021.brpc.IdsResponse2H\n\007sockets\022=\n\016default"
    "_method\022\024.brpc.SocketsRequest\032\025.brpc.Soc"
    "ketsResponse2M\n\014brpc_metrics\022=\n\016default_"
    "method\022\024.brpc.MetricsRequest\032\025.brpc.Metr"
    "icsResponse2I\n\tbadmethod\022<\n\tno_method\022\026."
    "brpc.BadMethodRequest\032\027.brpc.BadMethodRe"
    "sponse2\325\002\n\005pprof\0226\n\007profile\022\024.brpc.Profi"
    "leRequest\032\025.brpc.ProfileResponse\0229\n\ncont"
    "ention\022\024.brpc.ProfileRequest\032\025.brpc.Prof"
    "ileResponse\0223\n\004heap\022\024.brpc.ProfileReques"
    "t\032\025.brpc.ProfileResponse\0225\n\006symbol\022\024.brp"
    "c.ProfileRequest\032\025.brpc.ProfileResponse\022"
    "6\n\007cmdline\022\024.brpc.ProfileRequest\032\025.brpc."
    "ProfileResponse\0225\n\006growth\022\024.brpc.Profile"
    "Request\032\025.brpc.ProfileResponse2\214\004\n\010hotsp"
    "ots\0224\n\003cpu\022\025.brpc.HotspotsRequest\032\026.brpc"
    ".HotspotsResponse\022C\n\022cpu_non_responsive\022"
    "\025.brpc.HotspotsRequest\032\026.brpc.HotspotsRe"
    "sponse\0225\n\004heap\022\025.brpc.HotspotsRequest\032\026."
    "brpc.HotspotsResponse\022D\n\023heap_non_respon"
    "sive\022\025.brpc.HotspotsRequest\032\026.brpc.Hotsp"
    "otsResponse\0227\n\006growth\022\025.brpc.HotspotsReq"
    "uest\032\026.brpc.HotspotsResponse\022F\n\025growth_n"
    "on_responsive\022\025.brpc.HotspotsRequest\032\026.b"
    "rpc.HotspotsResponse\022;\n\ncontention\022\025.brp"
    "c.HotspotsRequest\032\026.brpc.HotspotsRespons"
    "e\022J\n\031contention_non_responsive\022\025.brpc.Ho"
    "tspotsRequest\032\026.brpc.HotspotsResponse2B\n"
    "\005flags\0229\n\016default_method\022\022.brpc.FlagsReq"
    "uest\032\023.brpc.FlagsResponse2\?\n\004vars\0227\n\016def"
    "ault_method\022\021.brpc.VarsRequest\032\022.brpc.Va"
    "rsResponse2<\n\003dir\0225\n\016default_method\022\020.br"
    "pc.DirRequest\032\021.brpc.DirResponseB \n\010com."
    "brpcB\016BuiltinService\200\001\001\210\001\001", 2946);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/builtin_service.proto", &protobuf_RegisterTypes);
  IndexRequest::default_instance_ = new IndexRequest();
  IndexResponse::default_instance_ = new IndexResponse();
  FlagsRequest::default_instance_ = new FlagsRequest();
  FlagsResponse::default_instance_ = new FlagsResponse();
  VersionRequest::default_instance_ = new VersionRequest();
  VersionResponse::default_instance_ = new VersionResponse();
  HealthRequest::default_instance_ = new HealthRequest();
  HealthResponse::default_instance_ = new HealthResponse();
  StatusRequest::default_instance_ = new StatusRequest();
  StatusResponse::default_instance_ = new StatusResponse();
  ProtobufsRequest::default_instance_ = new ProtobufsRequest();
  ProtobufsResponse::default_instance_ = new ProtobufsResponse();
  ConnectionsRequest::default_instance_ = new ConnectionsRequest();
  ConnectionsResponse::default_instance_ = new ConnectionsResponse();
  ListRequest::default_instance_ = new ListRequest();
  ListResponse::default_instance_ = new ListResponse();
  VarsRequest::default_instance_ = new VarsRequest();
  VarsResponse::default_instance_ = new VarsResponse();
  BthreadsRequest::default_instance_ = new BthreadsRequest();
  BthreadsResponse::default_instance_ = new BthreadsResponse();
  IdsRequest::default_instance_ = new IdsRequest();
  IdsResponse::default_instance_ = new IdsResponse();
  SocketsRequest::default_instance_ = new SocketsRequest();
  SocketsResponse::default_instance_ = new SocketsResponse();
  ThreadsRequest::default_instance_ = new ThreadsRequest();
  ThreadsResponse::default_instance_ = new ThreadsResponse();
  DirRequest::default_instance_ = new DirRequest();
  DirResponse::default_instance_ = new DirResponse();
  VLogRequest::default_instance_ = new VLogRequest();
  VLogResponse::default_instance_ = new VLogResponse();
  MetricsRequest::default_instance_ = new MetricsRequest();
  MetricsResponse::default_instance_ = new MetricsResponse();
  BadMethodRequest::default_instance_ = new BadMethodRequest();
  BadMethodResponse::default_instance_ = new BadMethodResponse();
  ProfileRequest::default_instance_ = new ProfileRequest();
  ProfileResponse::default_instance_ = new ProfileResponse();
  HotspotsRequest::default_instance_ = new HotspotsRequest();
  HotspotsResponse::default_instance_ = new HotspotsResponse();
  IndexRequest::default_instance_->InitAsDefaultInstance();
  IndexResponse::default_instance_->InitAsDefaultInstance();
  FlagsRequest::default_instance_->InitAsDefaultInstance();
  FlagsResponse::default_instance_->InitAsDefaultInstance();
  VersionRequest::default_instance_->InitAsDefaultInstance();
  VersionResponse::default_instance_->InitAsDefaultInstance();
  HealthRequest::default_instance_->InitAsDefaultInstance();
  HealthResponse::default_instance_->InitAsDefaultInstance();
  StatusRequest::default_instance_->InitAsDefaultInstance();
  StatusResponse::default_instance_->InitAsDefaultInstance();
  ProtobufsRequest::default_instance_->InitAsDefaultInstance();
  ProtobufsResponse::default_instance_->InitAsDefaultInstance();
  ConnectionsRequest::default_instance_->InitAsDefaultInstance();
  ConnectionsResponse::default_instance_->InitAsDefaultInstance();
  ListRequest::default_instance_->InitAsDefaultInstance();
  ListResponse::default_instance_->InitAsDefaultInstance();
  VarsRequest::default_instance_->InitAsDefaultInstance();
  VarsResponse::default_instance_->InitAsDefaultInstance();
  BthreadsRequest::default_instance_->InitAsDefaultInstance();
  BthreadsResponse::default_instance_->InitAsDefaultInstance();
  IdsRequest::default_instance_->InitAsDefaultInstance();
  IdsResponse::default_instance_->InitAsDefaultInstance();
  SocketsRequest::default_instance_->InitAsDefaultInstance();
  SocketsResponse::default_instance_->InitAsDefaultInstance();
  ThreadsRequest::default_instance_->InitAsDefaultInstance();
  ThreadsResponse::default_instance_->InitAsDefaultInstance();
  DirRequest::default_instance_->InitAsDefaultInstance();
  DirResponse::default_instance_->InitAsDefaultInstance();
  VLogRequest::default_instance_->InitAsDefaultInstance();
  VLogResponse::default_instance_->InitAsDefaultInstance();
  MetricsRequest::default_instance_->InitAsDefaultInstance();
  MetricsResponse::default_instance_->InitAsDefaultInstance();
  BadMethodRequest::default_instance_->InitAsDefaultInstance();
  BadMethodResponse::default_instance_->InitAsDefaultInstance();
  ProfileRequest::default_instance_->InitAsDefaultInstance();
  ProfileResponse::default_instance_->InitAsDefaultInstance();
  HotspotsRequest::default_instance_->InitAsDefaultInstance();
  HotspotsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2fbuiltin_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2fbuiltin_5fservice_2eproto {
  StaticDescriptorInitializer_brpc_2fbuiltin_5fservice_2eproto() {
    protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();
  }
} static_descriptor_initializer_brpc_2fbuiltin_5fservice_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IndexRequest::IndexRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IndexRequest::InitAsDefaultInstance() {
}

IndexRequest::IndexRequest(const IndexRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndexRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexRequest::~IndexRequest() {
  SharedDtor();
}

void IndexRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexRequest_descriptor_;
}

const IndexRequest& IndexRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

IndexRequest* IndexRequest::default_instance_ = NULL;

IndexRequest* IndexRequest::New() const {
  return new IndexRequest;
}

void IndexRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IndexRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IndexRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndexRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexRequest::MergeFrom(const IndexRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexRequest::CopyFrom(const IndexRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRequest::IsInitialized() const {
  
  return true;
}

void IndexRequest::Swap(IndexRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexRequest_descriptor_;
  metadata.reflection = IndexRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IndexResponse::IndexResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IndexResponse::InitAsDefaultInstance() {
}

IndexResponse::IndexResponse(const IndexResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndexResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexResponse::~IndexResponse() {
  SharedDtor();
}

void IndexResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexResponse_descriptor_;
}

const IndexResponse& IndexResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

IndexResponse* IndexResponse::default_instance_ = NULL;

IndexResponse* IndexResponse::New() const {
  return new IndexResponse;
}

void IndexResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IndexResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IndexResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndexResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexResponse::MergeFrom(const IndexResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexResponse::CopyFrom(const IndexResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexResponse::IsInitialized() const {
  
  return true;
}

void IndexResponse::Swap(IndexResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexResponse_descriptor_;
  metadata.reflection = IndexResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FlagsRequest::FlagsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlagsRequest::InitAsDefaultInstance() {
}

FlagsRequest::FlagsRequest(const FlagsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlagsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlagsRequest::~FlagsRequest() {
  SharedDtor();
}

void FlagsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlagsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlagsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlagsRequest_descriptor_;
}

const FlagsRequest& FlagsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

FlagsRequest* FlagsRequest::default_instance_ = NULL;

FlagsRequest* FlagsRequest::New() const {
  return new FlagsRequest;
}

void FlagsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlagsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FlagsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlagsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlagsRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlagsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlagsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlagsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlagsRequest::MergeFrom(const FlagsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlagsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlagsRequest::CopyFrom(const FlagsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlagsRequest::IsInitialized() const {
  
  return true;
}

void FlagsRequest::Swap(FlagsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlagsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlagsRequest_descriptor_;
  metadata.reflection = FlagsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FlagsResponse::FlagsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlagsResponse::InitAsDefaultInstance() {
}

FlagsResponse::FlagsResponse(const FlagsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlagsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlagsResponse::~FlagsResponse() {
  SharedDtor();
}

void FlagsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlagsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlagsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlagsResponse_descriptor_;
}

const FlagsResponse& FlagsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

FlagsResponse* FlagsResponse::default_instance_ = NULL;

FlagsResponse* FlagsResponse::New() const {
  return new FlagsResponse;
}

void FlagsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlagsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FlagsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlagsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlagsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlagsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlagsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlagsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlagsResponse::MergeFrom(const FlagsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlagsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlagsResponse::CopyFrom(const FlagsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlagsResponse::IsInitialized() const {
  
  return true;
}

void FlagsResponse::Swap(FlagsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlagsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlagsResponse_descriptor_;
  metadata.reflection = FlagsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VersionRequest::VersionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VersionRequest::InitAsDefaultInstance() {
}

VersionRequest::VersionRequest(const VersionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VersionRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionRequest::~VersionRequest() {
  SharedDtor();
}

void VersionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VersionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionRequest_descriptor_;
}

const VersionRequest& VersionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

VersionRequest* VersionRequest::default_instance_ = NULL;

VersionRequest* VersionRequest::New() const {
  return new VersionRequest;
}

void VersionRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VersionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VersionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VersionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VersionRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VersionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VersionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionRequest::MergeFrom(const VersionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VersionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionRequest::CopyFrom(const VersionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionRequest::IsInitialized() const {
  
  return true;
}

void VersionRequest::Swap(VersionRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VersionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionRequest_descriptor_;
  metadata.reflection = VersionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VersionResponse::VersionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VersionResponse::InitAsDefaultInstance() {
}

VersionResponse::VersionResponse(const VersionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VersionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionResponse::~VersionResponse() {
  SharedDtor();
}

void VersionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VersionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionResponse_descriptor_;
}

const VersionResponse& VersionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

VersionResponse* VersionResponse::default_instance_ = NULL;

VersionResponse* VersionResponse::New() const {
  return new VersionResponse;
}

void VersionResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VersionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VersionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VersionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VersionResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VersionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VersionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionResponse::MergeFrom(const VersionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VersionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionResponse::CopyFrom(const VersionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionResponse::IsInitialized() const {
  
  return true;
}

void VersionResponse::Swap(VersionResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VersionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionResponse_descriptor_;
  metadata.reflection = VersionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HealthRequest::HealthRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthRequest::InitAsDefaultInstance() {
}

HealthRequest::HealthRequest(const HealthRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthRequest::~HealthRequest() {
  SharedDtor();
}

void HealthRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HealthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthRequest_descriptor_;
}

const HealthRequest& HealthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

HealthRequest* HealthRequest::default_instance_ = NULL;

HealthRequest* HealthRequest::New() const {
  return new HealthRequest;
}

void HealthRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HealthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthRequest::MergeFrom(const HealthRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthRequest::CopyFrom(const HealthRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthRequest::IsInitialized() const {
  
  return true;
}

void HealthRequest::Swap(HealthRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthRequest_descriptor_;
  metadata.reflection = HealthRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HealthResponse::HealthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthResponse::InitAsDefaultInstance() {
}

HealthResponse::HealthResponse(const HealthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthResponse::~HealthResponse() {
  SharedDtor();
}

void HealthResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HealthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthResponse_descriptor_;
}

const HealthResponse& HealthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

HealthResponse* HealthResponse::default_instance_ = NULL;

HealthResponse* HealthResponse::New() const {
  return new HealthResponse;
}

void HealthResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HealthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthResponse::MergeFrom(const HealthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthResponse::CopyFrom(const HealthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthResponse::IsInitialized() const {
  
  return true;
}

void HealthResponse::Swap(HealthResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthResponse_descriptor_;
  metadata.reflection = HealthResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StatusRequest::StatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusRequest::InitAsDefaultInstance() {
}

StatusRequest::StatusRequest(const StatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusRequest::~StatusRequest() {
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusRequest_descriptor_;
}

const StatusRequest& StatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

StatusRequest* StatusRequest::default_instance_ = NULL;

StatusRequest* StatusRequest::New() const {
  return new StatusRequest;
}

void StatusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  
  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusRequest_descriptor_;
  metadata.reflection = StatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StatusResponse::StatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusResponse::InitAsDefaultInstance() {
}

StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusResponse::~StatusResponse() {
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_descriptor_;
}

const StatusResponse& StatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

StatusResponse* StatusResponse::default_instance_ = NULL;

StatusResponse* StatusResponse::New() const {
  return new StatusResponse;
}

void StatusResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  
  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_descriptor_;
  metadata.reflection = StatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProtobufsRequest::ProtobufsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtobufsRequest::InitAsDefaultInstance() {
}

ProtobufsRequest::ProtobufsRequest(const ProtobufsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtobufsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtobufsRequest::~ProtobufsRequest() {
  SharedDtor();
}

void ProtobufsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtobufsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtobufsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtobufsRequest_descriptor_;
}

const ProtobufsRequest& ProtobufsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

ProtobufsRequest* ProtobufsRequest::default_instance_ = NULL;

ProtobufsRequest* ProtobufsRequest::New() const {
  return new ProtobufsRequest;
}

void ProtobufsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtobufsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProtobufsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtobufsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtobufsRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtobufsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtobufsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtobufsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtobufsRequest::MergeFrom(const ProtobufsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtobufsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufsRequest::CopyFrom(const ProtobufsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufsRequest::IsInitialized() const {
  
  return true;
}

void ProtobufsRequest::Swap(ProtobufsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtobufsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtobufsRequest_descriptor_;
  metadata.reflection = ProtobufsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProtobufsResponse::ProtobufsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtobufsResponse::InitAsDefaultInstance() {
}

ProtobufsResponse::ProtobufsResponse(const ProtobufsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtobufsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtobufsResponse::~ProtobufsResponse() {
  SharedDtor();
}

void ProtobufsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtobufsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtobufsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtobufsResponse_descriptor_;
}

const ProtobufsResponse& ProtobufsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

ProtobufsResponse* ProtobufsResponse::default_instance_ = NULL;

ProtobufsResponse* ProtobufsResponse::New() const {
  return new ProtobufsResponse;
}

void ProtobufsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtobufsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProtobufsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtobufsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtobufsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtobufsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtobufsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtobufsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtobufsResponse::MergeFrom(const ProtobufsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtobufsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufsResponse::CopyFrom(const ProtobufsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufsResponse::IsInitialized() const {
  
  return true;
}

void ProtobufsResponse::Swap(ProtobufsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtobufsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtobufsResponse_descriptor_;
  metadata.reflection = ProtobufsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConnectionsRequest::ConnectionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectionsRequest::InitAsDefaultInstance() {
}

ConnectionsRequest::ConnectionsRequest(const ConnectionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectionsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionsRequest::~ConnectionsRequest() {
  SharedDtor();
}

void ConnectionsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionsRequest_descriptor_;
}

const ConnectionsRequest& ConnectionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

ConnectionsRequest* ConnectionsRequest::default_instance_ = NULL;

ConnectionsRequest* ConnectionsRequest::New() const {
  return new ConnectionsRequest;
}

void ConnectionsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ConnectionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectionsRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionsRequest::MergeFrom(const ConnectionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionsRequest::CopyFrom(const ConnectionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionsRequest::IsInitialized() const {
  
  return true;
}

void ConnectionsRequest::Swap(ConnectionsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionsRequest_descriptor_;
  metadata.reflection = ConnectionsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConnectionsResponse::ConnectionsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectionsResponse::InitAsDefaultInstance() {
}

ConnectionsResponse::ConnectionsResponse(const ConnectionsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectionsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionsResponse::~ConnectionsResponse() {
  SharedDtor();
}

void ConnectionsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionsResponse_descriptor_;
}

const ConnectionsResponse& ConnectionsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

ConnectionsResponse* ConnectionsResponse::default_instance_ = NULL;

ConnectionsResponse* ConnectionsResponse::New() const {
  return new ConnectionsResponse;
}

void ConnectionsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ConnectionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectionsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectionsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionsResponse::MergeFrom(const ConnectionsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionsResponse::CopyFrom(const ConnectionsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionsResponse::IsInitialized() const {
  
  return true;
}

void ConnectionsResponse::Swap(ConnectionsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionsResponse_descriptor_;
  metadata.reflection = ConnectionsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ListRequest::ListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListRequest::InitAsDefaultInstance() {
}

ListRequest::ListRequest(const ListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRequest::~ListRequest() {
  SharedDtor();
}

void ListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRequest_descriptor_;
}

const ListRequest& ListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

ListRequest* ListRequest::default_instance_ = NULL;

ListRequest* ListRequest::New() const {
  return new ListRequest;
}

void ListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRequest::MergeFrom(const ListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRequest::CopyFrom(const ListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRequest::IsInitialized() const {
  
  return true;
}

void ListRequest::Swap(ListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRequest_descriptor_;
  metadata.reflection = ListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListResponse::kServiceFieldNumber;
#endif  // !_MSC_VER

ListResponse::ListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListResponse::InitAsDefaultInstance() {
}

ListResponse::ListResponse(const ListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListResponse::~ListResponse() {
  SharedDtor();
}

void ListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListResponse_descriptor_;
}

const ListResponse& ListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

ListResponse* ListResponse::default_instance_ = NULL;

ListResponse* ListResponse::New() const {
  return new ListResponse;
}

void ListResponse::Clear() {
  service_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.protobuf.ServiceDescriptorProto service = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_service()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_service;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .google.protobuf.ServiceDescriptorProto service = 1;
  for (int i = 0; i < this->service_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->service(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .google.protobuf.ServiceDescriptorProto service = 1;
  for (int i = 0; i < this->service_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->service(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .google.protobuf.ServiceDescriptorProto service = 1;
  total_size += 1 * this->service_size();
  for (int i = 0; i < this->service_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->service(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListResponse::MergeFrom(const ListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  service_.MergeFrom(from.service_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListResponse::CopyFrom(const ListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResponse::IsInitialized() const {
  
  for (int i = 0; i < service_size(); i++) {
    if (!this->service(i).IsInitialized()) return false;
  }
  return true;
}

void ListResponse::Swap(ListResponse* other) {
  if (other != this) {
    service_.Swap(&other->service_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListResponse_descriptor_;
  metadata.reflection = ListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VarsRequest::VarsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarsRequest::InitAsDefaultInstance() {
}

VarsRequest::VarsRequest(const VarsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarsRequest::~VarsRequest() {
  SharedDtor();
}

void VarsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VarsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarsRequest_descriptor_;
}

const VarsRequest& VarsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

VarsRequest* VarsRequest::default_instance_ = NULL;

VarsRequest* VarsRequest::New() const {
  return new VarsRequest;
}

void VarsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VarsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarsRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarsRequest::MergeFrom(const VarsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarsRequest::CopyFrom(const VarsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarsRequest::IsInitialized() const {
  
  return true;
}

void VarsRequest::Swap(VarsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarsRequest_descriptor_;
  metadata.reflection = VarsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VarsResponse::VarsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarsResponse::InitAsDefaultInstance() {
}

VarsResponse::VarsResponse(const VarsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarsResponse::~VarsResponse() {
  SharedDtor();
}

void VarsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VarsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarsResponse_descriptor_;
}

const VarsResponse& VarsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

VarsResponse* VarsResponse::default_instance_ = NULL;

VarsResponse* VarsResponse::New() const {
  return new VarsResponse;
}

void VarsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VarsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarsResponse::MergeFrom(const VarsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarsResponse::CopyFrom(const VarsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarsResponse::IsInitialized() const {
  
  return true;
}

void VarsResponse::Swap(VarsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarsResponse_descriptor_;
  metadata.reflection = VarsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BthreadsRequest::BthreadsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BthreadsRequest::InitAsDefaultInstance() {
}

BthreadsRequest::BthreadsRequest(const BthreadsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BthreadsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BthreadsRequest::~BthreadsRequest() {
  SharedDtor();
}

void BthreadsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BthreadsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BthreadsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BthreadsRequest_descriptor_;
}

const BthreadsRequest& BthreadsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

BthreadsRequest* BthreadsRequest::default_instance_ = NULL;

BthreadsRequest* BthreadsRequest::New() const {
  return new BthreadsRequest;
}

void BthreadsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BthreadsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BthreadsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BthreadsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BthreadsRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BthreadsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BthreadsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BthreadsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BthreadsRequest::MergeFrom(const BthreadsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BthreadsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BthreadsRequest::CopyFrom(const BthreadsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BthreadsRequest::IsInitialized() const {
  
  return true;
}

void BthreadsRequest::Swap(BthreadsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BthreadsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BthreadsRequest_descriptor_;
  metadata.reflection = BthreadsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BthreadsResponse::BthreadsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BthreadsResponse::InitAsDefaultInstance() {
}

BthreadsResponse::BthreadsResponse(const BthreadsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BthreadsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BthreadsResponse::~BthreadsResponse() {
  SharedDtor();
}

void BthreadsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BthreadsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BthreadsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BthreadsResponse_descriptor_;
}

const BthreadsResponse& BthreadsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

BthreadsResponse* BthreadsResponse::default_instance_ = NULL;

BthreadsResponse* BthreadsResponse::New() const {
  return new BthreadsResponse;
}

void BthreadsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BthreadsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BthreadsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BthreadsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BthreadsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BthreadsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BthreadsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BthreadsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BthreadsResponse::MergeFrom(const BthreadsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BthreadsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BthreadsResponse::CopyFrom(const BthreadsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BthreadsResponse::IsInitialized() const {
  
  return true;
}

void BthreadsResponse::Swap(BthreadsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BthreadsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BthreadsResponse_descriptor_;
  metadata.reflection = BthreadsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IdsRequest::IdsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IdsRequest::InitAsDefaultInstance() {
}

IdsRequest::IdsRequest(const IdsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IdsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdsRequest::~IdsRequest() {
  SharedDtor();
}

void IdsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IdsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdsRequest_descriptor_;
}

const IdsRequest& IdsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

IdsRequest* IdsRequest::default_instance_ = NULL;

IdsRequest* IdsRequest::New() const {
  return new IdsRequest;
}

void IdsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IdsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IdsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IdsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IdsRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IdsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IdsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IdsRequest::MergeFrom(const IdsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IdsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdsRequest::CopyFrom(const IdsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdsRequest::IsInitialized() const {
  
  return true;
}

void IdsRequest::Swap(IdsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IdsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdsRequest_descriptor_;
  metadata.reflection = IdsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IdsResponse::IdsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IdsResponse::InitAsDefaultInstance() {
}

IdsResponse::IdsResponse(const IdsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IdsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdsResponse::~IdsResponse() {
  SharedDtor();
}

void IdsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IdsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdsResponse_descriptor_;
}

const IdsResponse& IdsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

IdsResponse* IdsResponse::default_instance_ = NULL;

IdsResponse* IdsResponse::New() const {
  return new IdsResponse;
}

void IdsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IdsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IdsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IdsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IdsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IdsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IdsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IdsResponse::MergeFrom(const IdsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IdsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdsResponse::CopyFrom(const IdsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdsResponse::IsInitialized() const {
  
  return true;
}

void IdsResponse::Swap(IdsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IdsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdsResponse_descriptor_;
  metadata.reflection = IdsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SocketsRequest::SocketsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocketsRequest::InitAsDefaultInstance() {
}

SocketsRequest::SocketsRequest(const SocketsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocketsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketsRequest::~SocketsRequest() {
  SharedDtor();
}

void SocketsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SocketsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocketsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocketsRequest_descriptor_;
}

const SocketsRequest& SocketsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

SocketsRequest* SocketsRequest::default_instance_ = NULL;

SocketsRequest* SocketsRequest::New() const {
  return new SocketsRequest;
}

void SocketsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocketsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SocketsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocketsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocketsRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocketsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocketsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocketsRequest::MergeFrom(const SocketsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocketsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketsRequest::CopyFrom(const SocketsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketsRequest::IsInitialized() const {
  
  return true;
}

void SocketsRequest::Swap(SocketsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocketsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocketsRequest_descriptor_;
  metadata.reflection = SocketsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SocketsResponse::SocketsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocketsResponse::InitAsDefaultInstance() {
}

SocketsResponse::SocketsResponse(const SocketsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocketsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketsResponse::~SocketsResponse() {
  SharedDtor();
}

void SocketsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SocketsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocketsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocketsResponse_descriptor_;
}

const SocketsResponse& SocketsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

SocketsResponse* SocketsResponse::default_instance_ = NULL;

SocketsResponse* SocketsResponse::New() const {
  return new SocketsResponse;
}

void SocketsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocketsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SocketsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocketsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocketsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocketsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocketsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocketsResponse::MergeFrom(const SocketsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocketsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketsResponse::CopyFrom(const SocketsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketsResponse::IsInitialized() const {
  
  return true;
}

void SocketsResponse::Swap(SocketsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocketsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocketsResponse_descriptor_;
  metadata.reflection = SocketsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ThreadsRequest::ThreadsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThreadsRequest::InitAsDefaultInstance() {
}

ThreadsRequest::ThreadsRequest(const ThreadsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThreadsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThreadsRequest::~ThreadsRequest() {
  SharedDtor();
}

void ThreadsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThreadsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThreadsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThreadsRequest_descriptor_;
}

const ThreadsRequest& ThreadsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

ThreadsRequest* ThreadsRequest::default_instance_ = NULL;

ThreadsRequest* ThreadsRequest::New() const {
  return new ThreadsRequest;
}

void ThreadsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThreadsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ThreadsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThreadsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThreadsRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThreadsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThreadsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThreadsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThreadsRequest::MergeFrom(const ThreadsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThreadsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadsRequest::CopyFrom(const ThreadsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadsRequest::IsInitialized() const {
  
  return true;
}

void ThreadsRequest::Swap(ThreadsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThreadsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThreadsRequest_descriptor_;
  metadata.reflection = ThreadsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ThreadsResponse::ThreadsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThreadsResponse::InitAsDefaultInstance() {
}

ThreadsResponse::ThreadsResponse(const ThreadsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThreadsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThreadsResponse::~ThreadsResponse() {
  SharedDtor();
}

void ThreadsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThreadsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThreadsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThreadsResponse_descriptor_;
}

const ThreadsResponse& ThreadsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

ThreadsResponse* ThreadsResponse::default_instance_ = NULL;

ThreadsResponse* ThreadsResponse::New() const {
  return new ThreadsResponse;
}

void ThreadsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThreadsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ThreadsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThreadsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThreadsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThreadsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThreadsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThreadsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThreadsResponse::MergeFrom(const ThreadsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThreadsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadsResponse::CopyFrom(const ThreadsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadsResponse::IsInitialized() const {
  
  return true;
}

void ThreadsResponse::Swap(ThreadsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThreadsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThreadsResponse_descriptor_;
  metadata.reflection = ThreadsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DirRequest::DirRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirRequest::InitAsDefaultInstance() {
}

DirRequest::DirRequest(const DirRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirRequest::~DirRequest() {
  SharedDtor();
}

void DirRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DirRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirRequest_descriptor_;
}

const DirRequest& DirRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

DirRequest* DirRequest::default_instance_ = NULL;

DirRequest* DirRequest::New() const {
  return new DirRequest;
}

void DirRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DirRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirRequest::MergeFrom(const DirRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirRequest::CopyFrom(const DirRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirRequest::IsInitialized() const {
  
  return true;
}

void DirRequest::Swap(DirRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirRequest_descriptor_;
  metadata.reflection = DirRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DirResponse::DirResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirResponse::InitAsDefaultInstance() {
}

DirResponse::DirResponse(const DirResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirResponse::~DirResponse() {
  SharedDtor();
}

void DirResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DirResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirResponse_descriptor_;
}

const DirResponse& DirResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

DirResponse* DirResponse::default_instance_ = NULL;

DirResponse* DirResponse::New() const {
  return new DirResponse;
}

void DirResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DirResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirResponse::MergeFrom(const DirResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirResponse::CopyFrom(const DirResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirResponse::IsInitialized() const {
  
  return true;
}

void DirResponse::Swap(DirResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirResponse_descriptor_;
  metadata.reflection = DirResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VLogRequest::VLogRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VLogRequest::InitAsDefaultInstance() {
}

VLogRequest::VLogRequest(const VLogRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VLogRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VLogRequest::~VLogRequest() {
  SharedDtor();
}

void VLogRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VLogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VLogRequest_descriptor_;
}

const VLogRequest& VLogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

VLogRequest* VLogRequest::default_instance_ = NULL;

VLogRequest* VLogRequest::New() const {
  return new VLogRequest;
}

void VLogRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VLogRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VLogRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VLogRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VLogRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VLogRequest::MergeFrom(const VLogRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VLogRequest::CopyFrom(const VLogRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VLogRequest::IsInitialized() const {
  
  return true;
}

void VLogRequest::Swap(VLogRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VLogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VLogRequest_descriptor_;
  metadata.reflection = VLogRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VLogResponse::VLogResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VLogResponse::InitAsDefaultInstance() {
}

VLogResponse::VLogResponse(const VLogResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VLogResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VLogResponse::~VLogResponse() {
  SharedDtor();
}

void VLogResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VLogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VLogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VLogResponse_descriptor_;
}

const VLogResponse& VLogResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

VLogResponse* VLogResponse::default_instance_ = NULL;

VLogResponse* VLogResponse::New() const {
  return new VLogResponse;
}

void VLogResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VLogResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VLogResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VLogResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VLogResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VLogResponse::MergeFrom(const VLogResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VLogResponse::CopyFrom(const VLogResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VLogResponse::IsInitialized() const {
  
  return true;
}

void VLogResponse::Swap(VLogResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VLogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VLogResponse_descriptor_;
  metadata.reflection = VLogResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MetricsRequest::MetricsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetricsRequest::InitAsDefaultInstance() {
}

MetricsRequest::MetricsRequest(const MetricsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetricsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetricsRequest::~MetricsRequest() {
  SharedDtor();
}

void MetricsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetricsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricsRequest_descriptor_;
}

const MetricsRequest& MetricsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

MetricsRequest* MetricsRequest::default_instance_ = NULL;

MetricsRequest* MetricsRequest::New() const {
  return new MetricsRequest;
}

void MetricsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetricsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MetricsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetricsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetricsRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetricsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetricsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetricsRequest::MergeFrom(const MetricsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetricsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsRequest::CopyFrom(const MetricsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsRequest::IsInitialized() const {
  
  return true;
}

void MetricsRequest::Swap(MetricsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetricsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricsRequest_descriptor_;
  metadata.reflection = MetricsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MetricsResponse::MetricsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetricsResponse::InitAsDefaultInstance() {
}

MetricsResponse::MetricsResponse(const MetricsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetricsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetricsResponse::~MetricsResponse() {
  SharedDtor();
}

void MetricsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetricsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricsResponse_descriptor_;
}

const MetricsResponse& MetricsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

MetricsResponse* MetricsResponse::default_instance_ = NULL;

MetricsResponse* MetricsResponse::New() const {
  return new MetricsResponse;
}

void MetricsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetricsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MetricsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetricsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetricsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetricsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetricsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetricsResponse::MergeFrom(const MetricsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetricsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsResponse::CopyFrom(const MetricsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsResponse::IsInitialized() const {
  
  return true;
}

void MetricsResponse::Swap(MetricsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetricsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricsResponse_descriptor_;
  metadata.reflection = MetricsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BadMethodRequest::kServiceNameFieldNumber;
#endif  // !_MSC_VER

BadMethodRequest::BadMethodRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BadMethodRequest::InitAsDefaultInstance() {
}

BadMethodRequest::BadMethodRequest(const BadMethodRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BadMethodRequest::SharedCtor() {
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BadMethodRequest::~BadMethodRequest() {
  SharedDtor();
}

void BadMethodRequest::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void BadMethodRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BadMethodRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BadMethodRequest_descriptor_;
}

const BadMethodRequest& BadMethodRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

BadMethodRequest* BadMethodRequest::default_instance_ = NULL;

BadMethodRequest* BadMethodRequest::New() const {
  return new BadMethodRequest;
}

void BadMethodRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::kEmptyString) {
        service_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BadMethodRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BadMethodRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BadMethodRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BadMethodRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BadMethodRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BadMethodRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BadMethodRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BadMethodRequest::MergeFrom(const BadMethodRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BadMethodRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BadMethodRequest::CopyFrom(const BadMethodRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BadMethodRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BadMethodRequest::Swap(BadMethodRequest* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BadMethodRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BadMethodRequest_descriptor_;
  metadata.reflection = BadMethodRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BadMethodResponse::BadMethodResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BadMethodResponse::InitAsDefaultInstance() {
}

BadMethodResponse::BadMethodResponse(const BadMethodResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BadMethodResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BadMethodResponse::~BadMethodResponse() {
  SharedDtor();
}

void BadMethodResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BadMethodResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BadMethodResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BadMethodResponse_descriptor_;
}

const BadMethodResponse& BadMethodResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

BadMethodResponse* BadMethodResponse::default_instance_ = NULL;

BadMethodResponse* BadMethodResponse::New() const {
  return new BadMethodResponse;
}

void BadMethodResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BadMethodResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BadMethodResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BadMethodResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BadMethodResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BadMethodResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BadMethodResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BadMethodResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BadMethodResponse::MergeFrom(const BadMethodResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BadMethodResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BadMethodResponse::CopyFrom(const BadMethodResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BadMethodResponse::IsInitialized() const {
  
  return true;
}

void BadMethodResponse::Swap(BadMethodResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BadMethodResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BadMethodResponse_descriptor_;
  metadata.reflection = BadMethodResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProfileRequest::ProfileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProfileRequest::InitAsDefaultInstance() {
}

ProfileRequest::ProfileRequest(const ProfileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProfileRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfileRequest::~ProfileRequest() {
  SharedDtor();
}

void ProfileRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProfileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfileRequest_descriptor_;
}

const ProfileRequest& ProfileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

ProfileRequest* ProfileRequest::default_instance_ = NULL;

ProfileRequest* ProfileRequest::New() const {
  return new ProfileRequest;
}

void ProfileRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProfileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProfileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProfileRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfileRequest::MergeFrom(const ProfileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileRequest::CopyFrom(const ProfileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileRequest::IsInitialized() const {
  
  return true;
}

void ProfileRequest::Swap(ProfileRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfileRequest_descriptor_;
  metadata.reflection = ProfileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProfileResponse::ProfileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProfileResponse::InitAsDefaultInstance() {
}

ProfileResponse::ProfileResponse(const ProfileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProfileResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfileResponse::~ProfileResponse() {
  SharedDtor();
}

void ProfileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProfileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfileResponse_descriptor_;
}

const ProfileResponse& ProfileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

ProfileResponse* ProfileResponse::default_instance_ = NULL;

ProfileResponse* ProfileResponse::New() const {
  return new ProfileResponse;
}

void ProfileResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProfileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProfileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProfileResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfileResponse::MergeFrom(const ProfileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileResponse::CopyFrom(const ProfileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileResponse::IsInitialized() const {
  
  return true;
}

void ProfileResponse::Swap(ProfileResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfileResponse_descriptor_;
  metadata.reflection = ProfileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HotspotsRequest::HotspotsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HotspotsRequest::InitAsDefaultInstance() {
}

HotspotsRequest::HotspotsRequest(const HotspotsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HotspotsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotspotsRequest::~HotspotsRequest() {
  SharedDtor();
}

void HotspotsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HotspotsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotspotsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotspotsRequest_descriptor_;
}

const HotspotsRequest& HotspotsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

HotspotsRequest* HotspotsRequest::default_instance_ = NULL;

HotspotsRequest* HotspotsRequest::New() const {
  return new HotspotsRequest;
}

void HotspotsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotspotsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HotspotsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HotspotsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HotspotsRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotspotsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotspotsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotspotsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotspotsRequest::MergeFrom(const HotspotsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotspotsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotspotsRequest::CopyFrom(const HotspotsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotspotsRequest::IsInitialized() const {
  
  return true;
}

void HotspotsRequest::Swap(HotspotsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotspotsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotspotsRequest_descriptor_;
  metadata.reflection = HotspotsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HotspotsResponse::HotspotsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HotspotsResponse::InitAsDefaultInstance() {
}

HotspotsResponse::HotspotsResponse(const HotspotsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HotspotsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotspotsResponse::~HotspotsResponse() {
  SharedDtor();
}

void HotspotsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HotspotsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotspotsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotspotsResponse_descriptor_;
}

const HotspotsResponse& HotspotsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

HotspotsResponse* HotspotsResponse::default_instance_ = NULL;

HotspotsResponse* HotspotsResponse::New() const {
  return new HotspotsResponse;
}

void HotspotsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotspotsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HotspotsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HotspotsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HotspotsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotspotsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotspotsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotspotsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotspotsResponse::MergeFrom(const HotspotsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotspotsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotspotsResponse::CopyFrom(const HotspotsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotspotsResponse::IsInitialized() const {
  
  return true;
}

void HotspotsResponse::Swap(HotspotsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotspotsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotspotsResponse_descriptor_;
  metadata.reflection = HotspotsResponse_reflection_;
  return metadata;
}


// ===================================================================

index::~index() {}

const ::google::protobuf::ServiceDescriptor* index::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return index_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* index::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return index_descriptor_;
}

void index::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::IndexRequest*,
                         ::brpc::IndexResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void index::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), index_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::IndexRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::IndexResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& index::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::IndexRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& index::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::IndexResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

index_Stub::index_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
index_Stub::index_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
index_Stub::~index_Stub() {
  if (owns_channel_) delete channel_;
}

void index_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::IndexRequest* request,
                              ::brpc::IndexResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

version::~version() {}

const ::google::protobuf::ServiceDescriptor* version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return version_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* version::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return version_descriptor_;
}

void version::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::VersionRequest*,
                         ::brpc::VersionResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void version::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), version_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::VersionRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::VersionResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& version::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::VersionRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& version::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::VersionResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

version_Stub::version_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
version_Stub::version_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
version_Stub::~version_Stub() {
  if (owns_channel_) delete channel_;
}

void version_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::VersionRequest* request,
                              ::brpc::VersionResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

health::~health() {}

const ::google::protobuf::ServiceDescriptor* health::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return health_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* health::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return health_descriptor_;
}

void health::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::HealthRequest*,
                         ::brpc::HealthResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void health::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), health_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::HealthRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::HealthResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& health::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::HealthRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& health::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::HealthResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

health_Stub::health_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
health_Stub::health_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
health_Stub::~health_Stub() {
  if (owns_channel_) delete channel_;
}

void health_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::HealthRequest* request,
                              ::brpc::HealthResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

status::~status() {}

const ::google::protobuf::ServiceDescriptor* status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return status_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* status::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return status_descriptor_;
}

void status::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::StatusRequest*,
                         ::brpc::StatusResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void status::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), status_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::StatusRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::StatusResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& status::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::StatusRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& status::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::StatusResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

status_Stub::status_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
status_Stub::status_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
status_Stub::~status_Stub() {
  if (owns_channel_) delete channel_;
}

void status_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::StatusRequest* request,
                              ::brpc::StatusResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

protobufs::~protobufs() {}

const ::google::protobuf::ServiceDescriptor* protobufs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return protobufs_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* protobufs::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return protobufs_descriptor_;
}

void protobufs::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::ProtobufsRequest*,
                         ::brpc::ProtobufsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void protobufs::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobufs_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::ProtobufsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::ProtobufsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& protobufs::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::ProtobufsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& protobufs::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::ProtobufsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

protobufs_Stub::protobufs_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
protobufs_Stub::protobufs_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
protobufs_Stub::~protobufs_Stub() {
  if (owns_channel_) delete channel_;
}

void protobufs_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::ProtobufsRequest* request,
                              ::brpc::ProtobufsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

connections::~connections() {}

const ::google::protobuf::ServiceDescriptor* connections::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connections_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* connections::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return connections_descriptor_;
}

void connections::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::ConnectionsRequest*,
                         ::brpc::ConnectionsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void connections::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), connections_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::ConnectionsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::ConnectionsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& connections::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::ConnectionsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& connections::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::ConnectionsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

connections_Stub::connections_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
connections_Stub::connections_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
connections_Stub::~connections_Stub() {
  if (owns_channel_) delete channel_;
}

void connections_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::ConnectionsRequest* request,
                              ::brpc::ConnectionsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

list::~list() {}

const ::google::protobuf::ServiceDescriptor* list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return list_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* list::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return list_descriptor_;
}

void list::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::ListRequest*,
                         ::brpc::ListResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void list::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), list_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::ListRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::ListResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& list::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::ListRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& list::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::ListResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

list_Stub::list_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
list_Stub::list_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
list_Stub::~list_Stub() {
  if (owns_channel_) delete channel_;
}

void list_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::ListRequest* request,
                              ::brpc::ListResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

threads::~threads() {}

const ::google::protobuf::ServiceDescriptor* threads::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return threads_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* threads::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return threads_descriptor_;
}

void threads::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::ThreadsRequest*,
                         ::brpc::ThreadsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void threads::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), threads_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::ThreadsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::ThreadsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& threads::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::ThreadsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& threads::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::ThreadsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

threads_Stub::threads_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
threads_Stub::threads_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
threads_Stub::~threads_Stub() {
  if (owns_channel_) delete channel_;
}

void threads_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::ThreadsRequest* request,
                              ::brpc::ThreadsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

vlog::~vlog() {}

const ::google::protobuf::ServiceDescriptor* vlog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vlog_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* vlog::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return vlog_descriptor_;
}

void vlog::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::VLogRequest*,
                         ::brpc::VLogResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void vlog::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), vlog_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::VLogRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::VLogResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& vlog::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::VLogRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& vlog::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::VLogResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

vlog_Stub::vlog_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
vlog_Stub::vlog_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
vlog_Stub::~vlog_Stub() {
  if (owns_channel_) delete channel_;
}

void vlog_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::VLogRequest* request,
                              ::brpc::VLogResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

bthreads::~bthreads() {}

const ::google::protobuf::ServiceDescriptor* bthreads::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bthreads_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* bthreads::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return bthreads_descriptor_;
}

void bthreads::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::BthreadsRequest*,
                         ::brpc::BthreadsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void bthreads::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), bthreads_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::BthreadsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::BthreadsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& bthreads::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::BthreadsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& bthreads::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::BthreadsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

bthreads_Stub::bthreads_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
bthreads_Stub::bthreads_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
bthreads_Stub::~bthreads_Stub() {
  if (owns_channel_) delete channel_;
}

void bthreads_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::BthreadsRequest* request,
                              ::brpc::BthreadsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

ids::~ids() {}

const ::google::protobuf::ServiceDescriptor* ids::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ids_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ids::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ids_descriptor_;
}

void ids::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::IdsRequest*,
                         ::brpc::IdsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void ids::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ids_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::IdsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::IdsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ids::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::IdsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ids::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::IdsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ids_Stub::ids_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ids_Stub::ids_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ids_Stub::~ids_Stub() {
  if (owns_channel_) delete channel_;
}

void ids_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::IdsRequest* request,
                              ::brpc::IdsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

sockets::~sockets() {}

const ::google::protobuf::ServiceDescriptor* sockets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sockets_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* sockets::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return sockets_descriptor_;
}

void sockets::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::SocketsRequest*,
                         ::brpc::SocketsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void sockets::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), sockets_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::SocketsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::SocketsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& sockets::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::SocketsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& sockets::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::SocketsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

sockets_Stub::sockets_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
sockets_Stub::sockets_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
sockets_Stub::~sockets_Stub() {
  if (owns_channel_) delete channel_;
}

void sockets_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::SocketsRequest* request,
                              ::brpc::SocketsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

brpc_metrics::~brpc_metrics() {}

const ::google::protobuf::ServiceDescriptor* brpc_metrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return brpc_metrics_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* brpc_metrics::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return brpc_metrics_descriptor_;
}

void brpc_metrics::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::MetricsRequest*,
                         ::brpc::MetricsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void brpc_metrics::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), brpc_metrics_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::MetricsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::MetricsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& brpc_metrics::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::MetricsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& brpc_metrics::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::MetricsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

brpc_metrics_Stub::brpc_metrics_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
brpc_metrics_Stub::brpc_metrics_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
brpc_metrics_Stub::~brpc_metrics_Stub() {
  if (owns_channel_) delete channel_;
}

void brpc_metrics_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::MetricsRequest* request,
                              ::brpc::MetricsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

badmethod::~badmethod() {}

const ::google::protobuf::ServiceDescriptor* badmethod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return badmethod_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* badmethod::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return badmethod_descriptor_;
}

void badmethod::no_method(::google::protobuf::RpcController* controller,
                         const ::brpc::BadMethodRequest*,
                         ::brpc::BadMethodResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method no_method() not implemented.");
  done->Run();
}

void badmethod::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), badmethod_descriptor_);
  switch(method->index()) {
    case 0:
      no_method(controller,
             ::google::protobuf::down_cast<const ::brpc::BadMethodRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::BadMethodResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& badmethod::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::BadMethodRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& badmethod::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::BadMethodResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

badmethod_Stub::badmethod_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
badmethod_Stub::badmethod_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
badmethod_Stub::~badmethod_Stub() {
  if (owns_channel_) delete channel_;
}

void badmethod_Stub::no_method(::google::protobuf::RpcController* controller,
                              const ::brpc::BadMethodRequest* request,
                              ::brpc::BadMethodResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

pprof::~pprof() {}

const ::google::protobuf::ServiceDescriptor* pprof::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pprof_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* pprof::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return pprof_descriptor_;
}

void pprof::profile(::google::protobuf::RpcController* controller,
                         const ::brpc::ProfileRequest*,
                         ::brpc::ProfileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method profile() not implemented.");
  done->Run();
}

void pprof::contention(::google::protobuf::RpcController* controller,
                         const ::brpc::ProfileRequest*,
                         ::brpc::ProfileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method contention() not implemented.");
  done->Run();
}

void pprof::heap(::google::protobuf::RpcController* controller,
                         const ::brpc::ProfileRequest*,
                         ::brpc::ProfileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method heap() not implemented.");
  done->Run();
}

void pprof::symbol(::google::protobuf::RpcController* controller,
                         const ::brpc::ProfileRequest*,
                         ::brpc::ProfileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method symbol() not implemented.");
  done->Run();
}

void pprof::cmdline(::google::protobuf::RpcController* controller,
                         const ::brpc::ProfileRequest*,
                         ::brpc::ProfileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method cmdline() not implemented.");
  done->Run();
}

void pprof::growth(::google::protobuf::RpcController* controller,
                         const ::brpc::ProfileRequest*,
                         ::brpc::ProfileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method growth() not implemented.");
  done->Run();
}

void pprof::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), pprof_descriptor_);
  switch(method->index()) {
    case 0:
      profile(controller,
             ::google::protobuf::down_cast<const ::brpc::ProfileRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::ProfileResponse*>(response),
             done);
      break;
    case 1:
      contention(controller,
             ::google::protobuf::down_cast<const ::brpc::ProfileRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::ProfileResponse*>(response),
             done);
      break;
    case 2:
      heap(controller,
             ::google::protobuf::down_cast<const ::brpc::ProfileRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::ProfileResponse*>(response),
             done);
      break;
    case 3:
      symbol(controller,
             ::google::protobuf::down_cast<const ::brpc::ProfileRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::ProfileResponse*>(response),
             done);
      break;
    case 4:
      cmdline(controller,
             ::google::protobuf::down_cast<const ::brpc::ProfileRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::ProfileResponse*>(response),
             done);
      break;
    case 5:
      growth(controller,
             ::google::protobuf::down_cast<const ::brpc::ProfileRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::ProfileResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& pprof::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::ProfileRequest::default_instance();
    case 1:
      return ::brpc::ProfileRequest::default_instance();
    case 2:
      return ::brpc::ProfileRequest::default_instance();
    case 3:
      return ::brpc::ProfileRequest::default_instance();
    case 4:
      return ::brpc::ProfileRequest::default_instance();
    case 5:
      return ::brpc::ProfileRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& pprof::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::ProfileResponse::default_instance();
    case 1:
      return ::brpc::ProfileResponse::default_instance();
    case 2:
      return ::brpc::ProfileResponse::default_instance();
    case 3:
      return ::brpc::ProfileResponse::default_instance();
    case 4:
      return ::brpc::ProfileResponse::default_instance();
    case 5:
      return ::brpc::ProfileResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

pprof_Stub::pprof_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
pprof_Stub::pprof_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
pprof_Stub::~pprof_Stub() {
  if (owns_channel_) delete channel_;
}

void pprof_Stub::profile(::google::protobuf::RpcController* controller,
                              const ::brpc::ProfileRequest* request,
                              ::brpc::ProfileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void pprof_Stub::contention(::google::protobuf::RpcController* controller,
                              const ::brpc::ProfileRequest* request,
                              ::brpc::ProfileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void pprof_Stub::heap(::google::protobuf::RpcController* controller,
                              const ::brpc::ProfileRequest* request,
                              ::brpc::ProfileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void pprof_Stub::symbol(::google::protobuf::RpcController* controller,
                              const ::brpc::ProfileRequest* request,
                              ::brpc::ProfileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void pprof_Stub::cmdline(::google::protobuf::RpcController* controller,
                              const ::brpc::ProfileRequest* request,
                              ::brpc::ProfileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void pprof_Stub::growth(::google::protobuf::RpcController* controller,
                              const ::brpc::ProfileRequest* request,
                              ::brpc::ProfileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
// ===================================================================

hotspots::~hotspots() {}

const ::google::protobuf::ServiceDescriptor* hotspots::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hotspots_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* hotspots::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return hotspots_descriptor_;
}

void hotspots::cpu(::google::protobuf::RpcController* controller,
                         const ::brpc::HotspotsRequest*,
                         ::brpc::HotspotsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method cpu() not implemented.");
  done->Run();
}

void hotspots::cpu_non_responsive(::google::protobuf::RpcController* controller,
                         const ::brpc::HotspotsRequest*,
                         ::brpc::HotspotsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method cpu_non_responsive() not implemented.");
  done->Run();
}

void hotspots::heap(::google::protobuf::RpcController* controller,
                         const ::brpc::HotspotsRequest*,
                         ::brpc::HotspotsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method heap() not implemented.");
  done->Run();
}

void hotspots::heap_non_responsive(::google::protobuf::RpcController* controller,
                         const ::brpc::HotspotsRequest*,
                         ::brpc::HotspotsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method heap_non_responsive() not implemented.");
  done->Run();
}

void hotspots::growth(::google::protobuf::RpcController* controller,
                         const ::brpc::HotspotsRequest*,
                         ::brpc::HotspotsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method growth() not implemented.");
  done->Run();
}

void hotspots::growth_non_responsive(::google::protobuf::RpcController* controller,
                         const ::brpc::HotspotsRequest*,
                         ::brpc::HotspotsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method growth_non_responsive() not implemented.");
  done->Run();
}

void hotspots::contention(::google::protobuf::RpcController* controller,
                         const ::brpc::HotspotsRequest*,
                         ::brpc::HotspotsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method contention() not implemented.");
  done->Run();
}

void hotspots::contention_non_responsive(::google::protobuf::RpcController* controller,
                         const ::brpc::HotspotsRequest*,
                         ::brpc::HotspotsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method contention_non_responsive() not implemented.");
  done->Run();
}

void hotspots::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), hotspots_descriptor_);
  switch(method->index()) {
    case 0:
      cpu(controller,
             ::google::protobuf::down_cast<const ::brpc::HotspotsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::HotspotsResponse*>(response),
             done);
      break;
    case 1:
      cpu_non_responsive(controller,
             ::google::protobuf::down_cast<const ::brpc::HotspotsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::HotspotsResponse*>(response),
             done);
      break;
    case 2:
      heap(controller,
             ::google::protobuf::down_cast<const ::brpc::HotspotsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::HotspotsResponse*>(response),
             done);
      break;
    case 3:
      heap_non_responsive(controller,
             ::google::protobuf::down_cast<const ::brpc::HotspotsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::HotspotsResponse*>(response),
             done);
      break;
    case 4:
      growth(controller,
             ::google::protobuf::down_cast<const ::brpc::HotspotsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::HotspotsResponse*>(response),
             done);
      break;
    case 5:
      growth_non_responsive(controller,
             ::google::protobuf::down_cast<const ::brpc::HotspotsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::HotspotsResponse*>(response),
             done);
      break;
    case 6:
      contention(controller,
             ::google::protobuf::down_cast<const ::brpc::HotspotsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::HotspotsResponse*>(response),
             done);
      break;
    case 7:
      contention_non_responsive(controller,
             ::google::protobuf::down_cast<const ::brpc::HotspotsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::HotspotsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& hotspots::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::HotspotsRequest::default_instance();
    case 1:
      return ::brpc::HotspotsRequest::default_instance();
    case 2:
      return ::brpc::HotspotsRequest::default_instance();
    case 3:
      return ::brpc::HotspotsRequest::default_instance();
    case 4:
      return ::brpc::HotspotsRequest::default_instance();
    case 5:
      return ::brpc::HotspotsRequest::default_instance();
    case 6:
      return ::brpc::HotspotsRequest::default_instance();
    case 7:
      return ::brpc::HotspotsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& hotspots::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::HotspotsResponse::default_instance();
    case 1:
      return ::brpc::HotspotsResponse::default_instance();
    case 2:
      return ::brpc::HotspotsResponse::default_instance();
    case 3:
      return ::brpc::HotspotsResponse::default_instance();
    case 4:
      return ::brpc::HotspotsResponse::default_instance();
    case 5:
      return ::brpc::HotspotsResponse::default_instance();
    case 6:
      return ::brpc::HotspotsResponse::default_instance();
    case 7:
      return ::brpc::HotspotsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

hotspots_Stub::hotspots_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
hotspots_Stub::hotspots_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
hotspots_Stub::~hotspots_Stub() {
  if (owns_channel_) delete channel_;
}

void hotspots_Stub::cpu(::google::protobuf::RpcController* controller,
                              const ::brpc::HotspotsRequest* request,
                              ::brpc::HotspotsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void hotspots_Stub::cpu_non_responsive(::google::protobuf::RpcController* controller,
                              const ::brpc::HotspotsRequest* request,
                              ::brpc::HotspotsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void hotspots_Stub::heap(::google::protobuf::RpcController* controller,
                              const ::brpc::HotspotsRequest* request,
                              ::brpc::HotspotsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void hotspots_Stub::heap_non_responsive(::google::protobuf::RpcController* controller,
                              const ::brpc::HotspotsRequest* request,
                              ::brpc::HotspotsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void hotspots_Stub::growth(::google::protobuf::RpcController* controller,
                              const ::brpc::HotspotsRequest* request,
                              ::brpc::HotspotsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void hotspots_Stub::growth_non_responsive(::google::protobuf::RpcController* controller,
                              const ::brpc::HotspotsRequest* request,
                              ::brpc::HotspotsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void hotspots_Stub::contention(::google::protobuf::RpcController* controller,
                              const ::brpc::HotspotsRequest* request,
                              ::brpc::HotspotsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void hotspots_Stub::contention_non_responsive(::google::protobuf::RpcController* controller,
                              const ::brpc::HotspotsRequest* request,
                              ::brpc::HotspotsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
// ===================================================================

flags::~flags() {}

const ::google::protobuf::ServiceDescriptor* flags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flags_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* flags::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return flags_descriptor_;
}

void flags::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::FlagsRequest*,
                         ::brpc::FlagsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void flags::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), flags_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::FlagsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::FlagsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& flags::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::FlagsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& flags::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::FlagsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

flags_Stub::flags_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
flags_Stub::flags_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
flags_Stub::~flags_Stub() {
  if (owns_channel_) delete channel_;
}

void flags_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::FlagsRequest* request,
                              ::brpc::FlagsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

vars::~vars() {}

const ::google::protobuf::ServiceDescriptor* vars::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vars_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* vars::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return vars_descriptor_;
}

void vars::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::VarsRequest*,
                         ::brpc::VarsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void vars::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), vars_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::VarsRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::VarsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& vars::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::VarsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& vars::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::VarsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

vars_Stub::vars_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
vars_Stub::vars_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
vars_Stub::~vars_Stub() {
  if (owns_channel_) delete channel_;
}

void vars_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::VarsRequest* request,
                              ::brpc::VarsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

dir::~dir() {}

const ::google::protobuf::ServiceDescriptor* dir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dir_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* dir::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return dir_descriptor_;
}

void dir::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::DirRequest*,
                         ::brpc::DirResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void dir::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), dir_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::DirRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::DirResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& dir::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::DirRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& dir::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::DirResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

dir_Stub::dir_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
dir_Stub::dir_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
dir_Stub::~dir_Stub() {
  if (owns_channel_) delete channel_;
}

void dir_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::DirRequest* request,
                              ::brpc::DirResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

// @@protoc_insertion_point(global_scope)
