// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brpc/policy/baidu_rpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace brpc {
namespace policy {

namespace {

const ::google::protobuf::Descriptor* RpcMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcRequestMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcRequestMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcResponseMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcResponseMeta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto() {
  protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brpc/policy/baidu_rpc_meta.proto");
  GOOGLE_CHECK(file != NULL);
  RpcMeta_descriptor_ = file->message_type(0);
  static const int RpcMeta_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, compress_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, correlation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, attachment_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, chunk_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, authentication_data_),
  };
  RpcMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcMeta_descriptor_,
      RpcMeta::default_instance_,
      RpcMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcMeta));
  RpcRequestMeta_descriptor_ = file->message_type(1);
  static const int RpcRequestMeta_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, parent_span_id_),
  };
  RpcRequestMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcRequestMeta_descriptor_,
      RpcRequestMeta::default_instance_,
      RpcRequestMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcRequestMeta));
  RpcResponseMeta_descriptor_ = file->message_type(2);
  static const int RpcResponseMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, error_text_),
  };
  RpcResponseMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcResponseMeta_descriptor_,
      RpcResponseMeta::default_instance_,
      RpcResponseMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcResponseMeta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcMeta_descriptor_, &RpcMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcRequestMeta_descriptor_, &RpcRequestMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcResponseMeta_descriptor_, &RpcResponseMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto() {
  delete RpcMeta::default_instance_;
  delete RpcMeta_reflection_;
  delete RpcRequestMeta::default_instance_;
  delete RpcRequestMeta_reflection_;
  delete RpcResponseMeta::default_instance_;
  delete RpcResponseMeta_reflection_;
}

void protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::brpc::protobuf_AddDesc_brpc_2foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n brpc/policy/baidu_rpc_meta.proto\022\013brpc"
    ".policy\032\022brpc/options.proto\"\361\001\n\007RpcMeta\022"
    ",\n\007request\030\001 \001(\0132\033.brpc.policy.RpcReques"
    "tMeta\022.\n\010response\030\002 \001(\0132\034.brpc.policy.Rp"
    "cResponseMeta\022\025\n\rcompress_type\030\003 \001(\005\022\026\n\016"
    "correlation_id\030\004 \001(\003\022\027\n\017attachment_size\030"
    "\005 \001(\005\022#\n\nchunk_info\030\006 \001(\0132\017.brpc.ChunkIn"
    "fo\022\033\n\023authentication_data\030\007 \001(\014\"\206\001\n\016RpcR"
    "equestMeta\022\024\n\014service_name\030\001 \002(\t\022\023\n\013meth"
    "od_name\030\002 \002(\t\022\016\n\006log_id\030\003 \001(\003\022\020\n\010trace_i"
    "d\030\004 \001(\003\022\017\n\007span_id\030\005 \001(\003\022\026\n\016parent_span_"
    "id\030\006 \001(\003\"9\n\017RpcResponseMeta\022\022\n\nerror_cod"
    "e\030\001 \001(\005\022\022\n\nerror_text\030\002 \001(\tB \n\017com.brpc."
    "policyB\rBaiduRpcProto", 541);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/policy/baidu_rpc_meta.proto", &protobuf_RegisterTypes);
  RpcMeta::default_instance_ = new RpcMeta();
  RpcRequestMeta::default_instance_ = new RpcRequestMeta();
  RpcResponseMeta::default_instance_ = new RpcResponseMeta();
  RpcMeta::default_instance_->InitAsDefaultInstance();
  RpcRequestMeta::default_instance_->InitAsDefaultInstance();
  RpcResponseMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto {
  StaticDescriptorInitializer_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto() {
    protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  }
} static_descriptor_initializer_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RpcMeta::kRequestFieldNumber;
const int RpcMeta::kResponseFieldNumber;
const int RpcMeta::kCompressTypeFieldNumber;
const int RpcMeta::kCorrelationIdFieldNumber;
const int RpcMeta::kAttachmentSizeFieldNumber;
const int RpcMeta::kChunkInfoFieldNumber;
const int RpcMeta::kAuthenticationDataFieldNumber;
#endif  // !_MSC_VER

RpcMeta::RpcMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcMeta::InitAsDefaultInstance() {
  request_ = const_cast< ::brpc::policy::RpcRequestMeta*>(&::brpc::policy::RpcRequestMeta::default_instance());
  response_ = const_cast< ::brpc::policy::RpcResponseMeta*>(&::brpc::policy::RpcResponseMeta::default_instance());
  chunk_info_ = const_cast< ::brpc::ChunkInfo*>(&::brpc::ChunkInfo::default_instance());
}

RpcMeta::RpcMeta(const RpcMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcMeta::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  compress_type_ = 0;
  correlation_id_ = GOOGLE_LONGLONG(0);
  attachment_size_ = 0;
  chunk_info_ = NULL;
  authentication_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcMeta::~RpcMeta() {
  SharedDtor();
}

void RpcMeta::SharedDtor() {
  if (authentication_data_ != &::google::protobuf::internal::kEmptyString) {
    delete authentication_data_;
  }
  if (this != default_instance_) {
    delete request_;
    delete response_;
    delete chunk_info_;
  }
}

void RpcMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMeta_descriptor_;
}

const RpcMeta& RpcMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();  return *default_instance_;
}

RpcMeta* RpcMeta::default_instance_ = NULL;

RpcMeta* RpcMeta::New() const {
  return new RpcMeta;
}

void RpcMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::brpc::policy::RpcRequestMeta::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::brpc::policy::RpcResponseMeta::Clear();
    }
    compress_type_ = 0;
    correlation_id_ = GOOGLE_LONGLONG(0);
    attachment_size_ = 0;
    if (has_chunk_info()) {
      if (chunk_info_ != NULL) chunk_info_->::brpc::ChunkInfo::Clear();
    }
    if (has_authentication_data()) {
      if (authentication_data_ != &::google::protobuf::internal::kEmptyString) {
        authentication_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .brpc.policy.RpcRequestMeta request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }
      
      // optional .brpc.policy.RpcResponseMeta response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compress_type;
        break;
      }
      
      // optional int32 compress_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compress_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compress_type_)));
          set_has_compress_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_correlation_id;
        break;
      }
      
      // optional int64 correlation_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_correlation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &correlation_id_)));
          set_has_correlation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attachment_size;
        break;
      }
      
      // optional int32 attachment_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attachment_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_size_)));
          set_has_attachment_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chunk_info;
        break;
      }
      
      // optional .brpc.ChunkInfo chunk_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chunk_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chunk_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_authentication_data;
        break;
      }
      
      // optional bytes authentication_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authentication_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_authentication_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .brpc.policy.RpcRequestMeta request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }
  
  // optional .brpc.policy.RpcResponseMeta response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }
  
  // optional int32 compress_type = 3;
  if (has_compress_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compress_type(), output);
  }
  
  // optional int64 correlation_id = 4;
  if (has_correlation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->correlation_id(), output);
  }
  
  // optional int32 attachment_size = 5;
  if (has_attachment_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attachment_size(), output);
  }
  
  // optional .brpc.ChunkInfo chunk_info = 6;
  if (has_chunk_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->chunk_info(), output);
  }
  
  // optional bytes authentication_data = 7;
  if (has_authentication_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->authentication_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .brpc.policy.RpcRequestMeta request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }
  
  // optional .brpc.policy.RpcResponseMeta response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }
  
  // optional int32 compress_type = 3;
  if (has_compress_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compress_type(), target);
  }
  
  // optional int64 correlation_id = 4;
  if (has_correlation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->correlation_id(), target);
  }
  
  // optional int32 attachment_size = 5;
  if (has_attachment_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attachment_size(), target);
  }
  
  // optional .brpc.ChunkInfo chunk_info = 6;
  if (has_chunk_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->chunk_info(), target);
  }
  
  // optional bytes authentication_data = 7;
  if (has_authentication_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->authentication_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcMeta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .brpc.policy.RpcRequestMeta request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }
    
    // optional .brpc.policy.RpcResponseMeta response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }
    
    // optional int32 compress_type = 3;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compress_type());
    }
    
    // optional int64 correlation_id = 4;
    if (has_correlation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->correlation_id());
    }
    
    // optional int32 attachment_size = 5;
    if (has_attachment_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_size());
    }
    
    // optional .brpc.ChunkInfo chunk_info = 6;
    if (has_chunk_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunk_info());
    }
    
    // optional bytes authentication_data = 7;
    if (has_authentication_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->authentication_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcMeta::MergeFrom(const RpcMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::brpc::policy::RpcRequestMeta::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::brpc::policy::RpcResponseMeta::MergeFrom(from.response());
    }
    if (from.has_compress_type()) {
      set_compress_type(from.compress_type());
    }
    if (from.has_correlation_id()) {
      set_correlation_id(from.correlation_id());
    }
    if (from.has_attachment_size()) {
      set_attachment_size(from.attachment_size());
    }
    if (from.has_chunk_info()) {
      mutable_chunk_info()->::brpc::ChunkInfo::MergeFrom(from.chunk_info());
    }
    if (from.has_authentication_data()) {
      set_authentication_data(from.authentication_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMeta::CopyFrom(const RpcMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta::IsInitialized() const {
  
  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  if (has_chunk_info()) {
    if (!this->chunk_info().IsInitialized()) return false;
  }
  return true;
}

void RpcMeta::Swap(RpcMeta* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(compress_type_, other->compress_type_);
    std::swap(correlation_id_, other->correlation_id_);
    std::swap(attachment_size_, other->attachment_size_);
    std::swap(chunk_info_, other->chunk_info_);
    std::swap(authentication_data_, other->authentication_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcMeta_descriptor_;
  metadata.reflection = RpcMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpcRequestMeta::kServiceNameFieldNumber;
const int RpcRequestMeta::kMethodNameFieldNumber;
const int RpcRequestMeta::kLogIdFieldNumber;
const int RpcRequestMeta::kTraceIdFieldNumber;
const int RpcRequestMeta::kSpanIdFieldNumber;
const int RpcRequestMeta::kParentSpanIdFieldNumber;
#endif  // !_MSC_VER

RpcRequestMeta::RpcRequestMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcRequestMeta::InitAsDefaultInstance() {
}

RpcRequestMeta::RpcRequestMeta(const RpcRequestMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcRequestMeta::SharedCtor() {
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_id_ = GOOGLE_LONGLONG(0);
  trace_id_ = GOOGLE_LONGLONG(0);
  span_id_ = GOOGLE_LONGLONG(0);
  parent_span_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcRequestMeta::~RpcRequestMeta() {
  SharedDtor();
}

void RpcRequestMeta::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (this != default_instance_) {
  }
}

void RpcRequestMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcRequestMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcRequestMeta_descriptor_;
}

const RpcRequestMeta& RpcRequestMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();  return *default_instance_;
}

RpcRequestMeta* RpcRequestMeta::default_instance_ = NULL;

RpcRequestMeta* RpcRequestMeta::New() const {
  return new RpcRequestMeta;
}

void RpcRequestMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::kEmptyString) {
        method_name_->clear();
      }
    }
    log_id_ = GOOGLE_LONGLONG(0);
    trace_id_ = GOOGLE_LONGLONG(0);
    span_id_ = GOOGLE_LONGLONG(0);
    parent_span_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcRequestMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_method_name;
        break;
      }
      
      // required string method_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_log_id;
        break;
      }
      
      // optional int64 log_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_trace_id;
        break;
      }
      
      // optional int64 trace_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trace_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trace_id_)));
          set_has_trace_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_span_id;
        break;
      }
      
      // optional int64 span_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &span_id_)));
          set_has_span_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_parent_span_id;
        break;
      }
      
      // optional int64 parent_span_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_span_id_)));
          set_has_parent_span_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcRequestMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_name(), output);
  }
  
  // required string method_name = 2;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->method_name(), output);
  }
  
  // optional int64 log_id = 3;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->log_id(), output);
  }
  
  // optional int64 trace_id = 4;
  if (has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->trace_id(), output);
  }
  
  // optional int64 span_id = 5;
  if (has_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->span_id(), output);
  }
  
  // optional int64 parent_span_id = 6;
  if (has_parent_span_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->parent_span_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcRequestMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }
  
  // required string method_name = 2;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }
  
  // optional int64 log_id = 3;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->log_id(), target);
  }
  
  // optional int64 trace_id = 4;
  if (has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->trace_id(), target);
  }
  
  // optional int64 span_id = 5;
  if (has_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->span_id(), target);
  }
  
  // optional int64 parent_span_id = 6;
  if (has_parent_span_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->parent_span_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcRequestMeta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // required string method_name = 2;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }
    
    // optional int64 log_id = 3;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->log_id());
    }
    
    // optional int64 trace_id = 4;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trace_id());
    }
    
    // optional int64 span_id = 5;
    if (has_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->span_id());
    }
    
    // optional int64 parent_span_id = 6;
    if (has_parent_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parent_span_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcRequestMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcRequestMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcRequestMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcRequestMeta::MergeFrom(const RpcRequestMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_trace_id()) {
      set_trace_id(from.trace_id());
    }
    if (from.has_span_id()) {
      set_span_id(from.span_id());
    }
    if (from.has_parent_span_id()) {
      set_parent_span_id(from.parent_span_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcRequestMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcRequestMeta::CopyFrom(const RpcRequestMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequestMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RpcRequestMeta::Swap(RpcRequestMeta* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(method_name_, other->method_name_);
    std::swap(log_id_, other->log_id_);
    std::swap(trace_id_, other->trace_id_);
    std::swap(span_id_, other->span_id_);
    std::swap(parent_span_id_, other->parent_span_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcRequestMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcRequestMeta_descriptor_;
  metadata.reflection = RpcRequestMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpcResponseMeta::kErrorCodeFieldNumber;
const int RpcResponseMeta::kErrorTextFieldNumber;
#endif  // !_MSC_VER

RpcResponseMeta::RpcResponseMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcResponseMeta::InitAsDefaultInstance() {
}

RpcResponseMeta::RpcResponseMeta(const RpcResponseMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcResponseMeta::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcResponseMeta::~RpcResponseMeta() {
  SharedDtor();
}

void RpcResponseMeta::SharedDtor() {
  if (error_text_ != &::google::protobuf::internal::kEmptyString) {
    delete error_text_;
  }
  if (this != default_instance_) {
  }
}

void RpcResponseMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcResponseMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcResponseMeta_descriptor_;
}

const RpcResponseMeta& RpcResponseMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();  return *default_instance_;
}

RpcResponseMeta* RpcResponseMeta::default_instance_ = NULL;

RpcResponseMeta* RpcResponseMeta::New() const {
  return new RpcResponseMeta;
}

void RpcResponseMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_error_text()) {
      if (error_text_ != &::google::protobuf::internal::kEmptyString) {
        error_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcResponseMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_text;
        break;
      }
      
      // optional string error_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_text().data(), this->error_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcResponseMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional string error_text = 2;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcResponseMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional string error_text = 2;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcResponseMeta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional string error_text = 2;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcResponseMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcResponseMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcResponseMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcResponseMeta::MergeFrom(const RpcResponseMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_text()) {
      set_error_text(from.error_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcResponseMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcResponseMeta::CopyFrom(const RpcResponseMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponseMeta::IsInitialized() const {
  
  return true;
}

void RpcResponseMeta::Swap(RpcResponseMeta* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(error_text_, other->error_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcResponseMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcResponseMeta_descriptor_;
  metadata.reflection = RpcResponseMeta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

// @@protoc_insertion_point(global_scope)
