// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/baidu_rpc_meta.proto

#ifndef PROTOBUF_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto__INCLUDED
#define PROTOBUF_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)

namespace brpc {
namespace policy {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
void protobuf_AssignDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
void protobuf_ShutdownFile_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();

class RpcMeta;
class RpcRequestMeta;
class RpcResponseMeta;

// ===================================================================

class RpcMeta : public ::google::protobuf::Message {
 public:
  RpcMeta();
  virtual ~RpcMeta();
  
  RpcMeta(const RpcMeta& from);
  
  inline RpcMeta& operator=(const RpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMeta& default_instance();
  
  void Swap(RpcMeta* other);
  
  // implements Message ----------------------------------------------
  
  RpcMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMeta& from);
  void MergeFrom(const RpcMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .brpc.policy.RpcRequestMeta request = 1;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 1;
  inline const ::brpc::policy::RpcRequestMeta& request() const;
  inline ::brpc::policy::RpcRequestMeta* mutable_request();
  inline ::brpc::policy::RpcRequestMeta* release_request();
  
  // optional .brpc.policy.RpcResponseMeta response = 2;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 2;
  inline const ::brpc::policy::RpcResponseMeta& response() const;
  inline ::brpc::policy::RpcResponseMeta* mutable_response();
  inline ::brpc::policy::RpcResponseMeta* release_response();
  
  // optional int32 compress_type = 3;
  inline bool has_compress_type() const;
  inline void clear_compress_type();
  static const int kCompressTypeFieldNumber = 3;
  inline ::google::protobuf::int32 compress_type() const;
  inline void set_compress_type(::google::protobuf::int32 value);
  
  // optional int64 correlation_id = 4;
  inline bool has_correlation_id() const;
  inline void clear_correlation_id();
  static const int kCorrelationIdFieldNumber = 4;
  inline ::google::protobuf::int64 correlation_id() const;
  inline void set_correlation_id(::google::protobuf::int64 value);
  
  // optional int32 attachment_size = 5;
  inline bool has_attachment_size() const;
  inline void clear_attachment_size();
  static const int kAttachmentSizeFieldNumber = 5;
  inline ::google::protobuf::int32 attachment_size() const;
  inline void set_attachment_size(::google::protobuf::int32 value);
  
  // optional .brpc.ChunkInfo chunk_info = 6;
  inline bool has_chunk_info() const;
  inline void clear_chunk_info();
  static const int kChunkInfoFieldNumber = 6;
  inline const ::brpc::ChunkInfo& chunk_info() const;
  inline ::brpc::ChunkInfo* mutable_chunk_info();
  inline ::brpc::ChunkInfo* release_chunk_info();
  
  // optional bytes authentication_data = 7;
  inline bool has_authentication_data() const;
  inline void clear_authentication_data();
  static const int kAuthenticationDataFieldNumber = 7;
  inline const ::std::string& authentication_data() const;
  inline void set_authentication_data(const ::std::string& value);
  inline void set_authentication_data(const char* value);
  inline void set_authentication_data(const void* value, size_t size);
  inline ::std::string* mutable_authentication_data();
  inline ::std::string* release_authentication_data();
  
  // @@protoc_insertion_point(class_scope:brpc.policy.RpcMeta)
 private:
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_compress_type();
  inline void clear_has_compress_type();
  inline void set_has_correlation_id();
  inline void clear_has_correlation_id();
  inline void set_has_attachment_size();
  inline void clear_has_attachment_size();
  inline void set_has_chunk_info();
  inline void clear_has_chunk_info();
  inline void set_has_authentication_data();
  inline void clear_has_authentication_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::brpc::policy::RpcRequestMeta* request_;
  ::brpc::policy::RpcResponseMeta* response_;
  ::google::protobuf::int64 correlation_id_;
  ::google::protobuf::int32 compress_type_;
  ::google::protobuf::int32 attachment_size_;
  ::brpc::ChunkInfo* chunk_info_;
  ::std::string* authentication_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  friend void protobuf_AssignDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  
  void InitAsDefaultInstance();
  static RpcMeta* default_instance_;
};
// -------------------------------------------------------------------

class RpcRequestMeta : public ::google::protobuf::Message {
 public:
  RpcRequestMeta();
  virtual ~RpcRequestMeta();
  
  RpcRequestMeta(const RpcRequestMeta& from);
  
  inline RpcRequestMeta& operator=(const RpcRequestMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequestMeta& default_instance();
  
  void Swap(RpcRequestMeta* other);
  
  // implements Message ----------------------------------------------
  
  RpcRequestMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcRequestMeta& from);
  void MergeFrom(const RpcRequestMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // required string method_name = 2;
  inline bool has_method_name() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  inline const ::std::string& method_name() const;
  inline void set_method_name(const ::std::string& value);
  inline void set_method_name(const char* value);
  inline void set_method_name(const char* value, size_t size);
  inline ::std::string* mutable_method_name();
  inline ::std::string* release_method_name();
  
  // optional int64 log_id = 3;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 3;
  inline ::google::protobuf::int64 log_id() const;
  inline void set_log_id(::google::protobuf::int64 value);
  
  // optional int64 trace_id = 4;
  inline bool has_trace_id() const;
  inline void clear_trace_id();
  static const int kTraceIdFieldNumber = 4;
  inline ::google::protobuf::int64 trace_id() const;
  inline void set_trace_id(::google::protobuf::int64 value);
  
  // optional int64 span_id = 5;
  inline bool has_span_id() const;
  inline void clear_span_id();
  static const int kSpanIdFieldNumber = 5;
  inline ::google::protobuf::int64 span_id() const;
  inline void set_span_id(::google::protobuf::int64 value);
  
  // optional int64 parent_span_id = 6;
  inline bool has_parent_span_id() const;
  inline void clear_parent_span_id();
  static const int kParentSpanIdFieldNumber = 6;
  inline ::google::protobuf::int64 parent_span_id() const;
  inline void set_parent_span_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:brpc.policy.RpcRequestMeta)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_method_name();
  inline void clear_has_method_name();
  inline void set_has_log_id();
  inline void clear_has_log_id();
  inline void set_has_trace_id();
  inline void clear_has_trace_id();
  inline void set_has_span_id();
  inline void clear_has_span_id();
  inline void set_has_parent_span_id();
  inline void clear_has_parent_span_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_name_;
  ::std::string* method_name_;
  ::google::protobuf::int64 log_id_;
  ::google::protobuf::int64 trace_id_;
  ::google::protobuf::int64 span_id_;
  ::google::protobuf::int64 parent_span_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  friend void protobuf_AssignDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  
  void InitAsDefaultInstance();
  static RpcRequestMeta* default_instance_;
};
// -------------------------------------------------------------------

class RpcResponseMeta : public ::google::protobuf::Message {
 public:
  RpcResponseMeta();
  virtual ~RpcResponseMeta();
  
  RpcResponseMeta(const RpcResponseMeta& from);
  
  inline RpcResponseMeta& operator=(const RpcResponseMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResponseMeta& default_instance();
  
  void Swap(RpcResponseMeta* other);
  
  // implements Message ----------------------------------------------
  
  RpcResponseMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcResponseMeta& from);
  void MergeFrom(const RpcResponseMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional string error_text = 2;
  inline bool has_error_text() const;
  inline void clear_error_text();
  static const int kErrorTextFieldNumber = 2;
  inline const ::std::string& error_text() const;
  inline void set_error_text(const ::std::string& value);
  inline void set_error_text(const char* value);
  inline void set_error_text(const char* value, size_t size);
  inline ::std::string* mutable_error_text();
  inline ::std::string* release_error_text();
  
  // @@protoc_insertion_point(class_scope:brpc.policy.RpcResponseMeta)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_error_text();
  inline void clear_has_error_text();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* error_text_;
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  friend void protobuf_AssignDesc_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto();
  
  void InitAsDefaultInstance();
  static RpcResponseMeta* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcMeta

// optional .brpc.policy.RpcRequestMeta request = 1;
inline bool RpcMeta::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMeta::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMeta::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMeta::clear_request() {
  if (request_ != NULL) request_->::brpc::policy::RpcRequestMeta::Clear();
  clear_has_request();
}
inline const ::brpc::policy::RpcRequestMeta& RpcMeta::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::brpc::policy::RpcRequestMeta* RpcMeta::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::brpc::policy::RpcRequestMeta;
  return request_;
}
inline ::brpc::policy::RpcRequestMeta* RpcMeta::release_request() {
  clear_has_request();
  ::brpc::policy::RpcRequestMeta* temp = request_;
  request_ = NULL;
  return temp;
}

// optional .brpc.policy.RpcResponseMeta response = 2;
inline bool RpcMeta::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMeta::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMeta::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMeta::clear_response() {
  if (response_ != NULL) response_->::brpc::policy::RpcResponseMeta::Clear();
  clear_has_response();
}
inline const ::brpc::policy::RpcResponseMeta& RpcMeta::response() const {
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::brpc::policy::RpcResponseMeta* RpcMeta::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::brpc::policy::RpcResponseMeta;
  return response_;
}
inline ::brpc::policy::RpcResponseMeta* RpcMeta::release_response() {
  clear_has_response();
  ::brpc::policy::RpcResponseMeta* temp = response_;
  response_ = NULL;
  return temp;
}

// optional int32 compress_type = 3;
inline bool RpcMeta::has_compress_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMeta::set_has_compress_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMeta::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMeta::clear_compress_type() {
  compress_type_ = 0;
  clear_has_compress_type();
}
inline ::google::protobuf::int32 RpcMeta::compress_type() const {
  return compress_type_;
}
inline void RpcMeta::set_compress_type(::google::protobuf::int32 value) {
  set_has_compress_type();
  compress_type_ = value;
}

// optional int64 correlation_id = 4;
inline bool RpcMeta::has_correlation_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMeta::set_has_correlation_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcMeta::clear_has_correlation_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcMeta::clear_correlation_id() {
  correlation_id_ = GOOGLE_LONGLONG(0);
  clear_has_correlation_id();
}
inline ::google::protobuf::int64 RpcMeta::correlation_id() const {
  return correlation_id_;
}
inline void RpcMeta::set_correlation_id(::google::protobuf::int64 value) {
  set_has_correlation_id();
  correlation_id_ = value;
}

// optional int32 attachment_size = 5;
inline bool RpcMeta::has_attachment_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcMeta::set_has_attachment_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcMeta::clear_has_attachment_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcMeta::clear_attachment_size() {
  attachment_size_ = 0;
  clear_has_attachment_size();
}
inline ::google::protobuf::int32 RpcMeta::attachment_size() const {
  return attachment_size_;
}
inline void RpcMeta::set_attachment_size(::google::protobuf::int32 value) {
  set_has_attachment_size();
  attachment_size_ = value;
}

// optional .brpc.ChunkInfo chunk_info = 6;
inline bool RpcMeta::has_chunk_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpcMeta::set_has_chunk_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpcMeta::clear_has_chunk_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpcMeta::clear_chunk_info() {
  if (chunk_info_ != NULL) chunk_info_->::brpc::ChunkInfo::Clear();
  clear_has_chunk_info();
}
inline const ::brpc::ChunkInfo& RpcMeta::chunk_info() const {
  return chunk_info_ != NULL ? *chunk_info_ : *default_instance_->chunk_info_;
}
inline ::brpc::ChunkInfo* RpcMeta::mutable_chunk_info() {
  set_has_chunk_info();
  if (chunk_info_ == NULL) chunk_info_ = new ::brpc::ChunkInfo;
  return chunk_info_;
}
inline ::brpc::ChunkInfo* RpcMeta::release_chunk_info() {
  clear_has_chunk_info();
  ::brpc::ChunkInfo* temp = chunk_info_;
  chunk_info_ = NULL;
  return temp;
}

// optional bytes authentication_data = 7;
inline bool RpcMeta::has_authentication_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RpcMeta::set_has_authentication_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RpcMeta::clear_has_authentication_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RpcMeta::clear_authentication_data() {
  if (authentication_data_ != &::google::protobuf::internal::kEmptyString) {
    authentication_data_->clear();
  }
  clear_has_authentication_data();
}
inline const ::std::string& RpcMeta::authentication_data() const {
  return *authentication_data_;
}
inline void RpcMeta::set_authentication_data(const ::std::string& value) {
  set_has_authentication_data();
  if (authentication_data_ == &::google::protobuf::internal::kEmptyString) {
    authentication_data_ = new ::std::string;
  }
  authentication_data_->assign(value);
}
inline void RpcMeta::set_authentication_data(const char* value) {
  set_has_authentication_data();
  if (authentication_data_ == &::google::protobuf::internal::kEmptyString) {
    authentication_data_ = new ::std::string;
  }
  authentication_data_->assign(value);
}
inline void RpcMeta::set_authentication_data(const void* value, size_t size) {
  set_has_authentication_data();
  if (authentication_data_ == &::google::protobuf::internal::kEmptyString) {
    authentication_data_ = new ::std::string;
  }
  authentication_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcMeta::mutable_authentication_data() {
  set_has_authentication_data();
  if (authentication_data_ == &::google::protobuf::internal::kEmptyString) {
    authentication_data_ = new ::std::string;
  }
  return authentication_data_;
}
inline ::std::string* RpcMeta::release_authentication_data() {
  clear_has_authentication_data();
  if (authentication_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authentication_data_;
    authentication_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RpcRequestMeta

// required string service_name = 1;
inline bool RpcRequestMeta::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcRequestMeta::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcRequestMeta::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcRequestMeta::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& RpcRequestMeta::service_name() const {
  return *service_name_;
}
inline void RpcRequestMeta::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void RpcRequestMeta::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void RpcRequestMeta::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequestMeta::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* RpcRequestMeta::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string method_name = 2;
inline bool RpcRequestMeta::has_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcRequestMeta::set_has_method_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcRequestMeta::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcRequestMeta::clear_method_name() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    method_name_->clear();
  }
  clear_has_method_name();
}
inline const ::std::string& RpcRequestMeta::method_name() const {
  return *method_name_;
}
inline void RpcRequestMeta::set_method_name(const ::std::string& value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void RpcRequestMeta::set_method_name(const char* value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void RpcRequestMeta::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequestMeta::mutable_method_name() {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  return method_name_;
}
inline ::std::string* RpcRequestMeta::release_method_name() {
  clear_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_name_;
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 log_id = 3;
inline bool RpcRequestMeta::has_log_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcRequestMeta::set_has_log_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcRequestMeta::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcRequestMeta::clear_log_id() {
  log_id_ = GOOGLE_LONGLONG(0);
  clear_has_log_id();
}
inline ::google::protobuf::int64 RpcRequestMeta::log_id() const {
  return log_id_;
}
inline void RpcRequestMeta::set_log_id(::google::protobuf::int64 value) {
  set_has_log_id();
  log_id_ = value;
}

// optional int64 trace_id = 4;
inline bool RpcRequestMeta::has_trace_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcRequestMeta::set_has_trace_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcRequestMeta::clear_has_trace_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcRequestMeta::clear_trace_id() {
  trace_id_ = GOOGLE_LONGLONG(0);
  clear_has_trace_id();
}
inline ::google::protobuf::int64 RpcRequestMeta::trace_id() const {
  return trace_id_;
}
inline void RpcRequestMeta::set_trace_id(::google::protobuf::int64 value) {
  set_has_trace_id();
  trace_id_ = value;
}

// optional int64 span_id = 5;
inline bool RpcRequestMeta::has_span_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcRequestMeta::set_has_span_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcRequestMeta::clear_has_span_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcRequestMeta::clear_span_id() {
  span_id_ = GOOGLE_LONGLONG(0);
  clear_has_span_id();
}
inline ::google::protobuf::int64 RpcRequestMeta::span_id() const {
  return span_id_;
}
inline void RpcRequestMeta::set_span_id(::google::protobuf::int64 value) {
  set_has_span_id();
  span_id_ = value;
}

// optional int64 parent_span_id = 6;
inline bool RpcRequestMeta::has_parent_span_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpcRequestMeta::set_has_parent_span_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpcRequestMeta::clear_has_parent_span_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpcRequestMeta::clear_parent_span_id() {
  parent_span_id_ = GOOGLE_LONGLONG(0);
  clear_has_parent_span_id();
}
inline ::google::protobuf::int64 RpcRequestMeta::parent_span_id() const {
  return parent_span_id_;
}
inline void RpcRequestMeta::set_parent_span_id(::google::protobuf::int64 value) {
  set_has_parent_span_id();
  parent_span_id_ = value;
}

// -------------------------------------------------------------------

// RpcResponseMeta

// optional int32 error_code = 1;
inline bool RpcResponseMeta::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcResponseMeta::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcResponseMeta::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcResponseMeta::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 RpcResponseMeta::error_code() const {
  return error_code_;
}
inline void RpcResponseMeta::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional string error_text = 2;
inline bool RpcResponseMeta::has_error_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcResponseMeta::set_has_error_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcResponseMeta::clear_has_error_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcResponseMeta::clear_error_text() {
  if (error_text_ != &::google::protobuf::internal::kEmptyString) {
    error_text_->clear();
  }
  clear_has_error_text();
}
inline const ::std::string& RpcResponseMeta::error_text() const {
  return *error_text_;
}
inline void RpcResponseMeta::set_error_text(const ::std::string& value) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(value);
}
inline void RpcResponseMeta::set_error_text(const char* value) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(value);
}
inline void RpcResponseMeta::set_error_text(const char* value, size_t size) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponseMeta::mutable_error_text() {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  return error_text_;
}
inline ::std::string* RpcResponseMeta::release_error_text() {
  clear_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_text_;
    error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto__INCLUDED
