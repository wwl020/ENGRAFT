// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sgxbutil/state_cont/counter_rpc.proto

#ifndef PROTOBUF_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto__INCLUDED
#define PROTOBUF_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

namespace sgxbutil {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();

class PreIncCounterReq;
class PreIncCounterResp;
class StateContinuityResp;
class VoteInfo;
class LogStoreInfo;
class StateStoreRequest;
class TestConnectRequest;

// ===================================================================

class PreIncCounterReq : public ::google::protobuf::Message {
 public:
  PreIncCounterReq();
  virtual ~PreIncCounterReq();
  
  PreIncCounterReq(const PreIncCounterReq& from);
  
  inline PreIncCounterReq& operator=(const PreIncCounterReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreIncCounterReq& default_instance();
  
  void Swap(PreIncCounterReq* other);
  
  // implements Message ----------------------------------------------
  
  PreIncCounterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PreIncCounterReq& from);
  void MergeFrom(const PreIncCounterReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required uint64 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::uint64 flag() const;
  inline void set_flag(::google::protobuf::uint64 value);
  
  // required uint64 expected_value = 3;
  inline bool has_expected_value() const;
  inline void clear_expected_value();
  static const int kExpectedValueFieldNumber = 3;
  inline ::google::protobuf::uint64 expected_value() const;
  inline void set_expected_value(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:sgxbutil.PreIncCounterReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_expected_value();
  inline void clear_has_expected_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::google::protobuf::uint64 flag_;
  ::google::protobuf::uint64 expected_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PreIncCounterReq* default_instance_;
};
// -------------------------------------------------------------------

class PreIncCounterResp : public ::google::protobuf::Message {
 public:
  PreIncCounterResp();
  virtual ~PreIncCounterResp();
  
  PreIncCounterResp(const PreIncCounterResp& from);
  
  inline PreIncCounterResp& operator=(const PreIncCounterResp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreIncCounterResp& default_instance();
  
  void Swap(PreIncCounterResp* other);
  
  // implements Message ----------------------------------------------
  
  PreIncCounterResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PreIncCounterResp& from);
  void MergeFrom(const PreIncCounterResp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);
  
  // @@protoc_insertion_point(class_scope:sgxbutil.PreIncCounterResp)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PreIncCounterResp* default_instance_;
};
// -------------------------------------------------------------------

class StateContinuityResp : public ::google::protobuf::Message {
 public:
  StateContinuityResp();
  virtual ~StateContinuityResp();
  
  StateContinuityResp(const StateContinuityResp& from);
  
  inline StateContinuityResp& operator=(const StateContinuityResp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StateContinuityResp& default_instance();
  
  void Swap(StateContinuityResp* other);
  
  // implements Message ----------------------------------------------
  
  StateContinuityResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateContinuityResp& from);
  void MergeFrom(const StateContinuityResp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);
  
  // @@protoc_insertion_point(class_scope:sgxbutil.StateContinuityResp)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static StateContinuityResp* default_instance_;
};
// -------------------------------------------------------------------

class VoteInfo : public ::google::protobuf::Message {
 public:
  VoteInfo();
  virtual ~VoteInfo();
  
  VoteInfo(const VoteInfo& from);
  
  inline VoteInfo& operator=(const VoteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteInfo& default_instance();
  
  void Swap(VoteInfo* other);
  
  // implements Message ----------------------------------------------
  
  VoteInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteInfo& from);
  void MergeFrom(const VoteInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string voted_for = 1;
  inline bool has_voted_for() const;
  inline void clear_voted_for();
  static const int kVotedForFieldNumber = 1;
  inline const ::std::string& voted_for() const;
  inline void set_voted_for(const ::std::string& value);
  inline void set_voted_for(const char* value);
  inline void set_voted_for(const char* value, size_t size);
  inline ::std::string* mutable_voted_for();
  inline ::std::string* release_voted_for();
  
  // required int64 current_term = 2;
  inline bool has_current_term() const;
  inline void clear_current_term();
  static const int kCurrentTermFieldNumber = 2;
  inline ::google::protobuf::int64 current_term() const;
  inline void set_current_term(::google::protobuf::int64 value);
  
  // required uint64 vote_info_index = 3;
  inline bool has_vote_info_index() const;
  inline void clear_vote_info_index();
  static const int kVoteInfoIndexFieldNumber = 3;
  inline ::google::protobuf::uint64 vote_info_index() const;
  inline void set_vote_info_index(::google::protobuf::uint64 value);
  
  // required string sender_id = 4;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 4;
  inline const ::std::string& sender_id() const;
  inline void set_sender_id(const ::std::string& value);
  inline void set_sender_id(const char* value);
  inline void set_sender_id(const char* value, size_t size);
  inline ::std::string* mutable_sender_id();
  inline ::std::string* release_sender_id();
  
  // @@protoc_insertion_point(class_scope:sgxbutil.VoteInfo)
 private:
  inline void set_has_voted_for();
  inline void clear_has_voted_for();
  inline void set_has_current_term();
  inline void clear_has_current_term();
  inline void set_has_vote_info_index();
  inline void clear_has_vote_info_index();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* voted_for_;
  ::google::protobuf::int64 current_term_;
  ::google::protobuf::uint64 vote_info_index_;
  ::std::string* sender_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static VoteInfo* default_instance_;
};
// -------------------------------------------------------------------

class LogStoreInfo : public ::google::protobuf::Message {
 public:
  LogStoreInfo();
  virtual ~LogStoreInfo();
  
  LogStoreInfo(const LogStoreInfo& from);
  
  inline LogStoreInfo& operator=(const LogStoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogStoreInfo& default_instance();
  
  void Swap(LogStoreInfo* other);
  
  // implements Message ----------------------------------------------
  
  LogStoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogStoreInfo& from);
  void MergeFrom(const LogStoreInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes chained_hash = 1;
  inline bool has_chained_hash() const;
  inline void clear_chained_hash();
  static const int kChainedHashFieldNumber = 1;
  inline const ::std::string& chained_hash() const;
  inline void set_chained_hash(const ::std::string& value);
  inline void set_chained_hash(const char* value);
  inline void set_chained_hash(const void* value, size_t size);
  inline ::std::string* mutable_chained_hash();
  inline ::std::string* release_chained_hash();
  
  // optional int64 first_log_index = 2;
  inline bool has_first_log_index() const;
  inline void clear_first_log_index();
  static const int kFirstLogIndexFieldNumber = 2;
  inline ::google::protobuf::int64 first_log_index() const;
  inline void set_first_log_index(::google::protobuf::int64 value);
  
  // optional int64 last_log_index = 3;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  inline ::google::protobuf::int64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::int64 value);
  
  // required uint64 log_store_info_index = 4;
  inline bool has_log_store_info_index() const;
  inline void clear_log_store_info_index();
  static const int kLogStoreInfoIndexFieldNumber = 4;
  inline ::google::protobuf::uint64 log_store_info_index() const;
  inline void set_log_store_info_index(::google::protobuf::uint64 value);
  
  // required string sender_id = 5;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 5;
  inline const ::std::string& sender_id() const;
  inline void set_sender_id(const ::std::string& value);
  inline void set_sender_id(const char* value);
  inline void set_sender_id(const char* value, size_t size);
  inline ::std::string* mutable_sender_id();
  inline ::std::string* release_sender_id();
  
  // @@protoc_insertion_point(class_scope:sgxbutil.LogStoreInfo)
 private:
  inline void set_has_chained_hash();
  inline void clear_has_chained_hash();
  inline void set_has_first_log_index();
  inline void clear_has_first_log_index();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();
  inline void set_has_log_store_info_index();
  inline void clear_has_log_store_info_index();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* chained_hash_;
  ::google::protobuf::int64 first_log_index_;
  ::google::protobuf::int64 last_log_index_;
  ::google::protobuf::uint64 log_store_info_index_;
  ::std::string* sender_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static LogStoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class StateStoreRequest : public ::google::protobuf::Message {
 public:
  StateStoreRequest();
  virtual ~StateStoreRequest();
  
  StateStoreRequest(const StateStoreRequest& from);
  
  inline StateStoreRequest& operator=(const StateStoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StateStoreRequest& default_instance();
  
  void Swap(StateStoreRequest* other);
  
  // implements Message ----------------------------------------------
  
  StateStoreRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateStoreRequest& from);
  void MergeFrom(const StateStoreRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool confirmation = 1;
  inline bool has_confirmation() const;
  inline void clear_confirmation();
  static const int kConfirmationFieldNumber = 1;
  inline bool confirmation() const;
  inline void set_confirmation(bool value);
  
  // optional .sgxbutil.VoteInfo vote_info = 2;
  inline bool has_vote_info() const;
  inline void clear_vote_info();
  static const int kVoteInfoFieldNumber = 2;
  inline const ::sgxbutil::VoteInfo& vote_info() const;
  inline ::sgxbutil::VoteInfo* mutable_vote_info();
  inline ::sgxbutil::VoteInfo* release_vote_info();
  
  // optional .sgxbutil.LogStoreInfo log_store_info = 3;
  inline bool has_log_store_info() const;
  inline void clear_log_store_info();
  static const int kLogStoreInfoFieldNumber = 3;
  inline const ::sgxbutil::LogStoreInfo& log_store_info() const;
  inline ::sgxbutil::LogStoreInfo* mutable_log_store_info();
  inline ::sgxbutil::LogStoreInfo* release_log_store_info();
  
  // optional bool with_next_log_hash = 4;
  inline bool has_with_next_log_hash() const;
  inline void clear_with_next_log_hash();
  static const int kWithNextLogHashFieldNumber = 4;
  inline bool with_next_log_hash() const;
  inline void set_with_next_log_hash(bool value);
  
  // optional .sgxbutil.LogStoreInfo next_log_store_info = 5;
  inline bool has_next_log_store_info() const;
  inline void clear_next_log_store_info();
  static const int kNextLogStoreInfoFieldNumber = 5;
  inline const ::sgxbutil::LogStoreInfo& next_log_store_info() const;
  inline ::sgxbutil::LogStoreInfo* mutable_next_log_store_info();
  inline ::sgxbutil::LogStoreInfo* release_next_log_store_info();
  
  // @@protoc_insertion_point(class_scope:sgxbutil.StateStoreRequest)
 private:
  inline void set_has_confirmation();
  inline void clear_has_confirmation();
  inline void set_has_vote_info();
  inline void clear_has_vote_info();
  inline void set_has_log_store_info();
  inline void clear_has_log_store_info();
  inline void set_has_with_next_log_hash();
  inline void clear_has_with_next_log_hash();
  inline void set_has_next_log_store_info();
  inline void clear_has_next_log_store_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::sgxbutil::VoteInfo* vote_info_;
  ::sgxbutil::LogStoreInfo* log_store_info_;
  ::sgxbutil::LogStoreInfo* next_log_store_info_;
  bool confirmation_;
  bool with_next_log_hash_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static StateStoreRequest* default_instance_;
};
// -------------------------------------------------------------------

class TestConnectRequest : public ::google::protobuf::Message {
 public:
  TestConnectRequest();
  virtual ~TestConnectRequest();
  
  TestConnectRequest(const TestConnectRequest& from);
  
  inline TestConnectRequest& operator=(const TestConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestConnectRequest& default_instance();
  
  void Swap(TestConnectRequest* other);
  
  // implements Message ----------------------------------------------
  
  TestConnectRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestConnectRequest& from);
  void MergeFrom(const TestConnectRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool non_sense = 1;
  inline bool has_non_sense() const;
  inline void clear_non_sense();
  static const int kNonSenseFieldNumber = 1;
  inline bool non_sense() const;
  inline void set_non_sense(bool value);
  
  // @@protoc_insertion_point(class_scope:sgxbutil.TestConnectRequest)
 private:
  inline void set_has_non_sense();
  inline void clear_has_non_sense();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool non_sense_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  friend void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static TestConnectRequest* default_instance_;
};
// ===================================================================

class StateContService_Stub;

class StateContService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline StateContService() {};
 public:
  virtual ~StateContService();
  
  typedef StateContService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void pre_inc_counter(::google::protobuf::RpcController* controller,
                       const ::sgxbutil::PreIncCounterReq* request,
                       ::sgxbutil::PreIncCounterResp* response,
                       ::google::protobuf::Closure* done);
  virtual void confirm_inc_counter(::google::protobuf::RpcController* controller,
                       const ::sgxbutil::PreIncCounterReq* request,
                       ::sgxbutil::PreIncCounterResp* response,
                       ::google::protobuf::Closure* done);
  virtual void store_states(::google::protobuf::RpcController* controller,
                       const ::sgxbutil::StateStoreRequest* request,
                       ::sgxbutil::StateContinuityResp* response,
                       ::google::protobuf::Closure* done);
  virtual void test_connectable(::google::protobuf::RpcController* controller,
                       const ::sgxbutil::TestConnectRequest* request,
                       ::sgxbutil::StateContinuityResp* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StateContService);
};

class StateContService_Stub : public StateContService {
 public:
  StateContService_Stub(::google::protobuf::RpcChannel* channel);
  StateContService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~StateContService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements StateContService ------------------------------------------
  
  void pre_inc_counter(::google::protobuf::RpcController* controller,
                       const ::sgxbutil::PreIncCounterReq* request,
                       ::sgxbutil::PreIncCounterResp* response,
                       ::google::protobuf::Closure* done);
  void confirm_inc_counter(::google::protobuf::RpcController* controller,
                       const ::sgxbutil::PreIncCounterReq* request,
                       ::sgxbutil::PreIncCounterResp* response,
                       ::google::protobuf::Closure* done);
  void store_states(::google::protobuf::RpcController* controller,
                       const ::sgxbutil::StateStoreRequest* request,
                       ::sgxbutil::StateContinuityResp* response,
                       ::google::protobuf::Closure* done);
  void test_connectable(::google::protobuf::RpcController* controller,
                       const ::sgxbutil::TestConnectRequest* request,
                       ::sgxbutil::StateContinuityResp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StateContService_Stub);
};


// ===================================================================


// ===================================================================

// PreIncCounterReq

// required string id = 1;
inline bool PreIncCounterReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PreIncCounterReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PreIncCounterReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PreIncCounterReq::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PreIncCounterReq::id() const {
  return *id_;
}
inline void PreIncCounterReq::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PreIncCounterReq::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PreIncCounterReq::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PreIncCounterReq::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* PreIncCounterReq::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 flag = 2;
inline bool PreIncCounterReq::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PreIncCounterReq::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PreIncCounterReq::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PreIncCounterReq::clear_flag() {
  flag_ = GOOGLE_ULONGLONG(0);
  clear_has_flag();
}
inline ::google::protobuf::uint64 PreIncCounterReq::flag() const {
  return flag_;
}
inline void PreIncCounterReq::set_flag(::google::protobuf::uint64 value) {
  set_has_flag();
  flag_ = value;
}

// required uint64 expected_value = 3;
inline bool PreIncCounterReq::has_expected_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PreIncCounterReq::set_has_expected_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PreIncCounterReq::clear_has_expected_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PreIncCounterReq::clear_expected_value() {
  expected_value_ = GOOGLE_ULONGLONG(0);
  clear_has_expected_value();
}
inline ::google::protobuf::uint64 PreIncCounterReq::expected_value() const {
  return expected_value_;
}
inline void PreIncCounterReq::set_expected_value(::google::protobuf::uint64 value) {
  set_has_expected_value();
  expected_value_ = value;
}

// -------------------------------------------------------------------

// PreIncCounterResp

// required bool success = 1;
inline bool PreIncCounterResp::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PreIncCounterResp::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PreIncCounterResp::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PreIncCounterResp::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PreIncCounterResp::success() const {
  return success_;
}
inline void PreIncCounterResp::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// StateContinuityResp

// required bool success = 1;
inline bool StateContinuityResp::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateContinuityResp::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateContinuityResp::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateContinuityResp::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool StateContinuityResp::success() const {
  return success_;
}
inline void StateContinuityResp::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// VoteInfo

// required string voted_for = 1;
inline bool VoteInfo::has_voted_for() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteInfo::set_has_voted_for() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteInfo::clear_has_voted_for() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteInfo::clear_voted_for() {
  if (voted_for_ != &::google::protobuf::internal::kEmptyString) {
    voted_for_->clear();
  }
  clear_has_voted_for();
}
inline const ::std::string& VoteInfo::voted_for() const {
  return *voted_for_;
}
inline void VoteInfo::set_voted_for(const ::std::string& value) {
  set_has_voted_for();
  if (voted_for_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ = new ::std::string;
  }
  voted_for_->assign(value);
}
inline void VoteInfo::set_voted_for(const char* value) {
  set_has_voted_for();
  if (voted_for_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ = new ::std::string;
  }
  voted_for_->assign(value);
}
inline void VoteInfo::set_voted_for(const char* value, size_t size) {
  set_has_voted_for();
  if (voted_for_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ = new ::std::string;
  }
  voted_for_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VoteInfo::mutable_voted_for() {
  set_has_voted_for();
  if (voted_for_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ = new ::std::string;
  }
  return voted_for_;
}
inline ::std::string* VoteInfo::release_voted_for() {
  clear_has_voted_for();
  if (voted_for_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voted_for_;
    voted_for_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 current_term = 2;
inline bool VoteInfo::has_current_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoteInfo::set_has_current_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoteInfo::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoteInfo::clear_current_term() {
  current_term_ = GOOGLE_LONGLONG(0);
  clear_has_current_term();
}
inline ::google::protobuf::int64 VoteInfo::current_term() const {
  return current_term_;
}
inline void VoteInfo::set_current_term(::google::protobuf::int64 value) {
  set_has_current_term();
  current_term_ = value;
}

// required uint64 vote_info_index = 3;
inline bool VoteInfo::has_vote_info_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoteInfo::set_has_vote_info_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoteInfo::clear_has_vote_info_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoteInfo::clear_vote_info_index() {
  vote_info_index_ = GOOGLE_ULONGLONG(0);
  clear_has_vote_info_index();
}
inline ::google::protobuf::uint64 VoteInfo::vote_info_index() const {
  return vote_info_index_;
}
inline void VoteInfo::set_vote_info_index(::google::protobuf::uint64 value) {
  set_has_vote_info_index();
  vote_info_index_ = value;
}

// required string sender_id = 4;
inline bool VoteInfo::has_sender_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoteInfo::set_has_sender_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoteInfo::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoteInfo::clear_sender_id() {
  if (sender_id_ != &::google::protobuf::internal::kEmptyString) {
    sender_id_->clear();
  }
  clear_has_sender_id();
}
inline const ::std::string& VoteInfo::sender_id() const {
  return *sender_id_;
}
inline void VoteInfo::set_sender_id(const ::std::string& value) {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::kEmptyString) {
    sender_id_ = new ::std::string;
  }
  sender_id_->assign(value);
}
inline void VoteInfo::set_sender_id(const char* value) {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::kEmptyString) {
    sender_id_ = new ::std::string;
  }
  sender_id_->assign(value);
}
inline void VoteInfo::set_sender_id(const char* value, size_t size) {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::kEmptyString) {
    sender_id_ = new ::std::string;
  }
  sender_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VoteInfo::mutable_sender_id() {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::kEmptyString) {
    sender_id_ = new ::std::string;
  }
  return sender_id_;
}
inline ::std::string* VoteInfo::release_sender_id() {
  clear_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_id_;
    sender_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogStoreInfo

// required bytes chained_hash = 1;
inline bool LogStoreInfo::has_chained_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogStoreInfo::set_has_chained_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogStoreInfo::clear_has_chained_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogStoreInfo::clear_chained_hash() {
  if (chained_hash_ != &::google::protobuf::internal::kEmptyString) {
    chained_hash_->clear();
  }
  clear_has_chained_hash();
}
inline const ::std::string& LogStoreInfo::chained_hash() const {
  return *chained_hash_;
}
inline void LogStoreInfo::set_chained_hash(const ::std::string& value) {
  set_has_chained_hash();
  if (chained_hash_ == &::google::protobuf::internal::kEmptyString) {
    chained_hash_ = new ::std::string;
  }
  chained_hash_->assign(value);
}
inline void LogStoreInfo::set_chained_hash(const char* value) {
  set_has_chained_hash();
  if (chained_hash_ == &::google::protobuf::internal::kEmptyString) {
    chained_hash_ = new ::std::string;
  }
  chained_hash_->assign(value);
}
inline void LogStoreInfo::set_chained_hash(const void* value, size_t size) {
  set_has_chained_hash();
  if (chained_hash_ == &::google::protobuf::internal::kEmptyString) {
    chained_hash_ = new ::std::string;
  }
  chained_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStoreInfo::mutable_chained_hash() {
  set_has_chained_hash();
  if (chained_hash_ == &::google::protobuf::internal::kEmptyString) {
    chained_hash_ = new ::std::string;
  }
  return chained_hash_;
}
inline ::std::string* LogStoreInfo::release_chained_hash() {
  clear_has_chained_hash();
  if (chained_hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chained_hash_;
    chained_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 first_log_index = 2;
inline bool LogStoreInfo::has_first_log_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogStoreInfo::set_has_first_log_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogStoreInfo::clear_has_first_log_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogStoreInfo::clear_first_log_index() {
  first_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_first_log_index();
}
inline ::google::protobuf::int64 LogStoreInfo::first_log_index() const {
  return first_log_index_;
}
inline void LogStoreInfo::set_first_log_index(::google::protobuf::int64 value) {
  set_has_first_log_index();
  first_log_index_ = value;
}

// optional int64 last_log_index = 3;
inline bool LogStoreInfo::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogStoreInfo::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogStoreInfo::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogStoreInfo::clear_last_log_index() {
  last_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::int64 LogStoreInfo::last_log_index() const {
  return last_log_index_;
}
inline void LogStoreInfo::set_last_log_index(::google::protobuf::int64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// required uint64 log_store_info_index = 4;
inline bool LogStoreInfo::has_log_store_info_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogStoreInfo::set_has_log_store_info_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogStoreInfo::clear_has_log_store_info_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogStoreInfo::clear_log_store_info_index() {
  log_store_info_index_ = GOOGLE_ULONGLONG(0);
  clear_has_log_store_info_index();
}
inline ::google::protobuf::uint64 LogStoreInfo::log_store_info_index() const {
  return log_store_info_index_;
}
inline void LogStoreInfo::set_log_store_info_index(::google::protobuf::uint64 value) {
  set_has_log_store_info_index();
  log_store_info_index_ = value;
}

// required string sender_id = 5;
inline bool LogStoreInfo::has_sender_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogStoreInfo::set_has_sender_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogStoreInfo::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogStoreInfo::clear_sender_id() {
  if (sender_id_ != &::google::protobuf::internal::kEmptyString) {
    sender_id_->clear();
  }
  clear_has_sender_id();
}
inline const ::std::string& LogStoreInfo::sender_id() const {
  return *sender_id_;
}
inline void LogStoreInfo::set_sender_id(const ::std::string& value) {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::kEmptyString) {
    sender_id_ = new ::std::string;
  }
  sender_id_->assign(value);
}
inline void LogStoreInfo::set_sender_id(const char* value) {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::kEmptyString) {
    sender_id_ = new ::std::string;
  }
  sender_id_->assign(value);
}
inline void LogStoreInfo::set_sender_id(const char* value, size_t size) {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::kEmptyString) {
    sender_id_ = new ::std::string;
  }
  sender_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogStoreInfo::mutable_sender_id() {
  set_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::kEmptyString) {
    sender_id_ = new ::std::string;
  }
  return sender_id_;
}
inline ::std::string* LogStoreInfo::release_sender_id() {
  clear_has_sender_id();
  if (sender_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_id_;
    sender_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StateStoreRequest

// required bool confirmation = 1;
inline bool StateStoreRequest::has_confirmation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateStoreRequest::set_has_confirmation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateStoreRequest::clear_has_confirmation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateStoreRequest::clear_confirmation() {
  confirmation_ = false;
  clear_has_confirmation();
}
inline bool StateStoreRequest::confirmation() const {
  return confirmation_;
}
inline void StateStoreRequest::set_confirmation(bool value) {
  set_has_confirmation();
  confirmation_ = value;
}

// optional .sgxbutil.VoteInfo vote_info = 2;
inline bool StateStoreRequest::has_vote_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateStoreRequest::set_has_vote_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateStoreRequest::clear_has_vote_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateStoreRequest::clear_vote_info() {
  if (vote_info_ != NULL) vote_info_->::sgxbutil::VoteInfo::Clear();
  clear_has_vote_info();
}
inline const ::sgxbutil::VoteInfo& StateStoreRequest::vote_info() const {
  return vote_info_ != NULL ? *vote_info_ : *default_instance_->vote_info_;
}
inline ::sgxbutil::VoteInfo* StateStoreRequest::mutable_vote_info() {
  set_has_vote_info();
  if (vote_info_ == NULL) vote_info_ = new ::sgxbutil::VoteInfo;
  return vote_info_;
}
inline ::sgxbutil::VoteInfo* StateStoreRequest::release_vote_info() {
  clear_has_vote_info();
  ::sgxbutil::VoteInfo* temp = vote_info_;
  vote_info_ = NULL;
  return temp;
}

// optional .sgxbutil.LogStoreInfo log_store_info = 3;
inline bool StateStoreRequest::has_log_store_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StateStoreRequest::set_has_log_store_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StateStoreRequest::clear_has_log_store_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StateStoreRequest::clear_log_store_info() {
  if (log_store_info_ != NULL) log_store_info_->::sgxbutil::LogStoreInfo::Clear();
  clear_has_log_store_info();
}
inline const ::sgxbutil::LogStoreInfo& StateStoreRequest::log_store_info() const {
  return log_store_info_ != NULL ? *log_store_info_ : *default_instance_->log_store_info_;
}
inline ::sgxbutil::LogStoreInfo* StateStoreRequest::mutable_log_store_info() {
  set_has_log_store_info();
  if (log_store_info_ == NULL) log_store_info_ = new ::sgxbutil::LogStoreInfo;
  return log_store_info_;
}
inline ::sgxbutil::LogStoreInfo* StateStoreRequest::release_log_store_info() {
  clear_has_log_store_info();
  ::sgxbutil::LogStoreInfo* temp = log_store_info_;
  log_store_info_ = NULL;
  return temp;
}

// optional bool with_next_log_hash = 4;
inline bool StateStoreRequest::has_with_next_log_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StateStoreRequest::set_has_with_next_log_hash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StateStoreRequest::clear_has_with_next_log_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StateStoreRequest::clear_with_next_log_hash() {
  with_next_log_hash_ = false;
  clear_has_with_next_log_hash();
}
inline bool StateStoreRequest::with_next_log_hash() const {
  return with_next_log_hash_;
}
inline void StateStoreRequest::set_with_next_log_hash(bool value) {
  set_has_with_next_log_hash();
  with_next_log_hash_ = value;
}

// optional .sgxbutil.LogStoreInfo next_log_store_info = 5;
inline bool StateStoreRequest::has_next_log_store_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StateStoreRequest::set_has_next_log_store_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StateStoreRequest::clear_has_next_log_store_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StateStoreRequest::clear_next_log_store_info() {
  if (next_log_store_info_ != NULL) next_log_store_info_->::sgxbutil::LogStoreInfo::Clear();
  clear_has_next_log_store_info();
}
inline const ::sgxbutil::LogStoreInfo& StateStoreRequest::next_log_store_info() const {
  return next_log_store_info_ != NULL ? *next_log_store_info_ : *default_instance_->next_log_store_info_;
}
inline ::sgxbutil::LogStoreInfo* StateStoreRequest::mutable_next_log_store_info() {
  set_has_next_log_store_info();
  if (next_log_store_info_ == NULL) next_log_store_info_ = new ::sgxbutil::LogStoreInfo;
  return next_log_store_info_;
}
inline ::sgxbutil::LogStoreInfo* StateStoreRequest::release_next_log_store_info() {
  clear_has_next_log_store_info();
  ::sgxbutil::LogStoreInfo* temp = next_log_store_info_;
  next_log_store_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TestConnectRequest

// required bool non_sense = 1;
inline bool TestConnectRequest::has_non_sense() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestConnectRequest::set_has_non_sense() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestConnectRequest::clear_has_non_sense() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestConnectRequest::clear_non_sense() {
  non_sense_ = false;
  clear_has_non_sense();
}
inline bool TestConnectRequest::non_sense() const {
  return non_sense_;
}
inline void TestConnectRequest::set_non_sense(bool value) {
  set_has_non_sense();
  non_sense_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sgxbutil

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto__INCLUDED
