// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sgxbutil/state_cont/counter_list.proto

#ifndef PROTOBUF_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto__INCLUDED
#define PROTOBUF_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace sgxbutil {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();
void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();
void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();

class MonotonicCounter;
class CounterList;

// ===================================================================

class MonotonicCounter : public ::google::protobuf::Message {
 public:
  MonotonicCounter();
  virtual ~MonotonicCounter();
  
  MonotonicCounter(const MonotonicCounter& from);
  
  inline MonotonicCounter& operator=(const MonotonicCounter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonotonicCounter& default_instance();
  
  void Swap(MonotonicCounter* other);
  
  // implements Message ----------------------------------------------
  
  MonotonicCounter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonotonicCounter& from);
  void MergeFrom(const MonotonicCounter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // required uint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:sgxbutil.MonotonicCounter)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 value_;
  ::google::protobuf::uint32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();
  friend void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();
  friend void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();
  
  void InitAsDefaultInstance();
  static MonotonicCounter* default_instance_;
};
// -------------------------------------------------------------------

class CounterList : public ::google::protobuf::Message {
 public:
  CounterList();
  virtual ~CounterList();
  
  CounterList(const CounterList& from);
  
  inline CounterList& operator=(const CounterList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CounterList& default_instance();
  
  void Swap(CounterList* other);
  
  // implements Message ----------------------------------------------
  
  CounterList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CounterList& from);
  void MergeFrom(const CounterList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .sgxbutil.MonotonicCounter counters = 1;
  inline int counters_size() const;
  inline void clear_counters();
  static const int kCountersFieldNumber = 1;
  inline const ::sgxbutil::MonotonicCounter& counters(int index) const;
  inline ::sgxbutil::MonotonicCounter* mutable_counters(int index);
  inline ::sgxbutil::MonotonicCounter* add_counters();
  inline const ::google::protobuf::RepeatedPtrField< ::sgxbutil::MonotonicCounter >&
      counters() const;
  inline ::google::protobuf::RepeatedPtrField< ::sgxbutil::MonotonicCounter >*
      mutable_counters();
  
  // @@protoc_insertion_point(class_scope:sgxbutil.CounterList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::sgxbutil::MonotonicCounter > counters_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();
  friend void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();
  friend void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();
  
  void InitAsDefaultInstance();
  static CounterList* default_instance_;
};
// ===================================================================


// ===================================================================

// MonotonicCounter

// required uint32 index = 1;
inline bool MonotonicCounter::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonotonicCounter::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonotonicCounter::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonotonicCounter::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 MonotonicCounter::index() const {
  return index_;
}
inline void MonotonicCounter::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required uint64 value = 2;
inline bool MonotonicCounter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonotonicCounter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonotonicCounter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonotonicCounter::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 MonotonicCounter::value() const {
  return value_;
}
inline void MonotonicCounter::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// CounterList

// repeated .sgxbutil.MonotonicCounter counters = 1;
inline int CounterList::counters_size() const {
  return counters_.size();
}
inline void CounterList::clear_counters() {
  counters_.Clear();
}
inline const ::sgxbutil::MonotonicCounter& CounterList::counters(int index) const {
  return counters_.Get(index);
}
inline ::sgxbutil::MonotonicCounter* CounterList::mutable_counters(int index) {
  return counters_.Mutable(index);
}
inline ::sgxbutil::MonotonicCounter* CounterList::add_counters() {
  return counters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sgxbutil::MonotonicCounter >&
CounterList::counters() const {
  return counters_;
}
inline ::google::protobuf::RepeatedPtrField< ::sgxbutil::MonotonicCounter >*
CounterList::mutable_counters() {
  return &counters_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sgxbutil

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto__INCLUDED
