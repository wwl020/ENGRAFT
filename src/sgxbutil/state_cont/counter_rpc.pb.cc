// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sgxbutil/state_cont/counter_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sgxbutil {

namespace {

const ::google::protobuf::Descriptor* PreIncCounterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreIncCounterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreIncCounterResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreIncCounterResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateContinuityResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateContinuityResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogStoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogStoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateStoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateStoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConnectRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* StateContService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto() {
  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sgxbutil/state_cont/counter_rpc.proto");
  GOOGLE_CHECK(file != NULL);
  PreIncCounterReq_descriptor_ = file->message_type(0);
  static const int PreIncCounterReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreIncCounterReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreIncCounterReq, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreIncCounterReq, expected_value_),
  };
  PreIncCounterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreIncCounterReq_descriptor_,
      PreIncCounterReq::default_instance_,
      PreIncCounterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreIncCounterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreIncCounterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreIncCounterReq));
  PreIncCounterResp_descriptor_ = file->message_type(1);
  static const int PreIncCounterResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreIncCounterResp, success_),
  };
  PreIncCounterResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreIncCounterResp_descriptor_,
      PreIncCounterResp::default_instance_,
      PreIncCounterResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreIncCounterResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreIncCounterResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreIncCounterResp));
  StateContinuityResp_descriptor_ = file->message_type(2);
  static const int StateContinuityResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateContinuityResp, success_),
  };
  StateContinuityResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateContinuityResp_descriptor_,
      StateContinuityResp::default_instance_,
      StateContinuityResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateContinuityResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateContinuityResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateContinuityResp));
  VoteInfo_descriptor_ = file->message_type(3);
  static const int VoteInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteInfo, voted_for_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteInfo, current_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteInfo, vote_info_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteInfo, sender_id_),
  };
  VoteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VoteInfo_descriptor_,
      VoteInfo::default_instance_,
      VoteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoteInfo));
  LogStoreInfo_descriptor_ = file->message_type(4);
  static const int LogStoreInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStoreInfo, chained_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStoreInfo, first_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStoreInfo, last_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStoreInfo, log_store_info_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStoreInfo, sender_id_),
  };
  LogStoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogStoreInfo_descriptor_,
      LogStoreInfo::default_instance_,
      LogStoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogStoreInfo));
  StateStoreRequest_descriptor_ = file->message_type(5);
  static const int StateStoreRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateStoreRequest, confirmation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateStoreRequest, vote_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateStoreRequest, log_store_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateStoreRequest, with_next_log_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateStoreRequest, next_log_store_info_),
  };
  StateStoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateStoreRequest_descriptor_,
      StateStoreRequest::default_instance_,
      StateStoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateStoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateStoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateStoreRequest));
  TestConnectRequest_descriptor_ = file->message_type(6);
  static const int TestConnectRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConnectRequest, non_sense_),
  };
  TestConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConnectRequest_descriptor_,
      TestConnectRequest::default_instance_,
      TestConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConnectRequest));
  StateContService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreIncCounterReq_descriptor_, &PreIncCounterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreIncCounterResp_descriptor_, &PreIncCounterResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateContinuityResp_descriptor_, &StateContinuityResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoteInfo_descriptor_, &VoteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogStoreInfo_descriptor_, &LogStoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateStoreRequest_descriptor_, &StateStoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConnectRequest_descriptor_, &TestConnectRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto() {
  delete PreIncCounterReq::default_instance_;
  delete PreIncCounterReq_reflection_;
  delete PreIncCounterResp::default_instance_;
  delete PreIncCounterResp_reflection_;
  delete StateContinuityResp::default_instance_;
  delete StateContinuityResp_reflection_;
  delete VoteInfo::default_instance_;
  delete VoteInfo_reflection_;
  delete LogStoreInfo::default_instance_;
  delete LogStoreInfo_reflection_;
  delete StateStoreRequest::default_instance_;
  delete StateStoreRequest_reflection_;
  delete TestConnectRequest::default_instance_;
  delete TestConnectRequest_reflection_;
}

void protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%sgxbutil/state_cont/counter_rpc.proto\022"
    "\010sgxbutil\"D\n\020PreIncCounterReq\022\n\n\002id\030\001 \002("
    "\t\022\014\n\004flag\030\002 \002(\004\022\026\n\016expected_value\030\003 \002(\004\""
    "$\n\021PreIncCounterResp\022\017\n\007success\030\001 \002(\010\"&\n"
    "\023StateContinuityResp\022\017\n\007success\030\001 \002(\010\"_\n"
    "\010VoteInfo\022\021\n\tvoted_for\030\001 \002(\t\022\024\n\014current_"
    "term\030\002 \002(\003\022\027\n\017vote_info_index\030\003 \002(\004\022\021\n\ts"
    "ender_id\030\004 \002(\t\"\206\001\n\014LogStoreInfo\022\024\n\014chain"
    "ed_hash\030\001 \002(\014\022\027\n\017first_log_index\030\002 \001(\003\022\026"
    "\n\016last_log_index\030\003 \001(\003\022\034\n\024log_store_info"
    "_index\030\004 \002(\004\022\021\n\tsender_id\030\005 \002(\t\"\321\001\n\021Stat"
    "eStoreRequest\022\024\n\014confirmation\030\001 \002(\010\022%\n\tv"
    "ote_info\030\002 \001(\0132\022.sgxbutil.VoteInfo\022.\n\016lo"
    "g_store_info\030\003 \001(\0132\026.sgxbutil.LogStoreIn"
    "fo\022\032\n\022with_next_log_hash\030\004 \001(\010\0223\n\023next_l"
    "og_store_info\030\005 \001(\0132\026.sgxbutil.LogStoreI"
    "nfo\"\'\n\022TestConnectRequest\022\021\n\tnon_sense\030\001"
    " \002(\0102\313\002\n\020StateContService\022J\n\017pre_inc_cou"
    "nter\022\032.sgxbutil.PreIncCounterReq\032\033.sgxbu"
    "til.PreIncCounterResp\022N\n\023confirm_inc_cou"
    "nter\022\032.sgxbutil.PreIncCounterReq\032\033.sgxbu"
    "til.PreIncCounterResp\022J\n\014store_states\022\033."
    "sgxbutil.StateStoreRequest\032\035.sgxbutil.St"
    "ateContinuityResp\022O\n\020test_connectable\022\034."
    "sgxbutil.TestConnectRequest\032\035.sgxbutil.S"
    "tateContinuityRespB\003\200\001\001", 1023);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sgxbutil/state_cont/counter_rpc.proto", &protobuf_RegisterTypes);
  PreIncCounterReq::default_instance_ = new PreIncCounterReq();
  PreIncCounterResp::default_instance_ = new PreIncCounterResp();
  StateContinuityResp::default_instance_ = new StateContinuityResp();
  VoteInfo::default_instance_ = new VoteInfo();
  LogStoreInfo::default_instance_ = new LogStoreInfo();
  StateStoreRequest::default_instance_ = new StateStoreRequest();
  TestConnectRequest::default_instance_ = new TestConnectRequest();
  PreIncCounterReq::default_instance_->InitAsDefaultInstance();
  PreIncCounterResp::default_instance_->InitAsDefaultInstance();
  StateContinuityResp::default_instance_->InitAsDefaultInstance();
  VoteInfo::default_instance_->InitAsDefaultInstance();
  LogStoreInfo::default_instance_->InitAsDefaultInstance();
  StateStoreRequest::default_instance_->InitAsDefaultInstance();
  TestConnectRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto {
  StaticDescriptorInitializer_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto() {
    protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();
  }
} static_descriptor_initializer_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PreIncCounterReq::kIdFieldNumber;
const int PreIncCounterReq::kFlagFieldNumber;
const int PreIncCounterReq::kExpectedValueFieldNumber;
#endif  // !_MSC_VER

PreIncCounterReq::PreIncCounterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreIncCounterReq::InitAsDefaultInstance() {
}

PreIncCounterReq::PreIncCounterReq(const PreIncCounterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreIncCounterReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = GOOGLE_ULONGLONG(0);
  expected_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreIncCounterReq::~PreIncCounterReq() {
  SharedDtor();
}

void PreIncCounterReq::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void PreIncCounterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreIncCounterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreIncCounterReq_descriptor_;
}

const PreIncCounterReq& PreIncCounterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();  return *default_instance_;
}

PreIncCounterReq* PreIncCounterReq::default_instance_ = NULL;

PreIncCounterReq* PreIncCounterReq::New() const {
  return new PreIncCounterReq;
}

void PreIncCounterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    flag_ = GOOGLE_ULONGLONG(0);
    expected_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreIncCounterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // required uint64 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expected_value;
        break;
      }
      
      // required uint64 expected_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expected_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expected_value_)));
          set_has_expected_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreIncCounterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required uint64 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->flag(), output);
  }
  
  // required uint64 expected_value = 3;
  if (has_expected_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->expected_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreIncCounterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required uint64 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->flag(), target);
  }
  
  // required uint64 expected_value = 3;
  if (has_expected_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->expected_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreIncCounterReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required uint64 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flag());
    }
    
    // required uint64 expected_value = 3;
    if (has_expected_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expected_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreIncCounterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreIncCounterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreIncCounterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreIncCounterReq::MergeFrom(const PreIncCounterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_expected_value()) {
      set_expected_value(from.expected_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreIncCounterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreIncCounterReq::CopyFrom(const PreIncCounterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreIncCounterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PreIncCounterReq::Swap(PreIncCounterReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(flag_, other->flag_);
    std::swap(expected_value_, other->expected_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreIncCounterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreIncCounterReq_descriptor_;
  metadata.reflection = PreIncCounterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PreIncCounterResp::kSuccessFieldNumber;
#endif  // !_MSC_VER

PreIncCounterResp::PreIncCounterResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreIncCounterResp::InitAsDefaultInstance() {
}

PreIncCounterResp::PreIncCounterResp(const PreIncCounterResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreIncCounterResp::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreIncCounterResp::~PreIncCounterResp() {
  SharedDtor();
}

void PreIncCounterResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PreIncCounterResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreIncCounterResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreIncCounterResp_descriptor_;
}

const PreIncCounterResp& PreIncCounterResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();  return *default_instance_;
}

PreIncCounterResp* PreIncCounterResp::default_instance_ = NULL;

PreIncCounterResp* PreIncCounterResp::New() const {
  return new PreIncCounterResp;
}

void PreIncCounterResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreIncCounterResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreIncCounterResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreIncCounterResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreIncCounterResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreIncCounterResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreIncCounterResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreIncCounterResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreIncCounterResp::MergeFrom(const PreIncCounterResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreIncCounterResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreIncCounterResp::CopyFrom(const PreIncCounterResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreIncCounterResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PreIncCounterResp::Swap(PreIncCounterResp* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreIncCounterResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreIncCounterResp_descriptor_;
  metadata.reflection = PreIncCounterResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateContinuityResp::kSuccessFieldNumber;
#endif  // !_MSC_VER

StateContinuityResp::StateContinuityResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateContinuityResp::InitAsDefaultInstance() {
}

StateContinuityResp::StateContinuityResp(const StateContinuityResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateContinuityResp::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateContinuityResp::~StateContinuityResp() {
  SharedDtor();
}

void StateContinuityResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateContinuityResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateContinuityResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateContinuityResp_descriptor_;
}

const StateContinuityResp& StateContinuityResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();  return *default_instance_;
}

StateContinuityResp* StateContinuityResp::default_instance_ = NULL;

StateContinuityResp* StateContinuityResp::New() const {
  return new StateContinuityResp;
}

void StateContinuityResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateContinuityResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateContinuityResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateContinuityResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateContinuityResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateContinuityResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateContinuityResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateContinuityResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateContinuityResp::MergeFrom(const StateContinuityResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateContinuityResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateContinuityResp::CopyFrom(const StateContinuityResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateContinuityResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StateContinuityResp::Swap(StateContinuityResp* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateContinuityResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateContinuityResp_descriptor_;
  metadata.reflection = StateContinuityResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VoteInfo::kVotedForFieldNumber;
const int VoteInfo::kCurrentTermFieldNumber;
const int VoteInfo::kVoteInfoIndexFieldNumber;
const int VoteInfo::kSenderIdFieldNumber;
#endif  // !_MSC_VER

VoteInfo::VoteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VoteInfo::InitAsDefaultInstance() {
}

VoteInfo::VoteInfo(const VoteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VoteInfo::SharedCtor() {
  _cached_size_ = 0;
  voted_for_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  current_term_ = GOOGLE_LONGLONG(0);
  vote_info_index_ = GOOGLE_ULONGLONG(0);
  sender_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteInfo::~VoteInfo() {
  SharedDtor();
}

void VoteInfo::SharedDtor() {
  if (voted_for_ != &::google::protobuf::internal::kEmptyString) {
    delete voted_for_;
  }
  if (sender_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_id_;
  }
  if (this != default_instance_) {
  }
}

void VoteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteInfo_descriptor_;
}

const VoteInfo& VoteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();  return *default_instance_;
}

VoteInfo* VoteInfo::default_instance_ = NULL;

VoteInfo* VoteInfo::New() const {
  return new VoteInfo;
}

void VoteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_voted_for()) {
      if (voted_for_ != &::google::protobuf::internal::kEmptyString) {
        voted_for_->clear();
      }
    }
    current_term_ = GOOGLE_LONGLONG(0);
    vote_info_index_ = GOOGLE_ULONGLONG(0);
    if (has_sender_id()) {
      if (sender_id_ != &::google::protobuf::internal::kEmptyString) {
        sender_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string voted_for = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voted_for()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voted_for().data(), this->voted_for().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_term;
        break;
      }
      
      // required int64 current_term = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_term_)));
          set_has_current_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vote_info_index;
        break;
      }
      
      // required uint64 vote_info_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote_info_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vote_info_index_)));
          set_has_vote_info_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sender_id;
        break;
      }
      
      // required string sender_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_id().data(), this->sender_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string voted_for = 1;
  if (has_voted_for()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voted_for().data(), this->voted_for().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->voted_for(), output);
  }
  
  // required int64 current_term = 2;
  if (has_current_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->current_term(), output);
  }
  
  // required uint64 vote_info_index = 3;
  if (has_vote_info_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->vote_info_index(), output);
  }
  
  // required string sender_id = 4;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_id().data(), this->sender_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sender_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VoteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string voted_for = 1;
  if (has_voted_for()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voted_for().data(), this->voted_for().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->voted_for(), target);
  }
  
  // required int64 current_term = 2;
  if (has_current_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->current_term(), target);
  }
  
  // required uint64 vote_info_index = 3;
  if (has_vote_info_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->vote_info_index(), target);
  }
  
  // required string sender_id = 4;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_id().data(), this->sender_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sender_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VoteInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string voted_for = 1;
    if (has_voted_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voted_for());
    }
    
    // required int64 current_term = 2;
    if (has_current_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->current_term());
    }
    
    // required uint64 vote_info_index = 3;
    if (has_vote_info_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vote_info_index());
    }
    
    // required string sender_id = 4;
    if (has_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VoteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteInfo::MergeFrom(const VoteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voted_for()) {
      set_voted_for(from.voted_for());
    }
    if (from.has_current_term()) {
      set_current_term(from.current_term());
    }
    if (from.has_vote_info_index()) {
      set_vote_info_index(from.vote_info_index());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteInfo::CopyFrom(const VoteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void VoteInfo::Swap(VoteInfo* other) {
  if (other != this) {
    std::swap(voted_for_, other->voted_for_);
    std::swap(current_term_, other->current_term_);
    std::swap(vote_info_index_, other->vote_info_index_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VoteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteInfo_descriptor_;
  metadata.reflection = VoteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogStoreInfo::kChainedHashFieldNumber;
const int LogStoreInfo::kFirstLogIndexFieldNumber;
const int LogStoreInfo::kLastLogIndexFieldNumber;
const int LogStoreInfo::kLogStoreInfoIndexFieldNumber;
const int LogStoreInfo::kSenderIdFieldNumber;
#endif  // !_MSC_VER

LogStoreInfo::LogStoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogStoreInfo::InitAsDefaultInstance() {
}

LogStoreInfo::LogStoreInfo(const LogStoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogStoreInfo::SharedCtor() {
  _cached_size_ = 0;
  chained_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  first_log_index_ = GOOGLE_LONGLONG(0);
  last_log_index_ = GOOGLE_LONGLONG(0);
  log_store_info_index_ = GOOGLE_ULONGLONG(0);
  sender_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogStoreInfo::~LogStoreInfo() {
  SharedDtor();
}

void LogStoreInfo::SharedDtor() {
  if (chained_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete chained_hash_;
  }
  if (sender_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_id_;
  }
  if (this != default_instance_) {
  }
}

void LogStoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogStoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStoreInfo_descriptor_;
}

const LogStoreInfo& LogStoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();  return *default_instance_;
}

LogStoreInfo* LogStoreInfo::default_instance_ = NULL;

LogStoreInfo* LogStoreInfo::New() const {
  return new LogStoreInfo;
}

void LogStoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chained_hash()) {
      if (chained_hash_ != &::google::protobuf::internal::kEmptyString) {
        chained_hash_->clear();
      }
    }
    first_log_index_ = GOOGLE_LONGLONG(0);
    last_log_index_ = GOOGLE_LONGLONG(0);
    log_store_info_index_ = GOOGLE_ULONGLONG(0);
    if (has_sender_id()) {
      if (sender_id_ != &::google::protobuf::internal::kEmptyString) {
        sender_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogStoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes chained_hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chained_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_log_index;
        break;
      }
      
      // optional int64 first_log_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_log_index_)));
          set_has_first_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_log_index;
        break;
      }
      
      // optional int64 last_log_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_log_store_info_index;
        break;
      }
      
      // required uint64 log_store_info_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_store_info_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_store_info_index_)));
          set_has_log_store_info_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sender_id;
        break;
      }
      
      // required string sender_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_id().data(), this->sender_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogStoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes chained_hash = 1;
  if (has_chained_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->chained_hash(), output);
  }
  
  // optional int64 first_log_index = 2;
  if (has_first_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->first_log_index(), output);
  }
  
  // optional int64 last_log_index = 3;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_log_index(), output);
  }
  
  // required uint64 log_store_info_index = 4;
  if (has_log_store_info_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->log_store_info_index(), output);
  }
  
  // required string sender_id = 5;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_id().data(), this->sender_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sender_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogStoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chained_hash = 1;
  if (has_chained_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->chained_hash(), target);
  }
  
  // optional int64 first_log_index = 2;
  if (has_first_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->first_log_index(), target);
  }
  
  // optional int64 last_log_index = 3;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_log_index(), target);
  }
  
  // required uint64 log_store_info_index = 4;
  if (has_log_store_info_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->log_store_info_index(), target);
  }
  
  // required string sender_id = 5;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_id().data(), this->sender_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sender_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogStoreInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chained_hash = 1;
    if (has_chained_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chained_hash());
    }
    
    // optional int64 first_log_index = 2;
    if (has_first_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->first_log_index());
    }
    
    // optional int64 last_log_index = 3;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_log_index());
    }
    
    // required uint64 log_store_info_index = 4;
    if (has_log_store_info_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_store_info_index());
    }
    
    // required string sender_id = 5;
    if (has_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogStoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogStoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogStoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogStoreInfo::MergeFrom(const LogStoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chained_hash()) {
      set_chained_hash(from.chained_hash());
    }
    if (from.has_first_log_index()) {
      set_first_log_index(from.first_log_index());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
    if (from.has_log_store_info_index()) {
      set_log_store_info_index(from.log_store_info_index());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogStoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStoreInfo::CopyFrom(const LogStoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStoreInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  
  return true;
}

void LogStoreInfo::Swap(LogStoreInfo* other) {
  if (other != this) {
    std::swap(chained_hash_, other->chained_hash_);
    std::swap(first_log_index_, other->first_log_index_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(log_store_info_index_, other->log_store_info_index_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogStoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogStoreInfo_descriptor_;
  metadata.reflection = LogStoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateStoreRequest::kConfirmationFieldNumber;
const int StateStoreRequest::kVoteInfoFieldNumber;
const int StateStoreRequest::kLogStoreInfoFieldNumber;
const int StateStoreRequest::kWithNextLogHashFieldNumber;
const int StateStoreRequest::kNextLogStoreInfoFieldNumber;
#endif  // !_MSC_VER

StateStoreRequest::StateStoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateStoreRequest::InitAsDefaultInstance() {
  vote_info_ = const_cast< ::sgxbutil::VoteInfo*>(&::sgxbutil::VoteInfo::default_instance());
  log_store_info_ = const_cast< ::sgxbutil::LogStoreInfo*>(&::sgxbutil::LogStoreInfo::default_instance());
  next_log_store_info_ = const_cast< ::sgxbutil::LogStoreInfo*>(&::sgxbutil::LogStoreInfo::default_instance());
}

StateStoreRequest::StateStoreRequest(const StateStoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateStoreRequest::SharedCtor() {
  _cached_size_ = 0;
  confirmation_ = false;
  vote_info_ = NULL;
  log_store_info_ = NULL;
  with_next_log_hash_ = false;
  next_log_store_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateStoreRequest::~StateStoreRequest() {
  SharedDtor();
}

void StateStoreRequest::SharedDtor() {
  if (this != default_instance_) {
    delete vote_info_;
    delete log_store_info_;
    delete next_log_store_info_;
  }
}

void StateStoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateStoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateStoreRequest_descriptor_;
}

const StateStoreRequest& StateStoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();  return *default_instance_;
}

StateStoreRequest* StateStoreRequest::default_instance_ = NULL;

StateStoreRequest* StateStoreRequest::New() const {
  return new StateStoreRequest;
}

void StateStoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    confirmation_ = false;
    if (has_vote_info()) {
      if (vote_info_ != NULL) vote_info_->::sgxbutil::VoteInfo::Clear();
    }
    if (has_log_store_info()) {
      if (log_store_info_ != NULL) log_store_info_->::sgxbutil::LogStoreInfo::Clear();
    }
    with_next_log_hash_ = false;
    if (has_next_log_store_info()) {
      if (next_log_store_info_ != NULL) next_log_store_info_->::sgxbutil::LogStoreInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool confirmation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &confirmation_)));
          set_has_confirmation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vote_info;
        break;
      }
      
      // optional .sgxbutil.VoteInfo vote_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vote_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vote_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log_store_info;
        break;
      }
      
      // optional .sgxbutil.LogStoreInfo log_store_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_store_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_store_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_with_next_log_hash;
        break;
      }
      
      // optional bool with_next_log_hash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_with_next_log_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_next_log_hash_)));
          set_has_with_next_log_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_next_log_store_info;
        break;
      }
      
      // optional .sgxbutil.LogStoreInfo next_log_store_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next_log_store_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_log_store_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool confirmation = 1;
  if (has_confirmation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->confirmation(), output);
  }
  
  // optional .sgxbutil.VoteInfo vote_info = 2;
  if (has_vote_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vote_info(), output);
  }
  
  // optional .sgxbutil.LogStoreInfo log_store_info = 3;
  if (has_log_store_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log_store_info(), output);
  }
  
  // optional bool with_next_log_hash = 4;
  if (has_with_next_log_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->with_next_log_hash(), output);
  }
  
  // optional .sgxbutil.LogStoreInfo next_log_store_info = 5;
  if (has_next_log_store_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->next_log_store_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateStoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool confirmation = 1;
  if (has_confirmation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->confirmation(), target);
  }
  
  // optional .sgxbutil.VoteInfo vote_info = 2;
  if (has_vote_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vote_info(), target);
  }
  
  // optional .sgxbutil.LogStoreInfo log_store_info = 3;
  if (has_log_store_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log_store_info(), target);
  }
  
  // optional bool with_next_log_hash = 4;
  if (has_with_next_log_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->with_next_log_hash(), target);
  }
  
  // optional .sgxbutil.LogStoreInfo next_log_store_info = 5;
  if (has_next_log_store_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->next_log_store_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateStoreRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool confirmation = 1;
    if (has_confirmation()) {
      total_size += 1 + 1;
    }
    
    // optional .sgxbutil.VoteInfo vote_info = 2;
    if (has_vote_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vote_info());
    }
    
    // optional .sgxbutil.LogStoreInfo log_store_info = 3;
    if (has_log_store_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_store_info());
    }
    
    // optional bool with_next_log_hash = 4;
    if (has_with_next_log_hash()) {
      total_size += 1 + 1;
    }
    
    // optional .sgxbutil.LogStoreInfo next_log_store_info = 5;
    if (has_next_log_store_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_log_store_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateStoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateStoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateStoreRequest::MergeFrom(const StateStoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confirmation()) {
      set_confirmation(from.confirmation());
    }
    if (from.has_vote_info()) {
      mutable_vote_info()->::sgxbutil::VoteInfo::MergeFrom(from.vote_info());
    }
    if (from.has_log_store_info()) {
      mutable_log_store_info()->::sgxbutil::LogStoreInfo::MergeFrom(from.log_store_info());
    }
    if (from.has_with_next_log_hash()) {
      set_with_next_log_hash(from.with_next_log_hash());
    }
    if (from.has_next_log_store_info()) {
      mutable_next_log_store_info()->::sgxbutil::LogStoreInfo::MergeFrom(from.next_log_store_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateStoreRequest::CopyFrom(const StateStoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateStoreRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_vote_info()) {
    if (!this->vote_info().IsInitialized()) return false;
  }
  if (has_log_store_info()) {
    if (!this->log_store_info().IsInitialized()) return false;
  }
  if (has_next_log_store_info()) {
    if (!this->next_log_store_info().IsInitialized()) return false;
  }
  return true;
}

void StateStoreRequest::Swap(StateStoreRequest* other) {
  if (other != this) {
    std::swap(confirmation_, other->confirmation_);
    std::swap(vote_info_, other->vote_info_);
    std::swap(log_store_info_, other->log_store_info_);
    std::swap(with_next_log_hash_, other->with_next_log_hash_);
    std::swap(next_log_store_info_, other->next_log_store_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateStoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateStoreRequest_descriptor_;
  metadata.reflection = StateStoreRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestConnectRequest::kNonSenseFieldNumber;
#endif  // !_MSC_VER

TestConnectRequest::TestConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConnectRequest::InitAsDefaultInstance() {
}

TestConnectRequest::TestConnectRequest(const TestConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  non_sense_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConnectRequest::~TestConnectRequest() {
  SharedDtor();
}

void TestConnectRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConnectRequest_descriptor_;
}

const TestConnectRequest& TestConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5frpc_2eproto();  return *default_instance_;
}

TestConnectRequest* TestConnectRequest::default_instance_ = NULL;

TestConnectRequest* TestConnectRequest::New() const {
  return new TestConnectRequest;
}

void TestConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    non_sense_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool non_sense = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &non_sense_)));
          set_has_non_sense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool non_sense = 1;
  if (has_non_sense()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->non_sense(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool non_sense = 1;
  if (has_non_sense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->non_sense(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConnectRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool non_sense = 1;
    if (has_non_sense()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConnectRequest::MergeFrom(const TestConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_non_sense()) {
      set_non_sense(from.non_sense());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConnectRequest::CopyFrom(const TestConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TestConnectRequest::Swap(TestConnectRequest* other) {
  if (other != this) {
    std::swap(non_sense_, other->non_sense_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConnectRequest_descriptor_;
  metadata.reflection = TestConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

StateContService::~StateContService() {}

const ::google::protobuf::ServiceDescriptor* StateContService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateContService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* StateContService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateContService_descriptor_;
}

void StateContService::pre_inc_counter(::google::protobuf::RpcController* controller,
                         const ::sgxbutil::PreIncCounterReq*,
                         ::sgxbutil::PreIncCounterResp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method pre_inc_counter() not implemented.");
  done->Run();
}

void StateContService::confirm_inc_counter(::google::protobuf::RpcController* controller,
                         const ::sgxbutil::PreIncCounterReq*,
                         ::sgxbutil::PreIncCounterResp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method confirm_inc_counter() not implemented.");
  done->Run();
}

void StateContService::store_states(::google::protobuf::RpcController* controller,
                         const ::sgxbutil::StateStoreRequest*,
                         ::sgxbutil::StateContinuityResp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method store_states() not implemented.");
  done->Run();
}

void StateContService::test_connectable(::google::protobuf::RpcController* controller,
                         const ::sgxbutil::TestConnectRequest*,
                         ::sgxbutil::StateContinuityResp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method test_connectable() not implemented.");
  done->Run();
}

void StateContService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), StateContService_descriptor_);
  switch(method->index()) {
    case 0:
      pre_inc_counter(controller,
             ::google::protobuf::down_cast<const ::sgxbutil::PreIncCounterReq*>(request),
             ::google::protobuf::down_cast< ::sgxbutil::PreIncCounterResp*>(response),
             done);
      break;
    case 1:
      confirm_inc_counter(controller,
             ::google::protobuf::down_cast<const ::sgxbutil::PreIncCounterReq*>(request),
             ::google::protobuf::down_cast< ::sgxbutil::PreIncCounterResp*>(response),
             done);
      break;
    case 2:
      store_states(controller,
             ::google::protobuf::down_cast<const ::sgxbutil::StateStoreRequest*>(request),
             ::google::protobuf::down_cast< ::sgxbutil::StateContinuityResp*>(response),
             done);
      break;
    case 3:
      test_connectable(controller,
             ::google::protobuf::down_cast<const ::sgxbutil::TestConnectRequest*>(request),
             ::google::protobuf::down_cast< ::sgxbutil::StateContinuityResp*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& StateContService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sgxbutil::PreIncCounterReq::default_instance();
    case 1:
      return ::sgxbutil::PreIncCounterReq::default_instance();
    case 2:
      return ::sgxbutil::StateStoreRequest::default_instance();
    case 3:
      return ::sgxbutil::TestConnectRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& StateContService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sgxbutil::PreIncCounterResp::default_instance();
    case 1:
      return ::sgxbutil::PreIncCounterResp::default_instance();
    case 2:
      return ::sgxbutil::StateContinuityResp::default_instance();
    case 3:
      return ::sgxbutil::StateContinuityResp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

StateContService_Stub::StateContService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
StateContService_Stub::StateContService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
StateContService_Stub::~StateContService_Stub() {
  if (owns_channel_) delete channel_;
}

void StateContService_Stub::pre_inc_counter(::google::protobuf::RpcController* controller,
                              const ::sgxbutil::PreIncCounterReq* request,
                              ::sgxbutil::PreIncCounterResp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void StateContService_Stub::confirm_inc_counter(::google::protobuf::RpcController* controller,
                              const ::sgxbutil::PreIncCounterReq* request,
                              ::sgxbutil::PreIncCounterResp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void StateContService_Stub::store_states(::google::protobuf::RpcController* controller,
                              const ::sgxbutil::StateStoreRequest* request,
                              ::sgxbutil::StateContinuityResp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void StateContService_Stub::test_connectable(::google::protobuf::RpcController* controller,
                              const ::sgxbutil::TestConnectRequest* request,
                              ::sgxbutil::StateContinuityResp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace sgxbutil

// @@protoc_insertion_point(global_scope)
