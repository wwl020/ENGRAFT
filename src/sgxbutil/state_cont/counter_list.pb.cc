// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sgxbutil/state_cont/counter_list.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sgxbutil {

namespace {

const ::google::protobuf::Descriptor* MonotonicCounter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonotonicCounter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CounterList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounterList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto() {
  protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sgxbutil/state_cont/counter_list.proto");
  GOOGLE_CHECK(file != NULL);
  MonotonicCounter_descriptor_ = file->message_type(0);
  static const int MonotonicCounter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonotonicCounter, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonotonicCounter, value_),
  };
  MonotonicCounter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonotonicCounter_descriptor_,
      MonotonicCounter::default_instance_,
      MonotonicCounter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonotonicCounter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonotonicCounter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonotonicCounter));
  CounterList_descriptor_ = file->message_type(1);
  static const int CounterList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterList, counters_),
  };
  CounterList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CounterList_descriptor_,
      CounterList::default_instance_,
      CounterList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CounterList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonotonicCounter_descriptor_, &MonotonicCounter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CounterList_descriptor_, &CounterList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto() {
  delete MonotonicCounter::default_instance_;
  delete MonotonicCounter_reflection_;
  delete CounterList::default_instance_;
  delete CounterList_reflection_;
}

void protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&sgxbutil/state_cont/counter_list.proto"
    "\022\010sgxbutil\"0\n\020MonotonicCounter\022\r\n\005index\030"
    "\001 \002(\r\022\r\n\005value\030\002 \002(\004\";\n\013CounterList\022,\n\010c"
    "ounters\030\001 \003(\0132\032.sgxbutil.MonotonicCounte"
    "r", 161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sgxbutil/state_cont/counter_list.proto", &protobuf_RegisterTypes);
  MonotonicCounter::default_instance_ = new MonotonicCounter();
  CounterList::default_instance_ = new CounterList();
  MonotonicCounter::default_instance_->InitAsDefaultInstance();
  CounterList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto {
  StaticDescriptorInitializer_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto() {
    protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();
  }
} static_descriptor_initializer_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MonotonicCounter::kIndexFieldNumber;
const int MonotonicCounter::kValueFieldNumber;
#endif  // !_MSC_VER

MonotonicCounter::MonotonicCounter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonotonicCounter::InitAsDefaultInstance() {
}

MonotonicCounter::MonotonicCounter(const MonotonicCounter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonotonicCounter::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonotonicCounter::~MonotonicCounter() {
  SharedDtor();
}

void MonotonicCounter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonotonicCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonotonicCounter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonotonicCounter_descriptor_;
}

const MonotonicCounter& MonotonicCounter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();  return *default_instance_;
}

MonotonicCounter* MonotonicCounter::default_instance_ = NULL;

MonotonicCounter* MonotonicCounter::New() const {
  return new MonotonicCounter;
}

void MonotonicCounter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonotonicCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonotonicCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // required uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonotonicCounter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // required uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonotonicCounter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // required uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonotonicCounter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonotonicCounter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonotonicCounter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonotonicCounter::MergeFrom(const MonotonicCounter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonotonicCounter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonotonicCounter::CopyFrom(const MonotonicCounter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonotonicCounter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MonotonicCounter::Swap(MonotonicCounter* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonotonicCounter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonotonicCounter_descriptor_;
  metadata.reflection = MonotonicCounter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CounterList::kCountersFieldNumber;
#endif  // !_MSC_VER

CounterList::CounterList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CounterList::InitAsDefaultInstance() {
}

CounterList::CounterList(const CounterList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CounterList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterList::~CounterList() {
  SharedDtor();
}

void CounterList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CounterList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterList_descriptor_;
}

const CounterList& CounterList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sgxbutil_2fstate_5fcont_2fcounter_5flist_2eproto();  return *default_instance_;
}

CounterList* CounterList::default_instance_ = NULL;

CounterList* CounterList::New() const {
  return new CounterList;
}

void CounterList::Clear() {
  counters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CounterList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sgxbutil.MonotonicCounter counters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_counters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CounterList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sgxbutil.MonotonicCounter counters = 1;
  for (int i = 0; i < this->counters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->counters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CounterList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sgxbutil.MonotonicCounter counters = 1;
  for (int i = 0; i < this->counters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->counters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CounterList::ByteSize() const {
  int total_size = 0;
  
  // repeated .sgxbutil.MonotonicCounter counters = 1;
  total_size += 1 * this->counters_size();
  for (int i = 0; i < this->counters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CounterList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CounterList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CounterList::MergeFrom(const CounterList& from) {
  GOOGLE_CHECK_NE(&from, this);
  counters_.MergeFrom(from.counters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CounterList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterList::CopyFrom(const CounterList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterList::IsInitialized() const {
  
  for (int i = 0; i < counters_size(); i++) {
    if (!this->counters(i).IsInitialized()) return false;
  }
  return true;
}

void CounterList::Swap(CounterList* other) {
  if (other != this) {
    counters_.Swap(&other->counters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CounterList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounterList_descriptor_;
  metadata.reflection = CounterList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sgxbutil

// @@protoc_insertion_point(global_scope)
