// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "braft/cli.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace braft {

namespace {

const ::google::protobuf::Descriptor* AddPeerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPeerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPeerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPeerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemovePeerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemovePeerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemovePeerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemovePeerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetPeerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetPeerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetPeerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetPeerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLeaderResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* CliService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_braft_2fcli_2eproto() {
  protobuf_AddDesc_braft_2fcli_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "braft/cli.proto");
  GOOGLE_CHECK(file != NULL);
  AddPeerRequest_descriptor_ = file->message_type(0);
  static const int AddPeerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPeerRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPeerRequest, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPeerRequest, peer_id_),
  };
  AddPeerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPeerRequest_descriptor_,
      AddPeerRequest::default_instance_,
      AddPeerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPeerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPeerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPeerRequest));
  AddPeerResponse_descriptor_ = file->message_type(1);
  static const int AddPeerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPeerResponse, old_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPeerResponse, new_peers_),
  };
  AddPeerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPeerResponse_descriptor_,
      AddPeerResponse::default_instance_,
      AddPeerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPeerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPeerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPeerResponse));
  RemovePeerRequest_descriptor_ = file->message_type(2);
  static const int RemovePeerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerRequest, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerRequest, peer_id_),
  };
  RemovePeerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemovePeerRequest_descriptor_,
      RemovePeerRequest::default_instance_,
      RemovePeerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemovePeerRequest));
  RemovePeerResponse_descriptor_ = file->message_type(3);
  static const int RemovePeerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerResponse, old_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerResponse, new_peers_),
  };
  RemovePeerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemovePeerResponse_descriptor_,
      RemovePeerResponse::default_instance_,
      RemovePeerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemovePeerResponse));
  ChangePeersRequest_descriptor_ = file->message_type(4);
  static const int ChangePeersRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeersRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeersRequest, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeersRequest, new_peers_),
  };
  ChangePeersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePeersRequest_descriptor_,
      ChangePeersRequest::default_instance_,
      ChangePeersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePeersRequest));
  ChangePeersResponse_descriptor_ = file->message_type(5);
  static const int ChangePeersResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeersResponse, old_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeersResponse, new_peers_),
  };
  ChangePeersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePeersResponse_descriptor_,
      ChangePeersResponse::default_instance_,
      ChangePeersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePeersResponse));
  SnapshotRequest_descriptor_ = file->message_type(6);
  static const int SnapshotRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRequest, peer_id_),
  };
  SnapshotRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotRequest_descriptor_,
      SnapshotRequest::default_instance_,
      SnapshotRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotRequest));
  ResetPeerRequest_descriptor_ = file->message_type(7);
  static const int ResetPeerRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPeerRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPeerRequest, peer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPeerRequest, old_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPeerRequest, new_peers_),
  };
  ResetPeerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetPeerRequest_descriptor_,
      ResetPeerRequest::default_instance_,
      ResetPeerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPeerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPeerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetPeerRequest));
  TransferLeaderRequest_descriptor_ = file->message_type(8);
  static const int TransferLeaderRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, peer_id_),
  };
  TransferLeaderRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferLeaderRequest_descriptor_,
      TransferLeaderRequest::default_instance_,
      TransferLeaderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferLeaderRequest));
  TransferLeaderResponse_descriptor_ = file->message_type(9);
  static const int TransferLeaderResponse_offsets_[1] = {
  };
  TransferLeaderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferLeaderResponse_descriptor_,
      TransferLeaderResponse::default_instance_,
      TransferLeaderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferLeaderResponse));
  ResetPeerResponse_descriptor_ = file->message_type(10);
  static const int ResetPeerResponse_offsets_[1] = {
  };
  ResetPeerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetPeerResponse_descriptor_,
      ResetPeerResponse::default_instance_,
      ResetPeerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPeerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPeerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetPeerResponse));
  SnapshotResponse_descriptor_ = file->message_type(11);
  static const int SnapshotResponse_offsets_[1] = {
  };
  SnapshotResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotResponse_descriptor_,
      SnapshotResponse::default_instance_,
      SnapshotResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotResponse));
  GetLeaderRequest_descriptor_ = file->message_type(12);
  static const int GetLeaderRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaderRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaderRequest, peer_id_),
  };
  GetLeaderRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLeaderRequest_descriptor_,
      GetLeaderRequest::default_instance_,
      GetLeaderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaderRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaderRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLeaderRequest));
  GetLeaderResponse_descriptor_ = file->message_type(13);
  static const int GetLeaderResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaderResponse, leader_id_),
  };
  GetLeaderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLeaderResponse_descriptor_,
      GetLeaderResponse::default_instance_,
      GetLeaderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLeaderResponse));
  CliService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_braft_2fcli_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPeerRequest_descriptor_, &AddPeerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPeerResponse_descriptor_, &AddPeerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemovePeerRequest_descriptor_, &RemovePeerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemovePeerResponse_descriptor_, &RemovePeerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePeersRequest_descriptor_, &ChangePeersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePeersResponse_descriptor_, &ChangePeersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotRequest_descriptor_, &SnapshotRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetPeerRequest_descriptor_, &ResetPeerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferLeaderRequest_descriptor_, &TransferLeaderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferLeaderResponse_descriptor_, &TransferLeaderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetPeerResponse_descriptor_, &ResetPeerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotResponse_descriptor_, &SnapshotResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLeaderRequest_descriptor_, &GetLeaderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLeaderResponse_descriptor_, &GetLeaderResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_braft_2fcli_2eproto() {
  delete AddPeerRequest::default_instance_;
  delete AddPeerRequest_reflection_;
  delete AddPeerResponse::default_instance_;
  delete AddPeerResponse_reflection_;
  delete RemovePeerRequest::default_instance_;
  delete RemovePeerRequest_reflection_;
  delete RemovePeerResponse::default_instance_;
  delete RemovePeerResponse_reflection_;
  delete ChangePeersRequest::default_instance_;
  delete ChangePeersRequest_reflection_;
  delete ChangePeersResponse::default_instance_;
  delete ChangePeersResponse_reflection_;
  delete SnapshotRequest::default_instance_;
  delete SnapshotRequest_reflection_;
  delete ResetPeerRequest::default_instance_;
  delete ResetPeerRequest_reflection_;
  delete TransferLeaderRequest::default_instance_;
  delete TransferLeaderRequest_reflection_;
  delete TransferLeaderResponse::default_instance_;
  delete TransferLeaderResponse_reflection_;
  delete ResetPeerResponse::default_instance_;
  delete ResetPeerResponse_reflection_;
  delete SnapshotResponse::default_instance_;
  delete SnapshotResponse_reflection_;
  delete GetLeaderRequest::default_instance_;
  delete GetLeaderRequest_reflection_;
  delete GetLeaderResponse::default_instance_;
  delete GetLeaderResponse_reflection_;
}

void protobuf_AddDesc_braft_2fcli_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017braft/cli.proto\022\005braft\"F\n\016AddPeerReque"
    "st\022\020\n\010group_id\030\001 \002(\t\022\021\n\tleader_id\030\002 \002(\t\022"
    "\017\n\007peer_id\030\003 \002(\t\"7\n\017AddPeerResponse\022\021\n\to"
    "ld_peers\030\001 \003(\t\022\021\n\tnew_peers\030\002 \003(\t\"I\n\021Rem"
    "ovePeerRequest\022\020\n\010group_id\030\001 \002(\t\022\021\n\tlead"
    "er_id\030\002 \002(\t\022\017\n\007peer_id\030\003 \002(\t\":\n\022RemovePe"
    "erResponse\022\021\n\told_peers\030\001 \003(\t\022\021\n\tnew_pee"
    "rs\030\002 \003(\t\"L\n\022ChangePeersRequest\022\020\n\010group_"
    "id\030\001 \002(\t\022\021\n\tleader_id\030\002 \002(\t\022\021\n\tnew_peers"
    "\030\003 \003(\t\";\n\023ChangePeersResponse\022\021\n\told_pee"
    "rs\030\001 \003(\t\022\021\n\tnew_peers\030\002 \003(\t\"4\n\017SnapshotR"
    "equest\022\020\n\010group_id\030\001 \002(\t\022\017\n\007peer_id\030\002 \001("
    "\t\"[\n\020ResetPeerRequest\022\020\n\010group_id\030\001 \002(\t\022"
    "\017\n\007peer_id\030\002 \002(\t\022\021\n\told_peers\030\003 \003(\t\022\021\n\tn"
    "ew_peers\030\004 \003(\t\"M\n\025TransferLeaderRequest\022"
    "\020\n\010group_id\030\001 \002(\t\022\021\n\tleader_id\030\002 \002(\t\022\017\n\007"
    "peer_id\030\003 \001(\t\"\030\n\026TransferLeaderResponse\""
    "\023\n\021ResetPeerResponse\"\022\n\020SnapshotResponse"
    "\"5\n\020GetLeaderRequest\022\020\n\010group_id\030\001 \002(\t\022\017"
    "\n\007peer_id\030\002 \001(\t\"&\n\021GetLeaderResponse\022\021\n\t"
    "leader_id\030\001 \002(\t2\341\003\n\nCliService\0229\n\010add_pe"
    "er\022\025.braft.AddPeerRequest\032\026.braft.AddPee"
    "rResponse\022B\n\013remove_peer\022\030.braft.RemoveP"
    "eerRequest\032\031.braft.RemovePeerResponse\022E\n"
    "\014change_peers\022\031.braft.ChangePeersRequest"
    "\032\032.braft.ChangePeersResponse\022\?\n\nreset_pe"
    "er\022\027.braft.ResetPeerRequest\032\030.braft.Rese"
    "tPeerResponse\022;\n\010snapshot\022\026.braft.Snapsh"
    "otRequest\032\027.braft.SnapshotResponse\022\?\n\nge"
    "t_leader\022\027.braft.GetLeaderRequest\032\030.braf"
    "t.GetLeaderResponse\022N\n\017transfer_leader\022\034"
    ".braft.TransferLeaderRequest\032\035.braft.Tra"
    "nsferLeaderResponseB\003\200\001\001", 1304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "braft/cli.proto", &protobuf_RegisterTypes);
  AddPeerRequest::default_instance_ = new AddPeerRequest();
  AddPeerResponse::default_instance_ = new AddPeerResponse();
  RemovePeerRequest::default_instance_ = new RemovePeerRequest();
  RemovePeerResponse::default_instance_ = new RemovePeerResponse();
  ChangePeersRequest::default_instance_ = new ChangePeersRequest();
  ChangePeersResponse::default_instance_ = new ChangePeersResponse();
  SnapshotRequest::default_instance_ = new SnapshotRequest();
  ResetPeerRequest::default_instance_ = new ResetPeerRequest();
  TransferLeaderRequest::default_instance_ = new TransferLeaderRequest();
  TransferLeaderResponse::default_instance_ = new TransferLeaderResponse();
  ResetPeerResponse::default_instance_ = new ResetPeerResponse();
  SnapshotResponse::default_instance_ = new SnapshotResponse();
  GetLeaderRequest::default_instance_ = new GetLeaderRequest();
  GetLeaderResponse::default_instance_ = new GetLeaderResponse();
  AddPeerRequest::default_instance_->InitAsDefaultInstance();
  AddPeerResponse::default_instance_->InitAsDefaultInstance();
  RemovePeerRequest::default_instance_->InitAsDefaultInstance();
  RemovePeerResponse::default_instance_->InitAsDefaultInstance();
  ChangePeersRequest::default_instance_->InitAsDefaultInstance();
  ChangePeersResponse::default_instance_->InitAsDefaultInstance();
  SnapshotRequest::default_instance_->InitAsDefaultInstance();
  ResetPeerRequest::default_instance_->InitAsDefaultInstance();
  TransferLeaderRequest::default_instance_->InitAsDefaultInstance();
  TransferLeaderResponse::default_instance_->InitAsDefaultInstance();
  ResetPeerResponse::default_instance_->InitAsDefaultInstance();
  SnapshotResponse::default_instance_->InitAsDefaultInstance();
  GetLeaderRequest::default_instance_->InitAsDefaultInstance();
  GetLeaderResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_braft_2fcli_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_braft_2fcli_2eproto {
  StaticDescriptorInitializer_braft_2fcli_2eproto() {
    protobuf_AddDesc_braft_2fcli_2eproto();
  }
} static_descriptor_initializer_braft_2fcli_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AddPeerRequest::kGroupIdFieldNumber;
const int AddPeerRequest::kLeaderIdFieldNumber;
const int AddPeerRequest::kPeerIdFieldNumber;
#endif  // !_MSC_VER

AddPeerRequest::AddPeerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPeerRequest::InitAsDefaultInstance() {
}

AddPeerRequest::AddPeerRequest(const AddPeerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPeerRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPeerRequest::~AddPeerRequest() {
  SharedDtor();
}

void AddPeerRequest::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_id_;
  }
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_id_;
  }
  if (this != default_instance_) {
  }
}

void AddPeerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPeerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPeerRequest_descriptor_;
}

const AddPeerRequest& AddPeerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

AddPeerRequest* AddPeerRequest::default_instance_ = NULL;

AddPeerRequest* AddPeerRequest::New() const {
  return new AddPeerRequest;
}

void AddPeerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    if (has_leader_id()) {
      if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
        leader_id_->clear();
      }
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
        peer_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }
      
      // required string leader_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_peer_id;
        break;
      }
      
      // required string peer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_id(), output);
  }
  
  // required string leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leader_id(), output);
  }
  
  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peer_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPeerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }
  
  // required string leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }
  
  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPeerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }
    
    // required string leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_id());
    }
    
    // required string peer_id = 3;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPeerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPeerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPeerRequest::MergeFrom(const AddPeerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPeerRequest::CopyFrom(const AddPeerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AddPeerRequest::Swap(AddPeerRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPeerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPeerRequest_descriptor_;
  metadata.reflection = AddPeerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddPeerResponse::kOldPeersFieldNumber;
const int AddPeerResponse::kNewPeersFieldNumber;
#endif  // !_MSC_VER

AddPeerResponse::AddPeerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPeerResponse::InitAsDefaultInstance() {
}

AddPeerResponse::AddPeerResponse(const AddPeerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPeerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPeerResponse::~AddPeerResponse() {
  SharedDtor();
}

void AddPeerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPeerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPeerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPeerResponse_descriptor_;
}

const AddPeerResponse& AddPeerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

AddPeerResponse* AddPeerResponse::default_instance_ = NULL;

AddPeerResponse* AddPeerResponse::New() const {
  return new AddPeerResponse;
}

void AddPeerResponse::Clear() {
  old_peers_.Clear();
  new_peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string old_peers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_peers(0).data(), this->old_peers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_old_peers;
        if (input->ExpectTag(18)) goto parse_new_peers;
        break;
      }
      
      // repeated string new_peers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_peers(0).data(), this->new_peers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_peers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string old_peers = 1;
  for (int i = 0; i < this->old_peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->old_peers(i).data(), this->old_peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->old_peers(i), output);
  }
  
  // repeated string new_peers = 2;
  for (int i = 0; i < this->new_peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->new_peers(i).data(), this->new_peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_peers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPeerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string old_peers = 1;
  for (int i = 0; i < this->old_peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_peers(i).data(), this->old_peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->old_peers(i), target);
  }
  
  // repeated string new_peers = 2;
  for (int i = 0; i < this->new_peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_peers(i).data(), this->new_peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->new_peers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPeerResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated string old_peers = 1;
  total_size += 1 * this->old_peers_size();
  for (int i = 0; i < this->old_peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }
  
  // repeated string new_peers = 2;
  total_size += 1 * this->new_peers_size();
  for (int i = 0; i < this->new_peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_peers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPeerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPeerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPeerResponse::MergeFrom(const AddPeerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  old_peers_.MergeFrom(from.old_peers_);
  new_peers_.MergeFrom(from.new_peers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPeerResponse::CopyFrom(const AddPeerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerResponse::IsInitialized() const {
  
  return true;
}

void AddPeerResponse::Swap(AddPeerResponse* other) {
  if (other != this) {
    old_peers_.Swap(&other->old_peers_);
    new_peers_.Swap(&other->new_peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPeerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPeerResponse_descriptor_;
  metadata.reflection = AddPeerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemovePeerRequest::kGroupIdFieldNumber;
const int RemovePeerRequest::kLeaderIdFieldNumber;
const int RemovePeerRequest::kPeerIdFieldNumber;
#endif  // !_MSC_VER

RemovePeerRequest::RemovePeerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemovePeerRequest::InitAsDefaultInstance() {
}

RemovePeerRequest::RemovePeerRequest(const RemovePeerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemovePeerRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemovePeerRequest::~RemovePeerRequest() {
  SharedDtor();
}

void RemovePeerRequest::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_id_;
  }
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_id_;
  }
  if (this != default_instance_) {
  }
}

void RemovePeerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemovePeerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemovePeerRequest_descriptor_;
}

const RemovePeerRequest& RemovePeerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

RemovePeerRequest* RemovePeerRequest::default_instance_ = NULL;

RemovePeerRequest* RemovePeerRequest::New() const {
  return new RemovePeerRequest;
}

void RemovePeerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    if (has_leader_id()) {
      if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
        leader_id_->clear();
      }
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
        peer_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemovePeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }
      
      // required string leader_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_peer_id;
        break;
      }
      
      // required string peer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemovePeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_id(), output);
  }
  
  // required string leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leader_id(), output);
  }
  
  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peer_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemovePeerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }
  
  // required string leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }
  
  // required string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemovePeerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }
    
    // required string leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_id());
    }
    
    // required string peer_id = 3;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovePeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemovePeerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemovePeerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemovePeerRequest::MergeFrom(const RemovePeerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemovePeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePeerRequest::CopyFrom(const RemovePeerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePeerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RemovePeerRequest::Swap(RemovePeerRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemovePeerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemovePeerRequest_descriptor_;
  metadata.reflection = RemovePeerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemovePeerResponse::kOldPeersFieldNumber;
const int RemovePeerResponse::kNewPeersFieldNumber;
#endif  // !_MSC_VER

RemovePeerResponse::RemovePeerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemovePeerResponse::InitAsDefaultInstance() {
}

RemovePeerResponse::RemovePeerResponse(const RemovePeerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemovePeerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemovePeerResponse::~RemovePeerResponse() {
  SharedDtor();
}

void RemovePeerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemovePeerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemovePeerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemovePeerResponse_descriptor_;
}

const RemovePeerResponse& RemovePeerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

RemovePeerResponse* RemovePeerResponse::default_instance_ = NULL;

RemovePeerResponse* RemovePeerResponse::New() const {
  return new RemovePeerResponse;
}

void RemovePeerResponse::Clear() {
  old_peers_.Clear();
  new_peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemovePeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string old_peers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_peers(0).data(), this->old_peers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_old_peers;
        if (input->ExpectTag(18)) goto parse_new_peers;
        break;
      }
      
      // repeated string new_peers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_peers(0).data(), this->new_peers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_peers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemovePeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string old_peers = 1;
  for (int i = 0; i < this->old_peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->old_peers(i).data(), this->old_peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->old_peers(i), output);
  }
  
  // repeated string new_peers = 2;
  for (int i = 0; i < this->new_peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->new_peers(i).data(), this->new_peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_peers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemovePeerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string old_peers = 1;
  for (int i = 0; i < this->old_peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_peers(i).data(), this->old_peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->old_peers(i), target);
  }
  
  // repeated string new_peers = 2;
  for (int i = 0; i < this->new_peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_peers(i).data(), this->new_peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->new_peers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemovePeerResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated string old_peers = 1;
  total_size += 1 * this->old_peers_size();
  for (int i = 0; i < this->old_peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }
  
  // repeated string new_peers = 2;
  total_size += 1 * this->new_peers_size();
  for (int i = 0; i < this->new_peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_peers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovePeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemovePeerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemovePeerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemovePeerResponse::MergeFrom(const RemovePeerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  old_peers_.MergeFrom(from.old_peers_);
  new_peers_.MergeFrom(from.new_peers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemovePeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePeerResponse::CopyFrom(const RemovePeerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePeerResponse::IsInitialized() const {
  
  return true;
}

void RemovePeerResponse::Swap(RemovePeerResponse* other) {
  if (other != this) {
    old_peers_.Swap(&other->old_peers_);
    new_peers_.Swap(&other->new_peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemovePeerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemovePeerResponse_descriptor_;
  metadata.reflection = RemovePeerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePeersRequest::kGroupIdFieldNumber;
const int ChangePeersRequest::kLeaderIdFieldNumber;
const int ChangePeersRequest::kNewPeersFieldNumber;
#endif  // !_MSC_VER

ChangePeersRequest::ChangePeersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangePeersRequest::InitAsDefaultInstance() {
}

ChangePeersRequest::ChangePeersRequest(const ChangePeersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePeersRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePeersRequest::~ChangePeersRequest() {
  SharedDtor();
}

void ChangePeersRequest::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_id_;
  }
  if (this != default_instance_) {
  }
}

void ChangePeersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeersRequest_descriptor_;
}

const ChangePeersRequest& ChangePeersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

ChangePeersRequest* ChangePeersRequest::default_instance_ = NULL;

ChangePeersRequest* ChangePeersRequest::New() const {
  return new ChangePeersRequest;
}

void ChangePeersRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    if (has_leader_id()) {
      if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
        leader_id_->clear();
      }
    }
  }
  new_peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePeersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }
      
      // required string leader_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_peers;
        break;
      }
      
      // repeated string new_peers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_peers(0).data(), this->new_peers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_peers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePeersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_id(), output);
  }
  
  // required string leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leader_id(), output);
  }
  
  // repeated string new_peers = 3;
  for (int i = 0; i < this->new_peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->new_peers(i).data(), this->new_peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_peers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangePeersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }
  
  // required string leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }
  
  // repeated string new_peers = 3;
  for (int i = 0; i < this->new_peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_peers(i).data(), this->new_peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->new_peers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangePeersRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }
    
    // required string leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_id());
    }
    
  }
  // repeated string new_peers = 3;
  total_size += 1 * this->new_peers_size();
  for (int i = 0; i < this->new_peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_peers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePeersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePeersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePeersRequest::MergeFrom(const ChangePeersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_peers_.MergeFrom(from.new_peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePeersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeersRequest::CopyFrom(const ChangePeersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeersRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ChangePeersRequest::Swap(ChangePeersRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(leader_id_, other->leader_id_);
    new_peers_.Swap(&other->new_peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePeersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeersRequest_descriptor_;
  metadata.reflection = ChangePeersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePeersResponse::kOldPeersFieldNumber;
const int ChangePeersResponse::kNewPeersFieldNumber;
#endif  // !_MSC_VER

ChangePeersResponse::ChangePeersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangePeersResponse::InitAsDefaultInstance() {
}

ChangePeersResponse::ChangePeersResponse(const ChangePeersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangePeersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePeersResponse::~ChangePeersResponse() {
  SharedDtor();
}

void ChangePeersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangePeersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeersResponse_descriptor_;
}

const ChangePeersResponse& ChangePeersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

ChangePeersResponse* ChangePeersResponse::default_instance_ = NULL;

ChangePeersResponse* ChangePeersResponse::New() const {
  return new ChangePeersResponse;
}

void ChangePeersResponse::Clear() {
  old_peers_.Clear();
  new_peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePeersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string old_peers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_peers(0).data(), this->old_peers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_old_peers;
        if (input->ExpectTag(18)) goto parse_new_peers;
        break;
      }
      
      // repeated string new_peers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_peers(0).data(), this->new_peers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_peers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangePeersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string old_peers = 1;
  for (int i = 0; i < this->old_peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->old_peers(i).data(), this->old_peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->old_peers(i), output);
  }
  
  // repeated string new_peers = 2;
  for (int i = 0; i < this->new_peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->new_peers(i).data(), this->new_peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_peers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangePeersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string old_peers = 1;
  for (int i = 0; i < this->old_peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_peers(i).data(), this->old_peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->old_peers(i), target);
  }
  
  // repeated string new_peers = 2;
  for (int i = 0; i < this->new_peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_peers(i).data(), this->new_peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->new_peers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangePeersResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated string old_peers = 1;
  total_size += 1 * this->old_peers_size();
  for (int i = 0; i < this->old_peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }
  
  // repeated string new_peers = 2;
  total_size += 1 * this->new_peers_size();
  for (int i = 0; i < this->new_peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_peers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePeersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePeersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePeersResponse::MergeFrom(const ChangePeersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  old_peers_.MergeFrom(from.old_peers_);
  new_peers_.MergeFrom(from.new_peers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePeersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeersResponse::CopyFrom(const ChangePeersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeersResponse::IsInitialized() const {
  
  return true;
}

void ChangePeersResponse::Swap(ChangePeersResponse* other) {
  if (other != this) {
    old_peers_.Swap(&other->old_peers_);
    new_peers_.Swap(&other->new_peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePeersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeersResponse_descriptor_;
  metadata.reflection = ChangePeersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapshotRequest::kGroupIdFieldNumber;
const int SnapshotRequest::kPeerIdFieldNumber;
#endif  // !_MSC_VER

SnapshotRequest::SnapshotRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapshotRequest::InitAsDefaultInstance() {
}

SnapshotRequest::SnapshotRequest(const SnapshotRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapshotRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotRequest::~SnapshotRequest() {
  SharedDtor();
}

void SnapshotRequest::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_id_;
  }
  if (this != default_instance_) {
  }
}

void SnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotRequest_descriptor_;
}

const SnapshotRequest& SnapshotRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

SnapshotRequest* SnapshotRequest::default_instance_ = NULL;

SnapshotRequest* SnapshotRequest::New() const {
  return new SnapshotRequest;
}

void SnapshotRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
        peer_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peer_id;
        break;
      }
      
      // optional string peer_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_id(), output);
  }
  
  // optional string peer_id = 2;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->peer_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapshotRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }
  
  // optional string peer_id = 2;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->peer_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapshotRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }
    
    // optional string peer_id = 2;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotRequest::MergeFrom(const SnapshotRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRequest::CopyFrom(const SnapshotRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SnapshotRequest::Swap(SnapshotRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotRequest_descriptor_;
  metadata.reflection = SnapshotRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetPeerRequest::kGroupIdFieldNumber;
const int ResetPeerRequest::kPeerIdFieldNumber;
const int ResetPeerRequest::kOldPeersFieldNumber;
const int ResetPeerRequest::kNewPeersFieldNumber;
#endif  // !_MSC_VER

ResetPeerRequest::ResetPeerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResetPeerRequest::InitAsDefaultInstance() {
}

ResetPeerRequest::ResetPeerRequest(const ResetPeerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResetPeerRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetPeerRequest::~ResetPeerRequest() {
  SharedDtor();
}

void ResetPeerRequest::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_id_;
  }
  if (this != default_instance_) {
  }
}

void ResetPeerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetPeerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetPeerRequest_descriptor_;
}

const ResetPeerRequest& ResetPeerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

ResetPeerRequest* ResetPeerRequest::default_instance_ = NULL;

ResetPeerRequest* ResetPeerRequest::New() const {
  return new ResetPeerRequest;
}

void ResetPeerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
        peer_id_->clear();
      }
    }
  }
  old_peers_.Clear();
  new_peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetPeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peer_id;
        break;
      }
      
      // required string peer_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_peers;
        break;
      }
      
      // repeated string old_peers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_peers(0).data(), this->old_peers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_peers;
        if (input->ExpectTag(34)) goto parse_new_peers;
        break;
      }
      
      // repeated string new_peers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_peers(0).data(), this->new_peers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_peers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResetPeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_id(), output);
  }
  
  // required string peer_id = 2;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->peer_id(), output);
  }
  
  // repeated string old_peers = 3;
  for (int i = 0; i < this->old_peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->old_peers(i).data(), this->old_peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->old_peers(i), output);
  }
  
  // repeated string new_peers = 4;
  for (int i = 0; i < this->new_peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->new_peers(i).data(), this->new_peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_peers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResetPeerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }
  
  // required string peer_id = 2;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->peer_id(), target);
  }
  
  // repeated string old_peers = 3;
  for (int i = 0; i < this->old_peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_peers(i).data(), this->old_peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->old_peers(i), target);
  }
  
  // repeated string new_peers = 4;
  for (int i = 0; i < this->new_peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_peers(i).data(), this->new_peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->new_peers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResetPeerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }
    
    // required string peer_id = 2;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }
    
  }
  // repeated string old_peers = 3;
  total_size += 1 * this->old_peers_size();
  for (int i = 0; i < this->old_peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }
  
  // repeated string new_peers = 4;
  total_size += 1 * this->new_peers_size();
  for (int i = 0; i < this->new_peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_peers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetPeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetPeerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetPeerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetPeerRequest::MergeFrom(const ResetPeerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  old_peers_.MergeFrom(from.old_peers_);
  new_peers_.MergeFrom(from.new_peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetPeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPeerRequest::CopyFrom(const ResetPeerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPeerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ResetPeerRequest::Swap(ResetPeerRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(peer_id_, other->peer_id_);
    old_peers_.Swap(&other->old_peers_);
    new_peers_.Swap(&other->new_peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetPeerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetPeerRequest_descriptor_;
  metadata.reflection = ResetPeerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferLeaderRequest::kGroupIdFieldNumber;
const int TransferLeaderRequest::kLeaderIdFieldNumber;
const int TransferLeaderRequest::kPeerIdFieldNumber;
#endif  // !_MSC_VER

TransferLeaderRequest::TransferLeaderRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferLeaderRequest::InitAsDefaultInstance() {
}

TransferLeaderRequest::TransferLeaderRequest(const TransferLeaderRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferLeaderRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferLeaderRequest::~TransferLeaderRequest() {
  SharedDtor();
}

void TransferLeaderRequest::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_id_;
  }
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_id_;
  }
  if (this != default_instance_) {
  }
}

void TransferLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderRequest_descriptor_;
}

const TransferLeaderRequest& TransferLeaderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

TransferLeaderRequest* TransferLeaderRequest::default_instance_ = NULL;

TransferLeaderRequest* TransferLeaderRequest::New() const {
  return new TransferLeaderRequest;
}

void TransferLeaderRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    if (has_leader_id()) {
      if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
        leader_id_->clear();
      }
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
        peer_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }
      
      // required string leader_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_peer_id;
        break;
      }
      
      // optional string peer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_id(), output);
  }
  
  // required string leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leader_id(), output);
  }
  
  // optional string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peer_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferLeaderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }
  
  // required string leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }
  
  // optional string peer_id = 3;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferLeaderRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }
    
    // required string leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_id());
    }
    
    // optional string peer_id = 3;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferLeaderRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferLeaderRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferLeaderRequest::MergeFrom(const TransferLeaderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderRequest::CopyFrom(const TransferLeaderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TransferLeaderRequest::Swap(TransferLeaderRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferLeaderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderRequest_descriptor_;
  metadata.reflection = TransferLeaderRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TransferLeaderResponse::TransferLeaderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferLeaderResponse::InitAsDefaultInstance() {
}

TransferLeaderResponse::TransferLeaderResponse(const TransferLeaderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferLeaderResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferLeaderResponse::~TransferLeaderResponse() {
  SharedDtor();
}

void TransferLeaderResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderResponse_descriptor_;
}

const TransferLeaderResponse& TransferLeaderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

TransferLeaderResponse* TransferLeaderResponse::default_instance_ = NULL;

TransferLeaderResponse* TransferLeaderResponse::New() const {
  return new TransferLeaderResponse;
}

void TransferLeaderResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TransferLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferLeaderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferLeaderResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferLeaderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferLeaderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferLeaderResponse::MergeFrom(const TransferLeaderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderResponse::CopyFrom(const TransferLeaderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderResponse::IsInitialized() const {
  
  return true;
}

void TransferLeaderResponse::Swap(TransferLeaderResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferLeaderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderResponse_descriptor_;
  metadata.reflection = TransferLeaderResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResetPeerResponse::ResetPeerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResetPeerResponse::InitAsDefaultInstance() {
}

ResetPeerResponse::ResetPeerResponse(const ResetPeerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResetPeerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetPeerResponse::~ResetPeerResponse() {
  SharedDtor();
}

void ResetPeerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetPeerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetPeerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetPeerResponse_descriptor_;
}

const ResetPeerResponse& ResetPeerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

ResetPeerResponse* ResetPeerResponse::default_instance_ = NULL;

ResetPeerResponse* ResetPeerResponse::New() const {
  return new ResetPeerResponse;
}

void ResetPeerResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetPeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ResetPeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResetPeerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResetPeerResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetPeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetPeerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetPeerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetPeerResponse::MergeFrom(const ResetPeerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetPeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPeerResponse::CopyFrom(const ResetPeerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPeerResponse::IsInitialized() const {
  
  return true;
}

void ResetPeerResponse::Swap(ResetPeerResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetPeerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetPeerResponse_descriptor_;
  metadata.reflection = ResetPeerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SnapshotResponse::SnapshotResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapshotResponse::InitAsDefaultInstance() {
}

SnapshotResponse::SnapshotResponse(const SnapshotResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapshotResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotResponse::~SnapshotResponse() {
  SharedDtor();
}

void SnapshotResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotResponse_descriptor_;
}

const SnapshotResponse& SnapshotResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

SnapshotResponse* SnapshotResponse::default_instance_ = NULL;

SnapshotResponse* SnapshotResponse::New() const {
  return new SnapshotResponse;
}

void SnapshotResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SnapshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapshotResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapshotResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotResponse::MergeFrom(const SnapshotResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotResponse::CopyFrom(const SnapshotResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotResponse::IsInitialized() const {
  
  return true;
}

void SnapshotResponse::Swap(SnapshotResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotResponse_descriptor_;
  metadata.reflection = SnapshotResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLeaderRequest::kGroupIdFieldNumber;
const int GetLeaderRequest::kPeerIdFieldNumber;
#endif  // !_MSC_VER

GetLeaderRequest::GetLeaderRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLeaderRequest::InitAsDefaultInstance() {
}

GetLeaderRequest::GetLeaderRequest(const GetLeaderRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLeaderRequest::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLeaderRequest::~GetLeaderRequest() {
  SharedDtor();
}

void GetLeaderRequest::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_id_;
  }
  if (this != default_instance_) {
  }
}

void GetLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLeaderRequest_descriptor_;
}

const GetLeaderRequest& GetLeaderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

GetLeaderRequest* GetLeaderRequest::default_instance_ = NULL;

GetLeaderRequest* GetLeaderRequest::New() const {
  return new GetLeaderRequest;
}

void GetLeaderRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
        peer_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peer_id;
        break;
      }
      
      // optional string peer_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_id(), output);
  }
  
  // optional string peer_id = 2;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->peer_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLeaderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }
  
  // optional string peer_id = 2;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->peer_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLeaderRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }
    
    // optional string peer_id = 2;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLeaderRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLeaderRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLeaderRequest::MergeFrom(const GetLeaderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLeaderRequest::CopyFrom(const GetLeaderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaderRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetLeaderRequest::Swap(GetLeaderRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLeaderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLeaderRequest_descriptor_;
  metadata.reflection = GetLeaderRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLeaderResponse::kLeaderIdFieldNumber;
#endif  // !_MSC_VER

GetLeaderResponse::GetLeaderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLeaderResponse::InitAsDefaultInstance() {
}

GetLeaderResponse::GetLeaderResponse(const GetLeaderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLeaderResponse::SharedCtor() {
  _cached_size_ = 0;
  leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLeaderResponse::~GetLeaderResponse() {
  SharedDtor();
}

void GetLeaderResponse::SharedDtor() {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_id_;
  }
  if (this != default_instance_) {
  }
}

void GetLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLeaderResponse_descriptor_;
}

const GetLeaderResponse& GetLeaderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fcli_2eproto();  return *default_instance_;
}

GetLeaderResponse* GetLeaderResponse::default_instance_ = NULL;

GetLeaderResponse* GetLeaderResponse::New() const {
  return new GetLeaderResponse;
}

void GetLeaderResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_leader_id()) {
      if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
        leader_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string leader_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string leader_id = 1;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->leader_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLeaderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string leader_id = 1;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leader_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLeaderResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string leader_id = 1;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLeaderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLeaderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLeaderResponse::MergeFrom(const GetLeaderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLeaderResponse::CopyFrom(const GetLeaderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaderResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetLeaderResponse::Swap(GetLeaderResponse* other) {
  if (other != this) {
    std::swap(leader_id_, other->leader_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLeaderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLeaderResponse_descriptor_;
  metadata.reflection = GetLeaderResponse_reflection_;
  return metadata;
}


// ===================================================================

CliService::~CliService() {}

const ::google::protobuf::ServiceDescriptor* CliService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CliService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* CliService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return CliService_descriptor_;
}

void CliService::add_peer(::google::protobuf::RpcController* controller,
                         const ::braft::AddPeerRequest*,
                         ::braft::AddPeerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method add_peer() not implemented.");
  done->Run();
}

void CliService::remove_peer(::google::protobuf::RpcController* controller,
                         const ::braft::RemovePeerRequest*,
                         ::braft::RemovePeerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method remove_peer() not implemented.");
  done->Run();
}

void CliService::change_peers(::google::protobuf::RpcController* controller,
                         const ::braft::ChangePeersRequest*,
                         ::braft::ChangePeersResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method change_peers() not implemented.");
  done->Run();
}

void CliService::reset_peer(::google::protobuf::RpcController* controller,
                         const ::braft::ResetPeerRequest*,
                         ::braft::ResetPeerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method reset_peer() not implemented.");
  done->Run();
}

void CliService::snapshot(::google::protobuf::RpcController* controller,
                         const ::braft::SnapshotRequest*,
                         ::braft::SnapshotResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method snapshot() not implemented.");
  done->Run();
}

void CliService::get_leader(::google::protobuf::RpcController* controller,
                         const ::braft::GetLeaderRequest*,
                         ::braft::GetLeaderResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method get_leader() not implemented.");
  done->Run();
}

void CliService::transfer_leader(::google::protobuf::RpcController* controller,
                         const ::braft::TransferLeaderRequest*,
                         ::braft::TransferLeaderResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method transfer_leader() not implemented.");
  done->Run();
}

void CliService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), CliService_descriptor_);
  switch(method->index()) {
    case 0:
      add_peer(controller,
             ::google::protobuf::down_cast<const ::braft::AddPeerRequest*>(request),
             ::google::protobuf::down_cast< ::braft::AddPeerResponse*>(response),
             done);
      break;
    case 1:
      remove_peer(controller,
             ::google::protobuf::down_cast<const ::braft::RemovePeerRequest*>(request),
             ::google::protobuf::down_cast< ::braft::RemovePeerResponse*>(response),
             done);
      break;
    case 2:
      change_peers(controller,
             ::google::protobuf::down_cast<const ::braft::ChangePeersRequest*>(request),
             ::google::protobuf::down_cast< ::braft::ChangePeersResponse*>(response),
             done);
      break;
    case 3:
      reset_peer(controller,
             ::google::protobuf::down_cast<const ::braft::ResetPeerRequest*>(request),
             ::google::protobuf::down_cast< ::braft::ResetPeerResponse*>(response),
             done);
      break;
    case 4:
      snapshot(controller,
             ::google::protobuf::down_cast<const ::braft::SnapshotRequest*>(request),
             ::google::protobuf::down_cast< ::braft::SnapshotResponse*>(response),
             done);
      break;
    case 5:
      get_leader(controller,
             ::google::protobuf::down_cast<const ::braft::GetLeaderRequest*>(request),
             ::google::protobuf::down_cast< ::braft::GetLeaderResponse*>(response),
             done);
      break;
    case 6:
      transfer_leader(controller,
             ::google::protobuf::down_cast<const ::braft::TransferLeaderRequest*>(request),
             ::google::protobuf::down_cast< ::braft::TransferLeaderResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& CliService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::AddPeerRequest::default_instance();
    case 1:
      return ::braft::RemovePeerRequest::default_instance();
    case 2:
      return ::braft::ChangePeersRequest::default_instance();
    case 3:
      return ::braft::ResetPeerRequest::default_instance();
    case 4:
      return ::braft::SnapshotRequest::default_instance();
    case 5:
      return ::braft::GetLeaderRequest::default_instance();
    case 6:
      return ::braft::TransferLeaderRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& CliService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::AddPeerResponse::default_instance();
    case 1:
      return ::braft::RemovePeerResponse::default_instance();
    case 2:
      return ::braft::ChangePeersResponse::default_instance();
    case 3:
      return ::braft::ResetPeerResponse::default_instance();
    case 4:
      return ::braft::SnapshotResponse::default_instance();
    case 5:
      return ::braft::GetLeaderResponse::default_instance();
    case 6:
      return ::braft::TransferLeaderResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

CliService_Stub::CliService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
CliService_Stub::CliService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
CliService_Stub::~CliService_Stub() {
  if (owns_channel_) delete channel_;
}

void CliService_Stub::add_peer(::google::protobuf::RpcController* controller,
                              const ::braft::AddPeerRequest* request,
                              ::braft::AddPeerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void CliService_Stub::remove_peer(::google::protobuf::RpcController* controller,
                              const ::braft::RemovePeerRequest* request,
                              ::braft::RemovePeerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void CliService_Stub::change_peers(::google::protobuf::RpcController* controller,
                              const ::braft::ChangePeersRequest* request,
                              ::braft::ChangePeersResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void CliService_Stub::reset_peer(::google::protobuf::RpcController* controller,
                              const ::braft::ResetPeerRequest* request,
                              ::braft::ResetPeerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void CliService_Stub::snapshot(::google::protobuf::RpcController* controller,
                              const ::braft::SnapshotRequest* request,
                              ::braft::SnapshotResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void CliService_Stub::get_leader(::google::protobuf::RpcController* controller,
                              const ::braft::GetLeaderRequest* request,
                              ::braft::GetLeaderResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void CliService_Stub::transfer_leader(::google::protobuf::RpcController* controller,
                              const ::braft::TransferLeaderRequest* request,
                              ::braft::TransferLeaderResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace braft

// @@protoc_insertion_point(global_scope)
