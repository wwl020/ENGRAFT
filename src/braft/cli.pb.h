// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: braft/cli.proto

#ifndef PROTOBUF_braft_2fcli_2eproto__INCLUDED
#define PROTOBUF_braft_2fcli_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

namespace braft {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_braft_2fcli_2eproto();
void protobuf_AssignDesc_braft_2fcli_2eproto();
void protobuf_ShutdownFile_braft_2fcli_2eproto();

class AddPeerRequest;
class AddPeerResponse;
class RemovePeerRequest;
class RemovePeerResponse;
class ChangePeersRequest;
class ChangePeersResponse;
class SnapshotRequest;
class ResetPeerRequest;
class TransferLeaderRequest;
class TransferLeaderResponse;
class ResetPeerResponse;
class SnapshotResponse;
class GetLeaderRequest;
class GetLeaderResponse;

// ===================================================================

class AddPeerRequest : public ::google::protobuf::Message {
 public:
  AddPeerRequest();
  virtual ~AddPeerRequest();
  
  AddPeerRequest(const AddPeerRequest& from);
  
  inline AddPeerRequest& operator=(const AddPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPeerRequest& default_instance();
  
  void Swap(AddPeerRequest* other);
  
  // implements Message ----------------------------------------------
  
  AddPeerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddPeerRequest& from);
  void MergeFrom(const AddPeerRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  
  // required string leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline const ::std::string& leader_id() const;
  inline void set_leader_id(const ::std::string& value);
  inline void set_leader_id(const char* value);
  inline void set_leader_id(const char* value, size_t size);
  inline ::std::string* mutable_leader_id();
  inline ::std::string* release_leader_id();
  
  // required string peer_id = 3;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  inline const ::std::string& peer_id() const;
  inline void set_peer_id(const ::std::string& value);
  inline void set_peer_id(const char* value);
  inline void set_peer_id(const char* value, size_t size);
  inline ::std::string* mutable_peer_id();
  inline ::std::string* release_peer_id();
  
  // @@protoc_insertion_point(class_scope:braft.AddPeerRequest)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_id_;
  ::std::string* leader_id_;
  ::std::string* peer_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static AddPeerRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddPeerResponse : public ::google::protobuf::Message {
 public:
  AddPeerResponse();
  virtual ~AddPeerResponse();
  
  AddPeerResponse(const AddPeerResponse& from);
  
  inline AddPeerResponse& operator=(const AddPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPeerResponse& default_instance();
  
  void Swap(AddPeerResponse* other);
  
  // implements Message ----------------------------------------------
  
  AddPeerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddPeerResponse& from);
  void MergeFrom(const AddPeerResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string old_peers = 1;
  inline int old_peers_size() const;
  inline void clear_old_peers();
  static const int kOldPeersFieldNumber = 1;
  inline const ::std::string& old_peers(int index) const;
  inline ::std::string* mutable_old_peers(int index);
  inline void set_old_peers(int index, const ::std::string& value);
  inline void set_old_peers(int index, const char* value);
  inline void set_old_peers(int index, const char* value, size_t size);
  inline ::std::string* add_old_peers();
  inline void add_old_peers(const ::std::string& value);
  inline void add_old_peers(const char* value);
  inline void add_old_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();
  
  // repeated string new_peers = 2;
  inline int new_peers_size() const;
  inline void clear_new_peers();
  static const int kNewPeersFieldNumber = 2;
  inline const ::std::string& new_peers(int index) const;
  inline ::std::string* mutable_new_peers(int index);
  inline void set_new_peers(int index, const ::std::string& value);
  inline void set_new_peers(int index, const char* value);
  inline void set_new_peers(int index, const char* value, size_t size);
  inline ::std::string* add_new_peers();
  inline void add_new_peers(const ::std::string& value);
  inline void add_new_peers(const char* value);
  inline void add_new_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& new_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_peers();
  
  // @@protoc_insertion_point(class_scope:braft.AddPeerResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_peers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static AddPeerResponse* default_instance_;
};
// -------------------------------------------------------------------

class RemovePeerRequest : public ::google::protobuf::Message {
 public:
  RemovePeerRequest();
  virtual ~RemovePeerRequest();
  
  RemovePeerRequest(const RemovePeerRequest& from);
  
  inline RemovePeerRequest& operator=(const RemovePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeerRequest& default_instance();
  
  void Swap(RemovePeerRequest* other);
  
  // implements Message ----------------------------------------------
  
  RemovePeerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemovePeerRequest& from);
  void MergeFrom(const RemovePeerRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  
  // required string leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline const ::std::string& leader_id() const;
  inline void set_leader_id(const ::std::string& value);
  inline void set_leader_id(const char* value);
  inline void set_leader_id(const char* value, size_t size);
  inline ::std::string* mutable_leader_id();
  inline ::std::string* release_leader_id();
  
  // required string peer_id = 3;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  inline const ::std::string& peer_id() const;
  inline void set_peer_id(const ::std::string& value);
  inline void set_peer_id(const char* value);
  inline void set_peer_id(const char* value, size_t size);
  inline ::std::string* mutable_peer_id();
  inline ::std::string* release_peer_id();
  
  // @@protoc_insertion_point(class_scope:braft.RemovePeerRequest)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_id_;
  ::std::string* leader_id_;
  ::std::string* peer_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static RemovePeerRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemovePeerResponse : public ::google::protobuf::Message {
 public:
  RemovePeerResponse();
  virtual ~RemovePeerResponse();
  
  RemovePeerResponse(const RemovePeerResponse& from);
  
  inline RemovePeerResponse& operator=(const RemovePeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeerResponse& default_instance();
  
  void Swap(RemovePeerResponse* other);
  
  // implements Message ----------------------------------------------
  
  RemovePeerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemovePeerResponse& from);
  void MergeFrom(const RemovePeerResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string old_peers = 1;
  inline int old_peers_size() const;
  inline void clear_old_peers();
  static const int kOldPeersFieldNumber = 1;
  inline const ::std::string& old_peers(int index) const;
  inline ::std::string* mutable_old_peers(int index);
  inline void set_old_peers(int index, const ::std::string& value);
  inline void set_old_peers(int index, const char* value);
  inline void set_old_peers(int index, const char* value, size_t size);
  inline ::std::string* add_old_peers();
  inline void add_old_peers(const ::std::string& value);
  inline void add_old_peers(const char* value);
  inline void add_old_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();
  
  // repeated string new_peers = 2;
  inline int new_peers_size() const;
  inline void clear_new_peers();
  static const int kNewPeersFieldNumber = 2;
  inline const ::std::string& new_peers(int index) const;
  inline ::std::string* mutable_new_peers(int index);
  inline void set_new_peers(int index, const ::std::string& value);
  inline void set_new_peers(int index, const char* value);
  inline void set_new_peers(int index, const char* value, size_t size);
  inline ::std::string* add_new_peers();
  inline void add_new_peers(const ::std::string& value);
  inline void add_new_peers(const char* value);
  inline void add_new_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& new_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_peers();
  
  // @@protoc_insertion_point(class_scope:braft.RemovePeerResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_peers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static RemovePeerResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChangePeersRequest : public ::google::protobuf::Message {
 public:
  ChangePeersRequest();
  virtual ~ChangePeersRequest();
  
  ChangePeersRequest(const ChangePeersRequest& from);
  
  inline ChangePeersRequest& operator=(const ChangePeersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePeersRequest& default_instance();
  
  void Swap(ChangePeersRequest* other);
  
  // implements Message ----------------------------------------------
  
  ChangePeersRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePeersRequest& from);
  void MergeFrom(const ChangePeersRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  
  // required string leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline const ::std::string& leader_id() const;
  inline void set_leader_id(const ::std::string& value);
  inline void set_leader_id(const char* value);
  inline void set_leader_id(const char* value, size_t size);
  inline ::std::string* mutable_leader_id();
  inline ::std::string* release_leader_id();
  
  // repeated string new_peers = 3;
  inline int new_peers_size() const;
  inline void clear_new_peers();
  static const int kNewPeersFieldNumber = 3;
  inline const ::std::string& new_peers(int index) const;
  inline ::std::string* mutable_new_peers(int index);
  inline void set_new_peers(int index, const ::std::string& value);
  inline void set_new_peers(int index, const char* value);
  inline void set_new_peers(int index, const char* value, size_t size);
  inline ::std::string* add_new_peers();
  inline void add_new_peers(const ::std::string& value);
  inline void add_new_peers(const char* value);
  inline void add_new_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& new_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_peers();
  
  // @@protoc_insertion_point(class_scope:braft.ChangePeersRequest)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_id_;
  ::std::string* leader_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_peers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static ChangePeersRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChangePeersResponse : public ::google::protobuf::Message {
 public:
  ChangePeersResponse();
  virtual ~ChangePeersResponse();
  
  ChangePeersResponse(const ChangePeersResponse& from);
  
  inline ChangePeersResponse& operator=(const ChangePeersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePeersResponse& default_instance();
  
  void Swap(ChangePeersResponse* other);
  
  // implements Message ----------------------------------------------
  
  ChangePeersResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePeersResponse& from);
  void MergeFrom(const ChangePeersResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string old_peers = 1;
  inline int old_peers_size() const;
  inline void clear_old_peers();
  static const int kOldPeersFieldNumber = 1;
  inline const ::std::string& old_peers(int index) const;
  inline ::std::string* mutable_old_peers(int index);
  inline void set_old_peers(int index, const ::std::string& value);
  inline void set_old_peers(int index, const char* value);
  inline void set_old_peers(int index, const char* value, size_t size);
  inline ::std::string* add_old_peers();
  inline void add_old_peers(const ::std::string& value);
  inline void add_old_peers(const char* value);
  inline void add_old_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();
  
  // repeated string new_peers = 2;
  inline int new_peers_size() const;
  inline void clear_new_peers();
  static const int kNewPeersFieldNumber = 2;
  inline const ::std::string& new_peers(int index) const;
  inline ::std::string* mutable_new_peers(int index);
  inline void set_new_peers(int index, const ::std::string& value);
  inline void set_new_peers(int index, const char* value);
  inline void set_new_peers(int index, const char* value, size_t size);
  inline ::std::string* add_new_peers();
  inline void add_new_peers(const ::std::string& value);
  inline void add_new_peers(const char* value);
  inline void add_new_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& new_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_peers();
  
  // @@protoc_insertion_point(class_scope:braft.ChangePeersResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_peers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static ChangePeersResponse* default_instance_;
};
// -------------------------------------------------------------------

class SnapshotRequest : public ::google::protobuf::Message {
 public:
  SnapshotRequest();
  virtual ~SnapshotRequest();
  
  SnapshotRequest(const SnapshotRequest& from);
  
  inline SnapshotRequest& operator=(const SnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotRequest& default_instance();
  
  void Swap(SnapshotRequest* other);
  
  // implements Message ----------------------------------------------
  
  SnapshotRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotRequest& from);
  void MergeFrom(const SnapshotRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  
  // optional string peer_id = 2;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 2;
  inline const ::std::string& peer_id() const;
  inline void set_peer_id(const ::std::string& value);
  inline void set_peer_id(const char* value);
  inline void set_peer_id(const char* value, size_t size);
  inline ::std::string* mutable_peer_id();
  inline ::std::string* release_peer_id();
  
  // @@protoc_insertion_point(class_scope:braft.SnapshotRequest)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_id_;
  ::std::string* peer_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static SnapshotRequest* default_instance_;
};
// -------------------------------------------------------------------

class ResetPeerRequest : public ::google::protobuf::Message {
 public:
  ResetPeerRequest();
  virtual ~ResetPeerRequest();
  
  ResetPeerRequest(const ResetPeerRequest& from);
  
  inline ResetPeerRequest& operator=(const ResetPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetPeerRequest& default_instance();
  
  void Swap(ResetPeerRequest* other);
  
  // implements Message ----------------------------------------------
  
  ResetPeerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResetPeerRequest& from);
  void MergeFrom(const ResetPeerRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  
  // required string peer_id = 2;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 2;
  inline const ::std::string& peer_id() const;
  inline void set_peer_id(const ::std::string& value);
  inline void set_peer_id(const char* value);
  inline void set_peer_id(const char* value, size_t size);
  inline ::std::string* mutable_peer_id();
  inline ::std::string* release_peer_id();
  
  // repeated string old_peers = 3;
  inline int old_peers_size() const;
  inline void clear_old_peers();
  static const int kOldPeersFieldNumber = 3;
  inline const ::std::string& old_peers(int index) const;
  inline ::std::string* mutable_old_peers(int index);
  inline void set_old_peers(int index, const ::std::string& value);
  inline void set_old_peers(int index, const char* value);
  inline void set_old_peers(int index, const char* value, size_t size);
  inline ::std::string* add_old_peers();
  inline void add_old_peers(const ::std::string& value);
  inline void add_old_peers(const char* value);
  inline void add_old_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();
  
  // repeated string new_peers = 4;
  inline int new_peers_size() const;
  inline void clear_new_peers();
  static const int kNewPeersFieldNumber = 4;
  inline const ::std::string& new_peers(int index) const;
  inline ::std::string* mutable_new_peers(int index);
  inline void set_new_peers(int index, const ::std::string& value);
  inline void set_new_peers(int index, const char* value);
  inline void set_new_peers(int index, const char* value, size_t size);
  inline ::std::string* add_new_peers();
  inline void add_new_peers(const ::std::string& value);
  inline void add_new_peers(const char* value);
  inline void add_new_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& new_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_peers();
  
  // @@protoc_insertion_point(class_scope:braft.ResetPeerRequest)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_id_;
  ::std::string* peer_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_peers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static ResetPeerRequest* default_instance_;
};
// -------------------------------------------------------------------

class TransferLeaderRequest : public ::google::protobuf::Message {
 public:
  TransferLeaderRequest();
  virtual ~TransferLeaderRequest();
  
  TransferLeaderRequest(const TransferLeaderRequest& from);
  
  inline TransferLeaderRequest& operator=(const TransferLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderRequest& default_instance();
  
  void Swap(TransferLeaderRequest* other);
  
  // implements Message ----------------------------------------------
  
  TransferLeaderRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferLeaderRequest& from);
  void MergeFrom(const TransferLeaderRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  
  // required string leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline const ::std::string& leader_id() const;
  inline void set_leader_id(const ::std::string& value);
  inline void set_leader_id(const char* value);
  inline void set_leader_id(const char* value, size_t size);
  inline ::std::string* mutable_leader_id();
  inline ::std::string* release_leader_id();
  
  // optional string peer_id = 3;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  inline const ::std::string& peer_id() const;
  inline void set_peer_id(const ::std::string& value);
  inline void set_peer_id(const char* value);
  inline void set_peer_id(const char* value, size_t size);
  inline ::std::string* mutable_peer_id();
  inline ::std::string* release_peer_id();
  
  // @@protoc_insertion_point(class_scope:braft.TransferLeaderRequest)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_id_;
  ::std::string* leader_id_;
  ::std::string* peer_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static TransferLeaderRequest* default_instance_;
};
// -------------------------------------------------------------------

class TransferLeaderResponse : public ::google::protobuf::Message {
 public:
  TransferLeaderResponse();
  virtual ~TransferLeaderResponse();
  
  TransferLeaderResponse(const TransferLeaderResponse& from);
  
  inline TransferLeaderResponse& operator=(const TransferLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderResponse& default_instance();
  
  void Swap(TransferLeaderResponse* other);
  
  // implements Message ----------------------------------------------
  
  TransferLeaderResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferLeaderResponse& from);
  void MergeFrom(const TransferLeaderResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:braft.TransferLeaderResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static TransferLeaderResponse* default_instance_;
};
// -------------------------------------------------------------------

class ResetPeerResponse : public ::google::protobuf::Message {
 public:
  ResetPeerResponse();
  virtual ~ResetPeerResponse();
  
  ResetPeerResponse(const ResetPeerResponse& from);
  
  inline ResetPeerResponse& operator=(const ResetPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetPeerResponse& default_instance();
  
  void Swap(ResetPeerResponse* other);
  
  // implements Message ----------------------------------------------
  
  ResetPeerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResetPeerResponse& from);
  void MergeFrom(const ResetPeerResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:braft.ResetPeerResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static ResetPeerResponse* default_instance_;
};
// -------------------------------------------------------------------

class SnapshotResponse : public ::google::protobuf::Message {
 public:
  SnapshotResponse();
  virtual ~SnapshotResponse();
  
  SnapshotResponse(const SnapshotResponse& from);
  
  inline SnapshotResponse& operator=(const SnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotResponse& default_instance();
  
  void Swap(SnapshotResponse* other);
  
  // implements Message ----------------------------------------------
  
  SnapshotResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotResponse& from);
  void MergeFrom(const SnapshotResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:braft.SnapshotResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static SnapshotResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetLeaderRequest : public ::google::protobuf::Message {
 public:
  GetLeaderRequest();
  virtual ~GetLeaderRequest();
  
  GetLeaderRequest(const GetLeaderRequest& from);
  
  inline GetLeaderRequest& operator=(const GetLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLeaderRequest& default_instance();
  
  void Swap(GetLeaderRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetLeaderRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLeaderRequest& from);
  void MergeFrom(const GetLeaderRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  
  // optional string peer_id = 2;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 2;
  inline const ::std::string& peer_id() const;
  inline void set_peer_id(const ::std::string& value);
  inline void set_peer_id(const char* value);
  inline void set_peer_id(const char* value, size_t size);
  inline ::std::string* mutable_peer_id();
  inline ::std::string* release_peer_id();
  
  // @@protoc_insertion_point(class_scope:braft.GetLeaderRequest)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_id_;
  ::std::string* peer_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static GetLeaderRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetLeaderResponse : public ::google::protobuf::Message {
 public:
  GetLeaderResponse();
  virtual ~GetLeaderResponse();
  
  GetLeaderResponse(const GetLeaderResponse& from);
  
  inline GetLeaderResponse& operator=(const GetLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLeaderResponse& default_instance();
  
  void Swap(GetLeaderResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetLeaderResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLeaderResponse& from);
  void MergeFrom(const GetLeaderResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string leader_id = 1;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 1;
  inline const ::std::string& leader_id() const;
  inline void set_leader_id(const ::std::string& value);
  inline void set_leader_id(const char* value);
  inline void set_leader_id(const char* value, size_t size);
  inline ::std::string* mutable_leader_id();
  inline ::std::string* release_leader_id();
  
  // @@protoc_insertion_point(class_scope:braft.GetLeaderResponse)
 private:
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* leader_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fcli_2eproto();
  friend void protobuf_AssignDesc_braft_2fcli_2eproto();
  friend void protobuf_ShutdownFile_braft_2fcli_2eproto();
  
  void InitAsDefaultInstance();
  static GetLeaderResponse* default_instance_;
};
// ===================================================================

class CliService_Stub;

class CliService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CliService() {};
 public:
  virtual ~CliService();
  
  typedef CliService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void add_peer(::google::protobuf::RpcController* controller,
                       const ::braft::AddPeerRequest* request,
                       ::braft::AddPeerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void remove_peer(::google::protobuf::RpcController* controller,
                       const ::braft::RemovePeerRequest* request,
                       ::braft::RemovePeerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void change_peers(::google::protobuf::RpcController* controller,
                       const ::braft::ChangePeersRequest* request,
                       ::braft::ChangePeersResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void reset_peer(::google::protobuf::RpcController* controller,
                       const ::braft::ResetPeerRequest* request,
                       ::braft::ResetPeerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void snapshot(::google::protobuf::RpcController* controller,
                       const ::braft::SnapshotRequest* request,
                       ::braft::SnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void get_leader(::google::protobuf::RpcController* controller,
                       const ::braft::GetLeaderRequest* request,
                       ::braft::GetLeaderResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void transfer_leader(::google::protobuf::RpcController* controller,
                       const ::braft::TransferLeaderRequest* request,
                       ::braft::TransferLeaderResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CliService);
};

class CliService_Stub : public CliService {
 public:
  CliService_Stub(::google::protobuf::RpcChannel* channel);
  CliService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~CliService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements CliService ------------------------------------------
  
  void add_peer(::google::protobuf::RpcController* controller,
                       const ::braft::AddPeerRequest* request,
                       ::braft::AddPeerResponse* response,
                       ::google::protobuf::Closure* done);
  void remove_peer(::google::protobuf::RpcController* controller,
                       const ::braft::RemovePeerRequest* request,
                       ::braft::RemovePeerResponse* response,
                       ::google::protobuf::Closure* done);
  void change_peers(::google::protobuf::RpcController* controller,
                       const ::braft::ChangePeersRequest* request,
                       ::braft::ChangePeersResponse* response,
                       ::google::protobuf::Closure* done);
  void reset_peer(::google::protobuf::RpcController* controller,
                       const ::braft::ResetPeerRequest* request,
                       ::braft::ResetPeerResponse* response,
                       ::google::protobuf::Closure* done);
  void snapshot(::google::protobuf::RpcController* controller,
                       const ::braft::SnapshotRequest* request,
                       ::braft::SnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  void get_leader(::google::protobuf::RpcController* controller,
                       const ::braft::GetLeaderRequest* request,
                       ::braft::GetLeaderResponse* response,
                       ::google::protobuf::Closure* done);
  void transfer_leader(::google::protobuf::RpcController* controller,
                       const ::braft::TransferLeaderRequest* request,
                       ::braft::TransferLeaderResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CliService_Stub);
};


// ===================================================================


// ===================================================================

// AddPeerRequest

// required string group_id = 1;
inline bool AddPeerRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddPeerRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddPeerRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddPeerRequest::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& AddPeerRequest::group_id() const {
  return *group_id_;
}
inline void AddPeerRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void AddPeerRequest::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void AddPeerRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddPeerRequest::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* AddPeerRequest::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string leader_id = 2;
inline bool AddPeerRequest::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddPeerRequest::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddPeerRequest::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddPeerRequest::clear_leader_id() {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    leader_id_->clear();
  }
  clear_has_leader_id();
}
inline const ::std::string& AddPeerRequest::leader_id() const {
  return *leader_id_;
}
inline void AddPeerRequest::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void AddPeerRequest::set_leader_id(const char* value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void AddPeerRequest::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddPeerRequest::mutable_leader_id() {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  return leader_id_;
}
inline ::std::string* AddPeerRequest::release_leader_id() {
  clear_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_id_;
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string peer_id = 3;
inline bool AddPeerRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddPeerRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddPeerRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddPeerRequest::clear_peer_id() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    peer_id_->clear();
  }
  clear_has_peer_id();
}
inline const ::std::string& AddPeerRequest::peer_id() const {
  return *peer_id_;
}
inline void AddPeerRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void AddPeerRequest::set_peer_id(const char* value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void AddPeerRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddPeerRequest::mutable_peer_id() {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  return peer_id_;
}
inline ::std::string* AddPeerRequest::release_peer_id() {
  clear_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_id_;
    peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AddPeerResponse

// repeated string old_peers = 1;
inline int AddPeerResponse::old_peers_size() const {
  return old_peers_.size();
}
inline void AddPeerResponse::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& AddPeerResponse::old_peers(int index) const {
  return old_peers_.Get(index);
}
inline ::std::string* AddPeerResponse::mutable_old_peers(int index) {
  return old_peers_.Mutable(index);
}
inline void AddPeerResponse::set_old_peers(int index, const ::std::string& value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void AddPeerResponse::set_old_peers(int index, const char* value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void AddPeerResponse::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddPeerResponse::add_old_peers() {
  return old_peers_.Add();
}
inline void AddPeerResponse::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
}
inline void AddPeerResponse::add_old_peers(const char* value) {
  old_peers_.Add()->assign(value);
}
inline void AddPeerResponse::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddPeerResponse::old_peers() const {
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddPeerResponse::mutable_old_peers() {
  return &old_peers_;
}

// repeated string new_peers = 2;
inline int AddPeerResponse::new_peers_size() const {
  return new_peers_.size();
}
inline void AddPeerResponse::clear_new_peers() {
  new_peers_.Clear();
}
inline const ::std::string& AddPeerResponse::new_peers(int index) const {
  return new_peers_.Get(index);
}
inline ::std::string* AddPeerResponse::mutable_new_peers(int index) {
  return new_peers_.Mutable(index);
}
inline void AddPeerResponse::set_new_peers(int index, const ::std::string& value) {
  new_peers_.Mutable(index)->assign(value);
}
inline void AddPeerResponse::set_new_peers(int index, const char* value) {
  new_peers_.Mutable(index)->assign(value);
}
inline void AddPeerResponse::set_new_peers(int index, const char* value, size_t size) {
  new_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddPeerResponse::add_new_peers() {
  return new_peers_.Add();
}
inline void AddPeerResponse::add_new_peers(const ::std::string& value) {
  new_peers_.Add()->assign(value);
}
inline void AddPeerResponse::add_new_peers(const char* value) {
  new_peers_.Add()->assign(value);
}
inline void AddPeerResponse::add_new_peers(const char* value, size_t size) {
  new_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddPeerResponse::new_peers() const {
  return new_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddPeerResponse::mutable_new_peers() {
  return &new_peers_;
}

// -------------------------------------------------------------------

// RemovePeerRequest

// required string group_id = 1;
inline bool RemovePeerRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemovePeerRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemovePeerRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemovePeerRequest::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& RemovePeerRequest::group_id() const {
  return *group_id_;
}
inline void RemovePeerRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void RemovePeerRequest::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void RemovePeerRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemovePeerRequest::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* RemovePeerRequest::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string leader_id = 2;
inline bool RemovePeerRequest::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemovePeerRequest::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemovePeerRequest::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemovePeerRequest::clear_leader_id() {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    leader_id_->clear();
  }
  clear_has_leader_id();
}
inline const ::std::string& RemovePeerRequest::leader_id() const {
  return *leader_id_;
}
inline void RemovePeerRequest::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void RemovePeerRequest::set_leader_id(const char* value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void RemovePeerRequest::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemovePeerRequest::mutable_leader_id() {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  return leader_id_;
}
inline ::std::string* RemovePeerRequest::release_leader_id() {
  clear_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_id_;
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string peer_id = 3;
inline bool RemovePeerRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemovePeerRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemovePeerRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemovePeerRequest::clear_peer_id() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    peer_id_->clear();
  }
  clear_has_peer_id();
}
inline const ::std::string& RemovePeerRequest::peer_id() const {
  return *peer_id_;
}
inline void RemovePeerRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void RemovePeerRequest::set_peer_id(const char* value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void RemovePeerRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemovePeerRequest::mutable_peer_id() {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  return peer_id_;
}
inline ::std::string* RemovePeerRequest::release_peer_id() {
  clear_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_id_;
    peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RemovePeerResponse

// repeated string old_peers = 1;
inline int RemovePeerResponse::old_peers_size() const {
  return old_peers_.size();
}
inline void RemovePeerResponse::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& RemovePeerResponse::old_peers(int index) const {
  return old_peers_.Get(index);
}
inline ::std::string* RemovePeerResponse::mutable_old_peers(int index) {
  return old_peers_.Mutable(index);
}
inline void RemovePeerResponse::set_old_peers(int index, const ::std::string& value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void RemovePeerResponse::set_old_peers(int index, const char* value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void RemovePeerResponse::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemovePeerResponse::add_old_peers() {
  return old_peers_.Add();
}
inline void RemovePeerResponse::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
}
inline void RemovePeerResponse::add_old_peers(const char* value) {
  old_peers_.Add()->assign(value);
}
inline void RemovePeerResponse::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RemovePeerResponse::old_peers() const {
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RemovePeerResponse::mutable_old_peers() {
  return &old_peers_;
}

// repeated string new_peers = 2;
inline int RemovePeerResponse::new_peers_size() const {
  return new_peers_.size();
}
inline void RemovePeerResponse::clear_new_peers() {
  new_peers_.Clear();
}
inline const ::std::string& RemovePeerResponse::new_peers(int index) const {
  return new_peers_.Get(index);
}
inline ::std::string* RemovePeerResponse::mutable_new_peers(int index) {
  return new_peers_.Mutable(index);
}
inline void RemovePeerResponse::set_new_peers(int index, const ::std::string& value) {
  new_peers_.Mutable(index)->assign(value);
}
inline void RemovePeerResponse::set_new_peers(int index, const char* value) {
  new_peers_.Mutable(index)->assign(value);
}
inline void RemovePeerResponse::set_new_peers(int index, const char* value, size_t size) {
  new_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemovePeerResponse::add_new_peers() {
  return new_peers_.Add();
}
inline void RemovePeerResponse::add_new_peers(const ::std::string& value) {
  new_peers_.Add()->assign(value);
}
inline void RemovePeerResponse::add_new_peers(const char* value) {
  new_peers_.Add()->assign(value);
}
inline void RemovePeerResponse::add_new_peers(const char* value, size_t size) {
  new_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RemovePeerResponse::new_peers() const {
  return new_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RemovePeerResponse::mutable_new_peers() {
  return &new_peers_;
}

// -------------------------------------------------------------------

// ChangePeersRequest

// required string group_id = 1;
inline bool ChangePeersRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangePeersRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangePeersRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangePeersRequest::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& ChangePeersRequest::group_id() const {
  return *group_id_;
}
inline void ChangePeersRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void ChangePeersRequest::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void ChangePeersRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePeersRequest::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* ChangePeersRequest::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string leader_id = 2;
inline bool ChangePeersRequest::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangePeersRequest::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangePeersRequest::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangePeersRequest::clear_leader_id() {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    leader_id_->clear();
  }
  clear_has_leader_id();
}
inline const ::std::string& ChangePeersRequest::leader_id() const {
  return *leader_id_;
}
inline void ChangePeersRequest::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void ChangePeersRequest::set_leader_id(const char* value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void ChangePeersRequest::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePeersRequest::mutable_leader_id() {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  return leader_id_;
}
inline ::std::string* ChangePeersRequest::release_leader_id() {
  clear_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_id_;
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string new_peers = 3;
inline int ChangePeersRequest::new_peers_size() const {
  return new_peers_.size();
}
inline void ChangePeersRequest::clear_new_peers() {
  new_peers_.Clear();
}
inline const ::std::string& ChangePeersRequest::new_peers(int index) const {
  return new_peers_.Get(index);
}
inline ::std::string* ChangePeersRequest::mutable_new_peers(int index) {
  return new_peers_.Mutable(index);
}
inline void ChangePeersRequest::set_new_peers(int index, const ::std::string& value) {
  new_peers_.Mutable(index)->assign(value);
}
inline void ChangePeersRequest::set_new_peers(int index, const char* value) {
  new_peers_.Mutable(index)->assign(value);
}
inline void ChangePeersRequest::set_new_peers(int index, const char* value, size_t size) {
  new_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePeersRequest::add_new_peers() {
  return new_peers_.Add();
}
inline void ChangePeersRequest::add_new_peers(const ::std::string& value) {
  new_peers_.Add()->assign(value);
}
inline void ChangePeersRequest::add_new_peers(const char* value) {
  new_peers_.Add()->assign(value);
}
inline void ChangePeersRequest::add_new_peers(const char* value, size_t size) {
  new_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChangePeersRequest::new_peers() const {
  return new_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChangePeersRequest::mutable_new_peers() {
  return &new_peers_;
}

// -------------------------------------------------------------------

// ChangePeersResponse

// repeated string old_peers = 1;
inline int ChangePeersResponse::old_peers_size() const {
  return old_peers_.size();
}
inline void ChangePeersResponse::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& ChangePeersResponse::old_peers(int index) const {
  return old_peers_.Get(index);
}
inline ::std::string* ChangePeersResponse::mutable_old_peers(int index) {
  return old_peers_.Mutable(index);
}
inline void ChangePeersResponse::set_old_peers(int index, const ::std::string& value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void ChangePeersResponse::set_old_peers(int index, const char* value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void ChangePeersResponse::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePeersResponse::add_old_peers() {
  return old_peers_.Add();
}
inline void ChangePeersResponse::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
}
inline void ChangePeersResponse::add_old_peers(const char* value) {
  old_peers_.Add()->assign(value);
}
inline void ChangePeersResponse::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChangePeersResponse::old_peers() const {
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChangePeersResponse::mutable_old_peers() {
  return &old_peers_;
}

// repeated string new_peers = 2;
inline int ChangePeersResponse::new_peers_size() const {
  return new_peers_.size();
}
inline void ChangePeersResponse::clear_new_peers() {
  new_peers_.Clear();
}
inline const ::std::string& ChangePeersResponse::new_peers(int index) const {
  return new_peers_.Get(index);
}
inline ::std::string* ChangePeersResponse::mutable_new_peers(int index) {
  return new_peers_.Mutable(index);
}
inline void ChangePeersResponse::set_new_peers(int index, const ::std::string& value) {
  new_peers_.Mutable(index)->assign(value);
}
inline void ChangePeersResponse::set_new_peers(int index, const char* value) {
  new_peers_.Mutable(index)->assign(value);
}
inline void ChangePeersResponse::set_new_peers(int index, const char* value, size_t size) {
  new_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePeersResponse::add_new_peers() {
  return new_peers_.Add();
}
inline void ChangePeersResponse::add_new_peers(const ::std::string& value) {
  new_peers_.Add()->assign(value);
}
inline void ChangePeersResponse::add_new_peers(const char* value) {
  new_peers_.Add()->assign(value);
}
inline void ChangePeersResponse::add_new_peers(const char* value, size_t size) {
  new_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChangePeersResponse::new_peers() const {
  return new_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChangePeersResponse::mutable_new_peers() {
  return &new_peers_;
}

// -------------------------------------------------------------------

// SnapshotRequest

// required string group_id = 1;
inline bool SnapshotRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapshotRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapshotRequest::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& SnapshotRequest::group_id() const {
  return *group_id_;
}
inline void SnapshotRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void SnapshotRequest::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void SnapshotRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SnapshotRequest::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* SnapshotRequest::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string peer_id = 2;
inline bool SnapshotRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapshotRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnapshotRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnapshotRequest::clear_peer_id() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    peer_id_->clear();
  }
  clear_has_peer_id();
}
inline const ::std::string& SnapshotRequest::peer_id() const {
  return *peer_id_;
}
inline void SnapshotRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void SnapshotRequest::set_peer_id(const char* value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void SnapshotRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SnapshotRequest::mutable_peer_id() {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  return peer_id_;
}
inline ::std::string* SnapshotRequest::release_peer_id() {
  clear_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_id_;
    peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResetPeerRequest

// required string group_id = 1;
inline bool ResetPeerRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResetPeerRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResetPeerRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResetPeerRequest::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& ResetPeerRequest::group_id() const {
  return *group_id_;
}
inline void ResetPeerRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void ResetPeerRequest::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void ResetPeerRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResetPeerRequest::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* ResetPeerRequest::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string peer_id = 2;
inline bool ResetPeerRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResetPeerRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResetPeerRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResetPeerRequest::clear_peer_id() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    peer_id_->clear();
  }
  clear_has_peer_id();
}
inline const ::std::string& ResetPeerRequest::peer_id() const {
  return *peer_id_;
}
inline void ResetPeerRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void ResetPeerRequest::set_peer_id(const char* value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void ResetPeerRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResetPeerRequest::mutable_peer_id() {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  return peer_id_;
}
inline ::std::string* ResetPeerRequest::release_peer_id() {
  clear_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_id_;
    peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string old_peers = 3;
inline int ResetPeerRequest::old_peers_size() const {
  return old_peers_.size();
}
inline void ResetPeerRequest::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& ResetPeerRequest::old_peers(int index) const {
  return old_peers_.Get(index);
}
inline ::std::string* ResetPeerRequest::mutable_old_peers(int index) {
  return old_peers_.Mutable(index);
}
inline void ResetPeerRequest::set_old_peers(int index, const ::std::string& value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void ResetPeerRequest::set_old_peers(int index, const char* value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void ResetPeerRequest::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResetPeerRequest::add_old_peers() {
  return old_peers_.Add();
}
inline void ResetPeerRequest::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
}
inline void ResetPeerRequest::add_old_peers(const char* value) {
  old_peers_.Add()->assign(value);
}
inline void ResetPeerRequest::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResetPeerRequest::old_peers() const {
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResetPeerRequest::mutable_old_peers() {
  return &old_peers_;
}

// repeated string new_peers = 4;
inline int ResetPeerRequest::new_peers_size() const {
  return new_peers_.size();
}
inline void ResetPeerRequest::clear_new_peers() {
  new_peers_.Clear();
}
inline const ::std::string& ResetPeerRequest::new_peers(int index) const {
  return new_peers_.Get(index);
}
inline ::std::string* ResetPeerRequest::mutable_new_peers(int index) {
  return new_peers_.Mutable(index);
}
inline void ResetPeerRequest::set_new_peers(int index, const ::std::string& value) {
  new_peers_.Mutable(index)->assign(value);
}
inline void ResetPeerRequest::set_new_peers(int index, const char* value) {
  new_peers_.Mutable(index)->assign(value);
}
inline void ResetPeerRequest::set_new_peers(int index, const char* value, size_t size) {
  new_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResetPeerRequest::add_new_peers() {
  return new_peers_.Add();
}
inline void ResetPeerRequest::add_new_peers(const ::std::string& value) {
  new_peers_.Add()->assign(value);
}
inline void ResetPeerRequest::add_new_peers(const char* value) {
  new_peers_.Add()->assign(value);
}
inline void ResetPeerRequest::add_new_peers(const char* value, size_t size) {
  new_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResetPeerRequest::new_peers() const {
  return new_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResetPeerRequest::mutable_new_peers() {
  return &new_peers_;
}

// -------------------------------------------------------------------

// TransferLeaderRequest

// required string group_id = 1;
inline bool TransferLeaderRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferLeaderRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferLeaderRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferLeaderRequest::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& TransferLeaderRequest::group_id() const {
  return *group_id_;
}
inline void TransferLeaderRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void TransferLeaderRequest::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void TransferLeaderRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferLeaderRequest::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* TransferLeaderRequest::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string leader_id = 2;
inline bool TransferLeaderRequest::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferLeaderRequest::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferLeaderRequest::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferLeaderRequest::clear_leader_id() {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    leader_id_->clear();
  }
  clear_has_leader_id();
}
inline const ::std::string& TransferLeaderRequest::leader_id() const {
  return *leader_id_;
}
inline void TransferLeaderRequest::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void TransferLeaderRequest::set_leader_id(const char* value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void TransferLeaderRequest::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferLeaderRequest::mutable_leader_id() {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  return leader_id_;
}
inline ::std::string* TransferLeaderRequest::release_leader_id() {
  clear_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_id_;
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string peer_id = 3;
inline bool TransferLeaderRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferLeaderRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferLeaderRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferLeaderRequest::clear_peer_id() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    peer_id_->clear();
  }
  clear_has_peer_id();
}
inline const ::std::string& TransferLeaderRequest::peer_id() const {
  return *peer_id_;
}
inline void TransferLeaderRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void TransferLeaderRequest::set_peer_id(const char* value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void TransferLeaderRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferLeaderRequest::mutable_peer_id() {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  return peer_id_;
}
inline ::std::string* TransferLeaderRequest::release_peer_id() {
  clear_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_id_;
    peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TransferLeaderResponse

// -------------------------------------------------------------------

// ResetPeerResponse

// -------------------------------------------------------------------

// SnapshotResponse

// -------------------------------------------------------------------

// GetLeaderRequest

// required string group_id = 1;
inline bool GetLeaderRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLeaderRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLeaderRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLeaderRequest::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& GetLeaderRequest::group_id() const {
  return *group_id_;
}
inline void GetLeaderRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void GetLeaderRequest::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void GetLeaderRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLeaderRequest::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* GetLeaderRequest::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string peer_id = 2;
inline bool GetLeaderRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLeaderRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLeaderRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLeaderRequest::clear_peer_id() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    peer_id_->clear();
  }
  clear_has_peer_id();
}
inline const ::std::string& GetLeaderRequest::peer_id() const {
  return *peer_id_;
}
inline void GetLeaderRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void GetLeaderRequest::set_peer_id(const char* value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void GetLeaderRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLeaderRequest::mutable_peer_id() {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  return peer_id_;
}
inline ::std::string* GetLeaderRequest::release_peer_id() {
  clear_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_id_;
    peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetLeaderResponse

// required string leader_id = 1;
inline bool GetLeaderResponse::has_leader_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLeaderResponse::set_has_leader_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLeaderResponse::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLeaderResponse::clear_leader_id() {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    leader_id_->clear();
  }
  clear_has_leader_id();
}
inline const ::std::string& GetLeaderResponse::leader_id() const {
  return *leader_id_;
}
inline void GetLeaderResponse::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void GetLeaderResponse::set_leader_id(const char* value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void GetLeaderResponse::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLeaderResponse::mutable_leader_id() {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  return leader_id_;
}
inline ::std::string* GetLeaderResponse::release_leader_id() {
  clear_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_id_;
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace braft

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_braft_2fcli_2eproto__INCLUDED
