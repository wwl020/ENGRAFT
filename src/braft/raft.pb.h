// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: braft/raft.proto

#ifndef PROTOBUF_braft_2fraft_2eproto__INCLUDED
#define PROTOBUF_braft_2fraft_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
#include "braft/enum.pb.h"
// @@protoc_insertion_point(includes)

namespace braft {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_braft_2fraft_2eproto();
void protobuf_AssignDesc_braft_2fraft_2eproto();
void protobuf_ShutdownFile_braft_2fraft_2eproto();

class EntryMeta;
class RequestVoteRequest;
class RequestVoteResponse;
class AppendEntriesRequest;
class AppendEntriesResponse;
class SnapshotMeta;
class InstallSnapshotRequest;
class InstallSnapshotResponse;
class TimeoutNowRequest;
class TimeoutNowResponse;

// ===================================================================

class EntryMeta : public ::google::protobuf::Message {
 public:
  EntryMeta();
  virtual ~EntryMeta();
  
  EntryMeta(const EntryMeta& from);
  
  inline EntryMeta& operator=(const EntryMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntryMeta& default_instance();
  
  void Swap(EntryMeta* other);
  
  // implements Message ----------------------------------------------
  
  EntryMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntryMeta& from);
  void MergeFrom(const EntryMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // required .braft.EntryType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline braft::EntryType type() const;
  inline void set_type(braft::EntryType value);
  
  // repeated string peers = 3;
  inline int peers_size() const;
  inline void clear_peers();
  static const int kPeersFieldNumber = 3;
  inline const ::std::string& peers(int index) const;
  inline ::std::string* mutable_peers(int index);
  inline void set_peers(int index, const ::std::string& value);
  inline void set_peers(int index, const char* value);
  inline void set_peers(int index, const char* value, size_t size);
  inline ::std::string* add_peers();
  inline void add_peers(const ::std::string& value);
  inline void add_peers(const char* value);
  inline void add_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peers();
  
  // optional int64 data_len = 4;
  inline bool has_data_len() const;
  inline void clear_data_len();
  static const int kDataLenFieldNumber = 4;
  inline ::google::protobuf::int64 data_len() const;
  inline void set_data_len(::google::protobuf::int64 value);
  
  // repeated string old_peers = 5;
  inline int old_peers_size() const;
  inline void clear_old_peers();
  static const int kOldPeersFieldNumber = 5;
  inline const ::std::string& old_peers(int index) const;
  inline ::std::string* mutable_old_peers(int index);
  inline void set_old_peers(int index, const ::std::string& value);
  inline void set_old_peers(int index, const char* value);
  inline void set_old_peers(int index, const char* value, size_t size);
  inline ::std::string* add_old_peers();
  inline void add_old_peers(const ::std::string& value);
  inline void add_old_peers(const char* value);
  inline void add_old_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();
  
  // @@protoc_insertion_point(class_scope:braft.EntryMeta)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data_len();
  inline void clear_has_data_len();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 term_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peers_;
  ::google::protobuf::int64 data_len_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fraft_2eproto();
  friend void protobuf_AssignDesc_braft_2fraft_2eproto();
  friend void protobuf_ShutdownFile_braft_2fraft_2eproto();
  
  void InitAsDefaultInstance();
  static EntryMeta* default_instance_;
};
// -------------------------------------------------------------------

class RequestVoteRequest : public ::google::protobuf::Message {
 public:
  RequestVoteRequest();
  virtual ~RequestVoteRequest();
  
  RequestVoteRequest(const RequestVoteRequest& from);
  
  inline RequestVoteRequest& operator=(const RequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteRequest& default_instance();
  
  void Swap(RequestVoteRequest* other);
  
  // implements Message ----------------------------------------------
  
  RequestVoteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestVoteRequest& from);
  void MergeFrom(const RequestVoteRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  
  // required string server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  
  // required string peer_id = 3;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  inline const ::std::string& peer_id() const;
  inline void set_peer_id(const ::std::string& value);
  inline void set_peer_id(const char* value);
  inline void set_peer_id(const char* value, size_t size);
  inline ::std::string* mutable_peer_id();
  inline ::std::string* release_peer_id();
  
  // required int64 term = 4;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 4;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // required int64 last_log_term = 5;
  inline bool has_last_log_term() const;
  inline void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 5;
  inline ::google::protobuf::int64 last_log_term() const;
  inline void set_last_log_term(::google::protobuf::int64 value);
  
  // required int64 last_log_index = 6;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 6;
  inline ::google::protobuf::int64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:braft.RequestVoteRequest)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_id_;
  ::std::string* server_id_;
  ::std::string* peer_id_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 last_log_term_;
  ::google::protobuf::int64 last_log_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fraft_2eproto();
  friend void protobuf_AssignDesc_braft_2fraft_2eproto();
  friend void protobuf_ShutdownFile_braft_2fraft_2eproto();
  
  void InitAsDefaultInstance();
  static RequestVoteRequest* default_instance_;
};
// -------------------------------------------------------------------

class RequestVoteResponse : public ::google::protobuf::Message {
 public:
  RequestVoteResponse();
  virtual ~RequestVoteResponse();
  
  RequestVoteResponse(const RequestVoteResponse& from);
  
  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteResponse& default_instance();
  
  void Swap(RequestVoteResponse* other);
  
  // implements Message ----------------------------------------------
  
  RequestVoteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestVoteResponse& from);
  void MergeFrom(const RequestVoteResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // required bool granted = 2;
  inline bool has_granted() const;
  inline void clear_granted();
  static const int kGrantedFieldNumber = 2;
  inline bool granted() const;
  inline void set_granted(bool value);
  
  // @@protoc_insertion_point(class_scope:braft.RequestVoteResponse)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_granted();
  inline void clear_has_granted();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 term_;
  bool granted_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fraft_2eproto();
  friend void protobuf_AssignDesc_braft_2fraft_2eproto();
  friend void protobuf_ShutdownFile_braft_2fraft_2eproto();
  
  void InitAsDefaultInstance();
  static RequestVoteResponse* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesRequest : public ::google::protobuf::Message {
 public:
  AppendEntriesRequest();
  virtual ~AppendEntriesRequest();
  
  AppendEntriesRequest(const AppendEntriesRequest& from);
  
  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesRequest& default_instance();
  
  void Swap(AppendEntriesRequest* other);
  
  // implements Message ----------------------------------------------
  
  AppendEntriesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  
  // required string server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  
  // required string peer_id = 3;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  inline const ::std::string& peer_id() const;
  inline void set_peer_id(const ::std::string& value);
  inline void set_peer_id(const char* value);
  inline void set_peer_id(const char* value, size_t size);
  inline ::std::string* mutable_peer_id();
  inline ::std::string* release_peer_id();
  
  // required int64 term = 4;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 4;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // required int64 prev_log_term = 5;
  inline bool has_prev_log_term() const;
  inline void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 5;
  inline ::google::protobuf::int64 prev_log_term() const;
  inline void set_prev_log_term(::google::protobuf::int64 value);
  
  // required int64 prev_log_index = 6;
  inline bool has_prev_log_index() const;
  inline void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 6;
  inline ::google::protobuf::int64 prev_log_index() const;
  inline void set_prev_log_index(::google::protobuf::int64 value);
  
  // repeated .braft.EntryMeta entries = 7;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 7;
  inline const ::braft::EntryMeta& entries(int index) const;
  inline ::braft::EntryMeta* mutable_entries(int index);
  inline ::braft::EntryMeta* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::braft::EntryMeta >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::braft::EntryMeta >*
      mutable_entries();
  
  // required int64 committed_index = 8;
  inline bool has_committed_index() const;
  inline void clear_committed_index();
  static const int kCommittedIndexFieldNumber = 8;
  inline ::google::protobuf::int64 committed_index() const;
  inline void set_committed_index(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:braft.AppendEntriesRequest)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_prev_log_term();
  inline void clear_has_prev_log_term();
  inline void set_has_prev_log_index();
  inline void clear_has_prev_log_index();
  inline void set_has_committed_index();
  inline void clear_has_committed_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_id_;
  ::std::string* server_id_;
  ::std::string* peer_id_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 prev_log_term_;
  ::google::protobuf::int64 prev_log_index_;
  ::google::protobuf::RepeatedPtrField< ::braft::EntryMeta > entries_;
  ::google::protobuf::int64 committed_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fraft_2eproto();
  friend void protobuf_AssignDesc_braft_2fraft_2eproto();
  friend void protobuf_ShutdownFile_braft_2fraft_2eproto();
  
  void InitAsDefaultInstance();
  static AppendEntriesRequest* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesResponse : public ::google::protobuf::Message {
 public:
  AppendEntriesResponse();
  virtual ~AppendEntriesResponse();
  
  AppendEntriesResponse(const AppendEntriesResponse& from);
  
  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesResponse& default_instance();
  
  void Swap(AppendEntriesResponse* other);
  
  // implements Message ----------------------------------------------
  
  AppendEntriesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);
  
  // optional int64 last_log_index = 3;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  inline ::google::protobuf::int64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::int64 value);
  
  // optional bool readonly = 4;
  inline bool has_readonly() const;
  inline void clear_readonly();
  static const int kReadonlyFieldNumber = 4;
  inline bool readonly() const;
  inline void set_readonly(bool value);
  
  // @@protoc_insertion_point(class_scope:braft.AppendEntriesResponse)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();
  inline void set_has_readonly();
  inline void clear_has_readonly();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 last_log_index_;
  bool success_;
  bool readonly_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fraft_2eproto();
  friend void protobuf_AssignDesc_braft_2fraft_2eproto();
  friend void protobuf_ShutdownFile_braft_2fraft_2eproto();
  
  void InitAsDefaultInstance();
  static AppendEntriesResponse* default_instance_;
};
// -------------------------------------------------------------------

class SnapshotMeta : public ::google::protobuf::Message {
 public:
  SnapshotMeta();
  virtual ~SnapshotMeta();
  
  SnapshotMeta(const SnapshotMeta& from);
  
  inline SnapshotMeta& operator=(const SnapshotMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotMeta& default_instance();
  
  void Swap(SnapshotMeta* other);
  
  // implements Message ----------------------------------------------
  
  SnapshotMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotMeta& from);
  void MergeFrom(const SnapshotMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 last_included_index = 1;
  inline bool has_last_included_index() const;
  inline void clear_last_included_index();
  static const int kLastIncludedIndexFieldNumber = 1;
  inline ::google::protobuf::int64 last_included_index() const;
  inline void set_last_included_index(::google::protobuf::int64 value);
  
  // required int64 last_included_term = 2;
  inline bool has_last_included_term() const;
  inline void clear_last_included_term();
  static const int kLastIncludedTermFieldNumber = 2;
  inline ::google::protobuf::int64 last_included_term() const;
  inline void set_last_included_term(::google::protobuf::int64 value);
  
  // repeated string peers = 3;
  inline int peers_size() const;
  inline void clear_peers();
  static const int kPeersFieldNumber = 3;
  inline const ::std::string& peers(int index) const;
  inline ::std::string* mutable_peers(int index);
  inline void set_peers(int index, const ::std::string& value);
  inline void set_peers(int index, const char* value);
  inline void set_peers(int index, const char* value, size_t size);
  inline ::std::string* add_peers();
  inline void add_peers(const ::std::string& value);
  inline void add_peers(const char* value);
  inline void add_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peers();
  
  // repeated string old_peers = 4;
  inline int old_peers_size() const;
  inline void clear_old_peers();
  static const int kOldPeersFieldNumber = 4;
  inline const ::std::string& old_peers(int index) const;
  inline ::std::string* mutable_old_peers(int index);
  inline void set_old_peers(int index, const ::std::string& value);
  inline void set_old_peers(int index, const char* value);
  inline void set_old_peers(int index, const char* value, size_t size);
  inline ::std::string* add_old_peers();
  inline void add_old_peers(const ::std::string& value);
  inline void add_old_peers(const char* value);
  inline void add_old_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();
  
  // @@protoc_insertion_point(class_scope:braft.SnapshotMeta)
 private:
  inline void set_has_last_included_index();
  inline void clear_has_last_included_index();
  inline void set_has_last_included_term();
  inline void clear_has_last_included_term();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 last_included_index_;
  ::google::protobuf::int64 last_included_term_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fraft_2eproto();
  friend void protobuf_AssignDesc_braft_2fraft_2eproto();
  friend void protobuf_ShutdownFile_braft_2fraft_2eproto();
  
  void InitAsDefaultInstance();
  static SnapshotMeta* default_instance_;
};
// -------------------------------------------------------------------

class InstallSnapshotRequest : public ::google::protobuf::Message {
 public:
  InstallSnapshotRequest();
  virtual ~InstallSnapshotRequest();
  
  InstallSnapshotRequest(const InstallSnapshotRequest& from);
  
  inline InstallSnapshotRequest& operator=(const InstallSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstallSnapshotRequest& default_instance();
  
  void Swap(InstallSnapshotRequest* other);
  
  // implements Message ----------------------------------------------
  
  InstallSnapshotRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstallSnapshotRequest& from);
  void MergeFrom(const InstallSnapshotRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  
  // required string server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  
  // required string peer_id = 3;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  inline const ::std::string& peer_id() const;
  inline void set_peer_id(const ::std::string& value);
  inline void set_peer_id(const char* value);
  inline void set_peer_id(const char* value, size_t size);
  inline ::std::string* mutable_peer_id();
  inline ::std::string* release_peer_id();
  
  // required int64 term = 4;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 4;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // required .braft.SnapshotMeta meta = 5;
  inline bool has_meta() const;
  inline void clear_meta();
  static const int kMetaFieldNumber = 5;
  inline const ::braft::SnapshotMeta& meta() const;
  inline ::braft::SnapshotMeta* mutable_meta();
  inline ::braft::SnapshotMeta* release_meta();
  
  // required string uri = 6;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 6;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  
  // @@protoc_insertion_point(class_scope:braft.InstallSnapshotRequest)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_meta();
  inline void clear_has_meta();
  inline void set_has_uri();
  inline void clear_has_uri();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_id_;
  ::std::string* server_id_;
  ::std::string* peer_id_;
  ::google::protobuf::int64 term_;
  ::braft::SnapshotMeta* meta_;
  ::std::string* uri_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fraft_2eproto();
  friend void protobuf_AssignDesc_braft_2fraft_2eproto();
  friend void protobuf_ShutdownFile_braft_2fraft_2eproto();
  
  void InitAsDefaultInstance();
  static InstallSnapshotRequest* default_instance_;
};
// -------------------------------------------------------------------

class InstallSnapshotResponse : public ::google::protobuf::Message {
 public:
  InstallSnapshotResponse();
  virtual ~InstallSnapshotResponse();
  
  InstallSnapshotResponse(const InstallSnapshotResponse& from);
  
  inline InstallSnapshotResponse& operator=(const InstallSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstallSnapshotResponse& default_instance();
  
  void Swap(InstallSnapshotResponse* other);
  
  // implements Message ----------------------------------------------
  
  InstallSnapshotResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstallSnapshotResponse& from);
  void MergeFrom(const InstallSnapshotResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);
  
  // @@protoc_insertion_point(class_scope:braft.InstallSnapshotResponse)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_success();
  inline void clear_has_success();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 term_;
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fraft_2eproto();
  friend void protobuf_AssignDesc_braft_2fraft_2eproto();
  friend void protobuf_ShutdownFile_braft_2fraft_2eproto();
  
  void InitAsDefaultInstance();
  static InstallSnapshotResponse* default_instance_;
};
// -------------------------------------------------------------------

class TimeoutNowRequest : public ::google::protobuf::Message {
 public:
  TimeoutNowRequest();
  virtual ~TimeoutNowRequest();
  
  TimeoutNowRequest(const TimeoutNowRequest& from);
  
  inline TimeoutNowRequest& operator=(const TimeoutNowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeoutNowRequest& default_instance();
  
  void Swap(TimeoutNowRequest* other);
  
  // implements Message ----------------------------------------------
  
  TimeoutNowRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeoutNowRequest& from);
  void MergeFrom(const TimeoutNowRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  
  // required string server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  
  // required string peer_id = 3;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  inline const ::std::string& peer_id() const;
  inline void set_peer_id(const ::std::string& value);
  inline void set_peer_id(const char* value);
  inline void set_peer_id(const char* value, size_t size);
  inline ::std::string* mutable_peer_id();
  inline ::std::string* release_peer_id();
  
  // required int64 term = 4;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 4;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:braft.TimeoutNowRequest)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  inline void set_has_term();
  inline void clear_has_term();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* group_id_;
  ::std::string* server_id_;
  ::std::string* peer_id_;
  ::google::protobuf::int64 term_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fraft_2eproto();
  friend void protobuf_AssignDesc_braft_2fraft_2eproto();
  friend void protobuf_ShutdownFile_braft_2fraft_2eproto();
  
  void InitAsDefaultInstance();
  static TimeoutNowRequest* default_instance_;
};
// -------------------------------------------------------------------

class TimeoutNowResponse : public ::google::protobuf::Message {
 public:
  TimeoutNowResponse();
  virtual ~TimeoutNowResponse();
  
  TimeoutNowResponse(const TimeoutNowResponse& from);
  
  inline TimeoutNowResponse& operator=(const TimeoutNowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeoutNowResponse& default_instance();
  
  void Swap(TimeoutNowResponse* other);
  
  // implements Message ----------------------------------------------
  
  TimeoutNowResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeoutNowResponse& from);
  void MergeFrom(const TimeoutNowResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);
  
  // @@protoc_insertion_point(class_scope:braft.TimeoutNowResponse)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_success();
  inline void clear_has_success();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 term_;
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_braft_2fraft_2eproto();
  friend void protobuf_AssignDesc_braft_2fraft_2eproto();
  friend void protobuf_ShutdownFile_braft_2fraft_2eproto();
  
  void InitAsDefaultInstance();
  static TimeoutNowResponse* default_instance_;
};
// ===================================================================

class RaftService_Stub;

class RaftService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftService() {};
 public:
  virtual ~RaftService();
  
  typedef RaftService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void pre_vote(::google::protobuf::RpcController* controller,
                       const ::braft::RequestVoteRequest* request,
                       ::braft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void request_vote(::google::protobuf::RpcController* controller,
                       const ::braft::RequestVoteRequest* request,
                       ::braft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void append_entries(::google::protobuf::RpcController* controller,
                       const ::braft::AppendEntriesRequest* request,
                       ::braft::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void install_snapshot(::google::protobuf::RpcController* controller,
                       const ::braft::InstallSnapshotRequest* request,
                       ::braft::InstallSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void timeout_now(::google::protobuf::RpcController* controller,
                       const ::braft::TimeoutNowRequest* request,
                       ::braft::TimeoutNowResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService);
};

class RaftService_Stub : public RaftService {
 public:
  RaftService_Stub(::google::protobuf::RpcChannel* channel);
  RaftService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~RaftService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements RaftService ------------------------------------------
  
  void pre_vote(::google::protobuf::RpcController* controller,
                       const ::braft::RequestVoteRequest* request,
                       ::braft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  void request_vote(::google::protobuf::RpcController* controller,
                       const ::braft::RequestVoteRequest* request,
                       ::braft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  void append_entries(::google::protobuf::RpcController* controller,
                       const ::braft::AppendEntriesRequest* request,
                       ::braft::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
  void install_snapshot(::google::protobuf::RpcController* controller,
                       const ::braft::InstallSnapshotRequest* request,
                       ::braft::InstallSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  void timeout_now(::google::protobuf::RpcController* controller,
                       const ::braft::TimeoutNowRequest* request,
                       ::braft::TimeoutNowResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService_Stub);
};


// ===================================================================


// ===================================================================

// EntryMeta

// required int64 term = 1;
inline bool EntryMeta::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntryMeta::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntryMeta::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntryMeta::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 EntryMeta::term() const {
  return term_;
}
inline void EntryMeta::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required .braft.EntryType type = 2;
inline bool EntryMeta::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntryMeta::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntryMeta::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntryMeta::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline braft::EntryType EntryMeta::type() const {
  return static_cast< braft::EntryType >(type_);
}
inline void EntryMeta::set_type(braft::EntryType value) {
  GOOGLE_DCHECK(braft::EntryType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated string peers = 3;
inline int EntryMeta::peers_size() const {
  return peers_.size();
}
inline void EntryMeta::clear_peers() {
  peers_.Clear();
}
inline const ::std::string& EntryMeta::peers(int index) const {
  return peers_.Get(index);
}
inline ::std::string* EntryMeta::mutable_peers(int index) {
  return peers_.Mutable(index);
}
inline void EntryMeta::set_peers(int index, const ::std::string& value) {
  peers_.Mutable(index)->assign(value);
}
inline void EntryMeta::set_peers(int index, const char* value) {
  peers_.Mutable(index)->assign(value);
}
inline void EntryMeta::set_peers(int index, const char* value, size_t size) {
  peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntryMeta::add_peers() {
  return peers_.Add();
}
inline void EntryMeta::add_peers(const ::std::string& value) {
  peers_.Add()->assign(value);
}
inline void EntryMeta::add_peers(const char* value) {
  peers_.Add()->assign(value);
}
inline void EntryMeta::add_peers(const char* value, size_t size) {
  peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntryMeta::peers() const {
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EntryMeta::mutable_peers() {
  return &peers_;
}

// optional int64 data_len = 4;
inline bool EntryMeta::has_data_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EntryMeta::set_has_data_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EntryMeta::clear_has_data_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EntryMeta::clear_data_len() {
  data_len_ = GOOGLE_LONGLONG(0);
  clear_has_data_len();
}
inline ::google::protobuf::int64 EntryMeta::data_len() const {
  return data_len_;
}
inline void EntryMeta::set_data_len(::google::protobuf::int64 value) {
  set_has_data_len();
  data_len_ = value;
}

// repeated string old_peers = 5;
inline int EntryMeta::old_peers_size() const {
  return old_peers_.size();
}
inline void EntryMeta::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& EntryMeta::old_peers(int index) const {
  return old_peers_.Get(index);
}
inline ::std::string* EntryMeta::mutable_old_peers(int index) {
  return old_peers_.Mutable(index);
}
inline void EntryMeta::set_old_peers(int index, const ::std::string& value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void EntryMeta::set_old_peers(int index, const char* value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void EntryMeta::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntryMeta::add_old_peers() {
  return old_peers_.Add();
}
inline void EntryMeta::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
}
inline void EntryMeta::add_old_peers(const char* value) {
  old_peers_.Add()->assign(value);
}
inline void EntryMeta::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntryMeta::old_peers() const {
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EntryMeta::mutable_old_peers() {
  return &old_peers_;
}

// -------------------------------------------------------------------

// RequestVoteRequest

// required string group_id = 1;
inline bool RequestVoteRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestVoteRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestVoteRequest::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& RequestVoteRequest::group_id() const {
  return *group_id_;
}
inline void RequestVoteRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void RequestVoteRequest::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void RequestVoteRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestVoteRequest::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* RequestVoteRequest::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string server_id = 2;
inline bool RequestVoteRequest::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteRequest::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestVoteRequest::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestVoteRequest::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& RequestVoteRequest::server_id() const {
  return *server_id_;
}
inline void RequestVoteRequest::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void RequestVoteRequest::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void RequestVoteRequest::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestVoteRequest::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* RequestVoteRequest::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string peer_id = 3;
inline bool RequestVoteRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestVoteRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestVoteRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestVoteRequest::clear_peer_id() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    peer_id_->clear();
  }
  clear_has_peer_id();
}
inline const ::std::string& RequestVoteRequest::peer_id() const {
  return *peer_id_;
}
inline void RequestVoteRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void RequestVoteRequest::set_peer_id(const char* value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void RequestVoteRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestVoteRequest::mutable_peer_id() {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  return peer_id_;
}
inline ::std::string* RequestVoteRequest::release_peer_id() {
  clear_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_id_;
    peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 term = 4;
inline bool RequestVoteRequest::has_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestVoteRequest::set_has_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestVoteRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestVoteRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 RequestVoteRequest::term() const {
  return term_;
}
inline void RequestVoteRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required int64 last_log_term = 5;
inline bool RequestVoteRequest::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestVoteRequest::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestVoteRequest::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestVoteRequest::clear_last_log_term() {
  last_log_term_ = GOOGLE_LONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::int64 RequestVoteRequest::last_log_term() const {
  return last_log_term_;
}
inline void RequestVoteRequest::set_last_log_term(::google::protobuf::int64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
}

// required int64 last_log_index = 6;
inline bool RequestVoteRequest::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestVoteRequest::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RequestVoteRequest::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RequestVoteRequest::clear_last_log_index() {
  last_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::int64 RequestVoteRequest::last_log_index() const {
  return last_log_index_;
}
inline void RequestVoteRequest::set_last_log_index(::google::protobuf::int64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// -------------------------------------------------------------------

// RequestVoteResponse

// required int64 term = 1;
inline bool RequestVoteResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestVoteResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestVoteResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 RequestVoteResponse::term() const {
  return term_;
}
inline void RequestVoteResponse::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required bool granted = 2;
inline bool RequestVoteResponse::has_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteResponse::set_has_granted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestVoteResponse::clear_has_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestVoteResponse::clear_granted() {
  granted_ = false;
  clear_has_granted();
}
inline bool RequestVoteResponse::granted() const {
  return granted_;
}
inline void RequestVoteResponse::set_granted(bool value) {
  set_has_granted();
  granted_ = value;
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// required string group_id = 1;
inline bool AppendEntriesRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesRequest::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& AppendEntriesRequest::group_id() const {
  return *group_id_;
}
inline void AppendEntriesRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void AppendEntriesRequest::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void AppendEntriesRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppendEntriesRequest::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* AppendEntriesRequest::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string server_id = 2;
inline bool AppendEntriesRequest::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesRequest::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesRequest::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesRequest::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& AppendEntriesRequest::server_id() const {
  return *server_id_;
}
inline void AppendEntriesRequest::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void AppendEntriesRequest::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void AppendEntriesRequest::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppendEntriesRequest::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* AppendEntriesRequest::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string peer_id = 3;
inline bool AppendEntriesRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntriesRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendEntriesRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendEntriesRequest::clear_peer_id() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    peer_id_->clear();
  }
  clear_has_peer_id();
}
inline const ::std::string& AppendEntriesRequest::peer_id() const {
  return *peer_id_;
}
inline void AppendEntriesRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void AppendEntriesRequest::set_peer_id(const char* value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void AppendEntriesRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppendEntriesRequest::mutable_peer_id() {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  return peer_id_;
}
inline ::std::string* AppendEntriesRequest::release_peer_id() {
  clear_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_id_;
    peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 term = 4;
inline bool AppendEntriesRequest::has_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntriesRequest::set_has_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendEntriesRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendEntriesRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 AppendEntriesRequest::term() const {
  return term_;
}
inline void AppendEntriesRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required int64 prev_log_term = 5;
inline bool AppendEntriesRequest::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppendEntriesRequest::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppendEntriesRequest::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppendEntriesRequest::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_LONGLONG(0);
  clear_has_prev_log_term();
}
inline ::google::protobuf::int64 AppendEntriesRequest::prev_log_term() const {
  return prev_log_term_;
}
inline void AppendEntriesRequest::set_prev_log_term(::google::protobuf::int64 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
}

// required int64 prev_log_index = 6;
inline bool AppendEntriesRequest::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppendEntriesRequest::set_has_prev_log_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppendEntriesRequest::clear_has_prev_log_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppendEntriesRequest::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_prev_log_index();
}
inline ::google::protobuf::int64 AppendEntriesRequest::prev_log_index() const {
  return prev_log_index_;
}
inline void AppendEntriesRequest::set_prev_log_index(::google::protobuf::int64 value) {
  set_has_prev_log_index();
  prev_log_index_ = value;
}

// repeated .braft.EntryMeta entries = 7;
inline int AppendEntriesRequest::entries_size() const {
  return entries_.size();
}
inline void AppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
inline const ::braft::EntryMeta& AppendEntriesRequest::entries(int index) const {
  return entries_.Get(index);
}
inline ::braft::EntryMeta* AppendEntriesRequest::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::braft::EntryMeta* AppendEntriesRequest::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::braft::EntryMeta >&
AppendEntriesRequest::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::braft::EntryMeta >*
AppendEntriesRequest::mutable_entries() {
  return &entries_;
}

// required int64 committed_index = 8;
inline bool AppendEntriesRequest::has_committed_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AppendEntriesRequest::set_has_committed_index() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AppendEntriesRequest::clear_has_committed_index() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AppendEntriesRequest::clear_committed_index() {
  committed_index_ = GOOGLE_LONGLONG(0);
  clear_has_committed_index();
}
inline ::google::protobuf::int64 AppendEntriesRequest::committed_index() const {
  return committed_index_;
}
inline void AppendEntriesRequest::set_committed_index(::google::protobuf::int64 value) {
  set_has_committed_index();
  committed_index_ = value;
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// required int64 term = 1;
inline bool AppendEntriesResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 AppendEntriesResponse::term() const {
  return term_;
}
inline void AppendEntriesResponse::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required bool success = 2;
inline bool AppendEntriesResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool AppendEntriesResponse::success() const {
  return success_;
}
inline void AppendEntriesResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional int64 last_log_index = 3;
inline bool AppendEntriesResponse::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntriesResponse::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendEntriesResponse::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendEntriesResponse::clear_last_log_index() {
  last_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::int64 AppendEntriesResponse::last_log_index() const {
  return last_log_index_;
}
inline void AppendEntriesResponse::set_last_log_index(::google::protobuf::int64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// optional bool readonly = 4;
inline bool AppendEntriesResponse::has_readonly() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntriesResponse::set_has_readonly() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendEntriesResponse::clear_has_readonly() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendEntriesResponse::clear_readonly() {
  readonly_ = false;
  clear_has_readonly();
}
inline bool AppendEntriesResponse::readonly() const {
  return readonly_;
}
inline void AppendEntriesResponse::set_readonly(bool value) {
  set_has_readonly();
  readonly_ = value;
}

// -------------------------------------------------------------------

// SnapshotMeta

// required int64 last_included_index = 1;
inline bool SnapshotMeta::has_last_included_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotMeta::set_has_last_included_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapshotMeta::clear_has_last_included_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapshotMeta::clear_last_included_index() {
  last_included_index_ = GOOGLE_LONGLONG(0);
  clear_has_last_included_index();
}
inline ::google::protobuf::int64 SnapshotMeta::last_included_index() const {
  return last_included_index_;
}
inline void SnapshotMeta::set_last_included_index(::google::protobuf::int64 value) {
  set_has_last_included_index();
  last_included_index_ = value;
}

// required int64 last_included_term = 2;
inline bool SnapshotMeta::has_last_included_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapshotMeta::set_has_last_included_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnapshotMeta::clear_has_last_included_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnapshotMeta::clear_last_included_term() {
  last_included_term_ = GOOGLE_LONGLONG(0);
  clear_has_last_included_term();
}
inline ::google::protobuf::int64 SnapshotMeta::last_included_term() const {
  return last_included_term_;
}
inline void SnapshotMeta::set_last_included_term(::google::protobuf::int64 value) {
  set_has_last_included_term();
  last_included_term_ = value;
}

// repeated string peers = 3;
inline int SnapshotMeta::peers_size() const {
  return peers_.size();
}
inline void SnapshotMeta::clear_peers() {
  peers_.Clear();
}
inline const ::std::string& SnapshotMeta::peers(int index) const {
  return peers_.Get(index);
}
inline ::std::string* SnapshotMeta::mutable_peers(int index) {
  return peers_.Mutable(index);
}
inline void SnapshotMeta::set_peers(int index, const ::std::string& value) {
  peers_.Mutable(index)->assign(value);
}
inline void SnapshotMeta::set_peers(int index, const char* value) {
  peers_.Mutable(index)->assign(value);
}
inline void SnapshotMeta::set_peers(int index, const char* value, size_t size) {
  peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SnapshotMeta::add_peers() {
  return peers_.Add();
}
inline void SnapshotMeta::add_peers(const ::std::string& value) {
  peers_.Add()->assign(value);
}
inline void SnapshotMeta::add_peers(const char* value) {
  peers_.Add()->assign(value);
}
inline void SnapshotMeta::add_peers(const char* value, size_t size) {
  peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SnapshotMeta::peers() const {
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SnapshotMeta::mutable_peers() {
  return &peers_;
}

// repeated string old_peers = 4;
inline int SnapshotMeta::old_peers_size() const {
  return old_peers_.size();
}
inline void SnapshotMeta::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& SnapshotMeta::old_peers(int index) const {
  return old_peers_.Get(index);
}
inline ::std::string* SnapshotMeta::mutable_old_peers(int index) {
  return old_peers_.Mutable(index);
}
inline void SnapshotMeta::set_old_peers(int index, const ::std::string& value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void SnapshotMeta::set_old_peers(int index, const char* value) {
  old_peers_.Mutable(index)->assign(value);
}
inline void SnapshotMeta::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SnapshotMeta::add_old_peers() {
  return old_peers_.Add();
}
inline void SnapshotMeta::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
}
inline void SnapshotMeta::add_old_peers(const char* value) {
  old_peers_.Add()->assign(value);
}
inline void SnapshotMeta::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SnapshotMeta::old_peers() const {
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SnapshotMeta::mutable_old_peers() {
  return &old_peers_;
}

// -------------------------------------------------------------------

// InstallSnapshotRequest

// required string group_id = 1;
inline bool InstallSnapshotRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstallSnapshotRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstallSnapshotRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstallSnapshotRequest::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& InstallSnapshotRequest::group_id() const {
  return *group_id_;
}
inline void InstallSnapshotRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void InstallSnapshotRequest::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void InstallSnapshotRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstallSnapshotRequest::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* InstallSnapshotRequest::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string server_id = 2;
inline bool InstallSnapshotRequest::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstallSnapshotRequest::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstallSnapshotRequest::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstallSnapshotRequest::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& InstallSnapshotRequest::server_id() const {
  return *server_id_;
}
inline void InstallSnapshotRequest::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void InstallSnapshotRequest::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void InstallSnapshotRequest::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstallSnapshotRequest::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* InstallSnapshotRequest::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string peer_id = 3;
inline bool InstallSnapshotRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstallSnapshotRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstallSnapshotRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstallSnapshotRequest::clear_peer_id() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    peer_id_->clear();
  }
  clear_has_peer_id();
}
inline const ::std::string& InstallSnapshotRequest::peer_id() const {
  return *peer_id_;
}
inline void InstallSnapshotRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void InstallSnapshotRequest::set_peer_id(const char* value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void InstallSnapshotRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstallSnapshotRequest::mutable_peer_id() {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  return peer_id_;
}
inline ::std::string* InstallSnapshotRequest::release_peer_id() {
  clear_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_id_;
    peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 term = 4;
inline bool InstallSnapshotRequest::has_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstallSnapshotRequest::set_has_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InstallSnapshotRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InstallSnapshotRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 InstallSnapshotRequest::term() const {
  return term_;
}
inline void InstallSnapshotRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required .braft.SnapshotMeta meta = 5;
inline bool InstallSnapshotRequest::has_meta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InstallSnapshotRequest::set_has_meta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InstallSnapshotRequest::clear_has_meta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InstallSnapshotRequest::clear_meta() {
  if (meta_ != NULL) meta_->::braft::SnapshotMeta::Clear();
  clear_has_meta();
}
inline const ::braft::SnapshotMeta& InstallSnapshotRequest::meta() const {
  return meta_ != NULL ? *meta_ : *default_instance_->meta_;
}
inline ::braft::SnapshotMeta* InstallSnapshotRequest::mutable_meta() {
  set_has_meta();
  if (meta_ == NULL) meta_ = new ::braft::SnapshotMeta;
  return meta_;
}
inline ::braft::SnapshotMeta* InstallSnapshotRequest::release_meta() {
  clear_has_meta();
  ::braft::SnapshotMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}

// required string uri = 6;
inline bool InstallSnapshotRequest::has_uri() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InstallSnapshotRequest::set_has_uri() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InstallSnapshotRequest::clear_has_uri() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InstallSnapshotRequest::clear_uri() {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& InstallSnapshotRequest::uri() const {
  return *uri_;
}
inline void InstallSnapshotRequest::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void InstallSnapshotRequest::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void InstallSnapshotRequest::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstallSnapshotRequest::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  return uri_;
}
inline ::std::string* InstallSnapshotRequest::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// InstallSnapshotResponse

// required int64 term = 1;
inline bool InstallSnapshotResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstallSnapshotResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstallSnapshotResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstallSnapshotResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 InstallSnapshotResponse::term() const {
  return term_;
}
inline void InstallSnapshotResponse::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required bool success = 2;
inline bool InstallSnapshotResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstallSnapshotResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstallSnapshotResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstallSnapshotResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool InstallSnapshotResponse::success() const {
  return success_;
}
inline void InstallSnapshotResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// TimeoutNowRequest

// required string group_id = 1;
inline bool TimeoutNowRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeoutNowRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeoutNowRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeoutNowRequest::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& TimeoutNowRequest::group_id() const {
  return *group_id_;
}
inline void TimeoutNowRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void TimeoutNowRequest::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void TimeoutNowRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TimeoutNowRequest::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* TimeoutNowRequest::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string server_id = 2;
inline bool TimeoutNowRequest::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeoutNowRequest::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeoutNowRequest::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeoutNowRequest::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& TimeoutNowRequest::server_id() const {
  return *server_id_;
}
inline void TimeoutNowRequest::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void TimeoutNowRequest::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void TimeoutNowRequest::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TimeoutNowRequest::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* TimeoutNowRequest::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string peer_id = 3;
inline bool TimeoutNowRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeoutNowRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeoutNowRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeoutNowRequest::clear_peer_id() {
  if (peer_id_ != &::google::protobuf::internal::kEmptyString) {
    peer_id_->clear();
  }
  clear_has_peer_id();
}
inline const ::std::string& TimeoutNowRequest::peer_id() const {
  return *peer_id_;
}
inline void TimeoutNowRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void TimeoutNowRequest::set_peer_id(const char* value) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(value);
}
inline void TimeoutNowRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  peer_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TimeoutNowRequest::mutable_peer_id() {
  set_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    peer_id_ = new ::std::string;
  }
  return peer_id_;
}
inline ::std::string* TimeoutNowRequest::release_peer_id() {
  clear_has_peer_id();
  if (peer_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peer_id_;
    peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 term = 4;
inline bool TimeoutNowRequest::has_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TimeoutNowRequest::set_has_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TimeoutNowRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TimeoutNowRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 TimeoutNowRequest::term() const {
  return term_;
}
inline void TimeoutNowRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// -------------------------------------------------------------------

// TimeoutNowResponse

// required int64 term = 1;
inline bool TimeoutNowResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeoutNowResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeoutNowResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeoutNowResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 TimeoutNowResponse::term() const {
  return term_;
}
inline void TimeoutNowResponse::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required bool success = 2;
inline bool TimeoutNowResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeoutNowResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeoutNowResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeoutNowResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TimeoutNowResponse::success() const {
  return success_;
}
inline void TimeoutNowResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace braft

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_braft_2fraft_2eproto__INCLUDED
