// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "braft/builtin_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace braft {

namespace {

const ::google::protobuf::Descriptor* IndexRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* raft_stat_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_braft_2fbuiltin_5fservice_2eproto() {
  protobuf_AddDesc_braft_2fbuiltin_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "braft/builtin_service.proto");
  GOOGLE_CHECK(file != NULL);
  IndexRequest_descriptor_ = file->message_type(0);
  static const int IndexRequest_offsets_[1] = {
  };
  IndexRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexRequest_descriptor_,
      IndexRequest::default_instance_,
      IndexRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexRequest));
  IndexResponse_descriptor_ = file->message_type(1);
  static const int IndexResponse_offsets_[1] = {
  };
  IndexResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexResponse_descriptor_,
      IndexResponse::default_instance_,
      IndexResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexResponse));
  raft_stat_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_braft_2fbuiltin_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexRequest_descriptor_, &IndexRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexResponse_descriptor_, &IndexResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_braft_2fbuiltin_5fservice_2eproto() {
  delete IndexRequest::default_instance_;
  delete IndexRequest_reflection_;
  delete IndexResponse::default_instance_;
  delete IndexResponse_reflection_;
}

void protobuf_AddDesc_braft_2fbuiltin_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033braft/builtin_service.proto\022\005braft\"\016\n\014"
    "IndexRequest\"\017\n\rIndexResponse2H\n\traft_st"
    "at\022;\n\016default_method\022\023.braft.IndexReques"
    "t\032\024.braft.IndexResponseB\003\200\001\001", 148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "braft/builtin_service.proto", &protobuf_RegisterTypes);
  IndexRequest::default_instance_ = new IndexRequest();
  IndexResponse::default_instance_ = new IndexResponse();
  IndexRequest::default_instance_->InitAsDefaultInstance();
  IndexResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_braft_2fbuiltin_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_braft_2fbuiltin_5fservice_2eproto {
  StaticDescriptorInitializer_braft_2fbuiltin_5fservice_2eproto() {
    protobuf_AddDesc_braft_2fbuiltin_5fservice_2eproto();
  }
} static_descriptor_initializer_braft_2fbuiltin_5fservice_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IndexRequest::IndexRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IndexRequest::InitAsDefaultInstance() {
}

IndexRequest::IndexRequest(const IndexRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndexRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexRequest::~IndexRequest() {
  SharedDtor();
}

void IndexRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexRequest_descriptor_;
}

const IndexRequest& IndexRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

IndexRequest* IndexRequest::default_instance_ = NULL;

IndexRequest* IndexRequest::New() const {
  return new IndexRequest;
}

void IndexRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IndexRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IndexRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndexRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexRequest::MergeFrom(const IndexRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexRequest::CopyFrom(const IndexRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRequest::IsInitialized() const {
  
  return true;
}

void IndexRequest::Swap(IndexRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexRequest_descriptor_;
  metadata.reflection = IndexRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IndexResponse::IndexResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IndexResponse::InitAsDefaultInstance() {
}

IndexResponse::IndexResponse(const IndexResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndexResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexResponse::~IndexResponse() {
  SharedDtor();
}

void IndexResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexResponse_descriptor_;
}

const IndexResponse& IndexResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2fbuiltin_5fservice_2eproto();  return *default_instance_;
}

IndexResponse* IndexResponse::default_instance_ = NULL;

IndexResponse* IndexResponse::New() const {
  return new IndexResponse;
}

void IndexResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IndexResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IndexResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndexResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexResponse::MergeFrom(const IndexResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexResponse::CopyFrom(const IndexResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexResponse::IsInitialized() const {
  
  return true;
}

void IndexResponse::Swap(IndexResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexResponse_descriptor_;
  metadata.reflection = IndexResponse_reflection_;
  return metadata;
}


// ===================================================================

raft_stat::~raft_stat() {}

const ::google::protobuf::ServiceDescriptor* raft_stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return raft_stat_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* raft_stat::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return raft_stat_descriptor_;
}

void raft_stat::default_method(::google::protobuf::RpcController* controller,
                         const ::braft::IndexRequest*,
                         ::braft::IndexResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void raft_stat::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), raft_stat_descriptor_);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::braft::IndexRequest*>(request),
             ::google::protobuf::down_cast< ::braft::IndexResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& raft_stat::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::IndexRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& raft_stat::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::IndexResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

raft_stat_Stub::raft_stat_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
raft_stat_Stub::raft_stat_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
raft_stat_Stub::~raft_stat_Stub() {
  if (owns_channel_) delete channel_;
}

void raft_stat_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::braft::IndexRequest* request,
                              ::braft::IndexResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace braft

// @@protoc_insertion_point(global_scope)
