// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "braft/file_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace braft {

namespace {

const ::google::protobuf::Descriptor* GetFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* FileService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_braft_2ffile_5fservice_2eproto() {
  protobuf_AddDesc_braft_2ffile_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "braft/file_service.proto");
  GOOGLE_CHECK(file != NULL);
  GetFileRequest_descriptor_ = file->message_type(0);
  static const int GetFileRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, reader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, read_partly_),
  };
  GetFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileRequest_descriptor_,
      GetFileRequest::default_instance_,
      GetFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileRequest));
  GetFileResponse_descriptor_ = file->message_type(1);
  static const int GetFileResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileResponse, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileResponse, read_size_),
  };
  GetFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileResponse_descriptor_,
      GetFileResponse::default_instance_,
      GetFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileResponse));
  FileService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_braft_2ffile_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileRequest_descriptor_, &GetFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileResponse_descriptor_, &GetFileResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_braft_2ffile_5fservice_2eproto() {
  delete GetFileRequest::default_instance_;
  delete GetFileRequest_reflection_;
  delete GetFileResponse::default_instance_;
  delete GetFileResponse_reflection_;
}

void protobuf_AddDesc_braft_2ffile_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030braft/file_service.proto\022\005braft\"i\n\016Get"
    "FileRequest\022\021\n\treader_id\030\001 \002(\003\022\020\n\010filena"
    "me\030\002 \002(\t\022\r\n\005count\030\003 \002(\003\022\016\n\006offset\030\004 \002(\003\022"
    "\023\n\013read_partly\030\005 \001(\010\"1\n\017GetFileResponse\022"
    "\013\n\003eof\030\001 \002(\010\022\021\n\tread_size\030\002 \001(\0032H\n\013FileS"
    "ervice\0229\n\010get_file\022\025.braft.GetFileReques"
    "t\032\026.braft.GetFileResponseB\003\200\001\001", 270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "braft/file_service.proto", &protobuf_RegisterTypes);
  GetFileRequest::default_instance_ = new GetFileRequest();
  GetFileResponse::default_instance_ = new GetFileResponse();
  GetFileRequest::default_instance_->InitAsDefaultInstance();
  GetFileResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_braft_2ffile_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_braft_2ffile_5fservice_2eproto {
  StaticDescriptorInitializer_braft_2ffile_5fservice_2eproto() {
    protobuf_AddDesc_braft_2ffile_5fservice_2eproto();
  }
} static_descriptor_initializer_braft_2ffile_5fservice_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GetFileRequest::kReaderIdFieldNumber;
const int GetFileRequest::kFilenameFieldNumber;
const int GetFileRequest::kCountFieldNumber;
const int GetFileRequest::kOffsetFieldNumber;
const int GetFileRequest::kReadPartlyFieldNumber;
#endif  // !_MSC_VER

GetFileRequest::GetFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileRequest::InitAsDefaultInstance() {
}

GetFileRequest::GetFileRequest(const GetFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileRequest::SharedCtor() {
  _cached_size_ = 0;
  reader_id_ = GOOGLE_LONGLONG(0);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = GOOGLE_LONGLONG(0);
  offset_ = GOOGLE_LONGLONG(0);
  read_partly_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileRequest::~GetFileRequest() {
  SharedDtor();
}

void GetFileRequest::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void GetFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileRequest_descriptor_;
}

const GetFileRequest& GetFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2ffile_5fservice_2eproto();  return *default_instance_;
}

GetFileRequest* GetFileRequest::default_instance_ = NULL;

GetFileRequest* GetFileRequest::New() const {
  return new GetFileRequest;
}

void GetFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reader_id_ = GOOGLE_LONGLONG(0);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    count_ = GOOGLE_LONGLONG(0);
    offset_ = GOOGLE_LONGLONG(0);
    read_partly_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 reader_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reader_id_)));
          set_has_reader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }
      
      // required string filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // required int64 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }
      
      // required int64 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_read_partly;
        break;
      }
      
      // optional bool read_partly = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_partly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_partly_)));
          set_has_read_partly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 reader_id = 1;
  if (has_reader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reader_id(), output);
  }
  
  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }
  
  // required int64 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->count(), output);
  }
  
  // required int64 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->offset(), output);
  }
  
  // optional bool read_partly = 5;
  if (has_read_partly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->read_partly(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 reader_id = 1;
  if (has_reader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reader_id(), target);
  }
  
  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }
  
  // required int64 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->count(), target);
  }
  
  // required int64 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->offset(), target);
  }
  
  // optional bool read_partly = 5;
  if (has_read_partly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->read_partly(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 reader_id = 1;
    if (has_reader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reader_id());
    }
    
    // required string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // required int64 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }
    
    // required int64 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }
    
    // optional bool read_partly = 5;
    if (has_read_partly()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileRequest::MergeFrom(const GetFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reader_id()) {
      set_reader_id(from.reader_id());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_read_partly()) {
      set_read_partly(from.read_partly());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileRequest::CopyFrom(const GetFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void GetFileRequest::Swap(GetFileRequest* other) {
  if (other != this) {
    std::swap(reader_id_, other->reader_id_);
    std::swap(filename_, other->filename_);
    std::swap(count_, other->count_);
    std::swap(offset_, other->offset_);
    std::swap(read_partly_, other->read_partly_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileRequest_descriptor_;
  metadata.reflection = GetFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileResponse::kEofFieldNumber;
const int GetFileResponse::kReadSizeFieldNumber;
#endif  // !_MSC_VER

GetFileResponse::GetFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileResponse::InitAsDefaultInstance() {
}

GetFileResponse::GetFileResponse(const GetFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileResponse::SharedCtor() {
  _cached_size_ = 0;
  eof_ = false;
  read_size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileResponse::~GetFileResponse() {
  SharedDtor();
}

void GetFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileResponse_descriptor_;
}

const GetFileResponse& GetFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_braft_2ffile_5fservice_2eproto();  return *default_instance_;
}

GetFileResponse* GetFileResponse::default_instance_ = NULL;

GetFileResponse* GetFileResponse::New() const {
  return new GetFileResponse;
}

void GetFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eof_ = false;
    read_size_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool eof = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eof_)));
          set_has_eof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_read_size;
        break;
      }
      
      // optional int64 read_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &read_size_)));
          set_has_read_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool eof = 1;
  if (has_eof()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->eof(), output);
  }
  
  // optional int64 read_size = 2;
  if (has_read_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->read_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool eof = 1;
  if (has_eof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->eof(), target);
  }
  
  // optional int64 read_size = 2;
  if (has_read_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->read_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool eof = 1;
    if (has_eof()) {
      total_size += 1 + 1;
    }
    
    // optional int64 read_size = 2;
    if (has_read_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->read_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileResponse::MergeFrom(const GetFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eof()) {
      set_eof(from.eof());
    }
    if (from.has_read_size()) {
      set_read_size(from.read_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileResponse::CopyFrom(const GetFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetFileResponse::Swap(GetFileResponse* other) {
  if (other != this) {
    std::swap(eof_, other->eof_);
    std::swap(read_size_, other->read_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileResponse_descriptor_;
  metadata.reflection = GetFileResponse_reflection_;
  return metadata;
}


// ===================================================================

FileService::~FileService() {}

const ::google::protobuf::ServiceDescriptor* FileService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* FileService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileService_descriptor_;
}

void FileService::get_file(::google::protobuf::RpcController* controller,
                         const ::braft::GetFileRequest*,
                         ::braft::GetFileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method get_file() not implemented.");
  done->Run();
}

void FileService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), FileService_descriptor_);
  switch(method->index()) {
    case 0:
      get_file(controller,
             ::google::protobuf::down_cast<const ::braft::GetFileRequest*>(request),
             ::google::protobuf::down_cast< ::braft::GetFileResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FileService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::GetFileRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& FileService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::braft::GetFileResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

FileService_Stub::FileService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FileService_Stub::FileService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FileService_Stub::~FileService_Stub() {
  if (owns_channel_) delete channel_;
}

void FileService_Stub::get_file(::google::protobuf::RpcController* controller,
                              const ::braft::GetFileRequest* request,
                              ::braft::GetFileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace braft

// @@protoc_insertion_point(global_scope)
